Index: McOpteron.cc
===================================================================
--- McOpteron.cc	(revision 983)
+++ McOpteron.cc	(working copy)
@@ -715,7 +715,7 @@
       if (strstr(op3,"imm")) {
          strcpy(op2,op3);
       }
-
+		
       // fixup single-operand instructions and other issues
       if (strstr(mnemonic,"POP")) {
          // source is memory, so set op2="m"
@@ -751,10 +751,27 @@
          iOpSize = 16;
       } else if (strstr(op1,"8") || strstr(op2,"8")) {
          iOpSize = 8;
+      //Waleed: added the following condition for xmm
+      } else if (strstr(op1,"xmm") || strstr(op2,"xmm")) {
+         iOpSize = 128;
       } else {
          iOpSize = 64;
       }
-
+ 
+      // Waleed: xmm and mm registers were mistakenly seen as mem ops
+      if (strstr(op1,"xmm")) {
+         strcpy(op1,"reg");
+      }	  
+      if (strstr(op2,"xmm")) {
+         strcpy(op2,"reg");
+      }	  
+      if ( !strstr(op1,"imm") && strstr(op1,"mm") ) {
+         strcpy(op1,"reg");
+      }	  
+      if ( !strstr(op2,"imm") && strstr(op2,"mm") ) {
+         strcpy(op2,"reg");
+      }	  
+	
       if (strstr(op1,"m")) {
          strcpy(op1,"mem");
          storeProb = 1.0;
@@ -773,6 +790,11 @@
       } else
          loadProb = 0.0;
 
+      // Waleed: fix loadProb for isntructions other than MOV* where 
+      // if the 1st operand is mem, it means a load and a store such as ADD mem, reg
+      if (strstr(op1,"mem") && !strstr(mnemonic, "MOV")) 
+         loadProb = 1.0;
+	  		
       if (Debug>=3)
          fprintf(stderr, "%s:%d %s%g,%s%g %llu  %lg\n",mnemonic,iOpSize,
                  op1,storeProb,op2,loadProb,occurs,iProbability);
@@ -971,7 +993,8 @@
    // Check for finishing conditions
    if (!(currentCycle % 500000)) {
       double cpi = (double) currentCycle / totalInstructions;
-      if (fabs(lastCPI - cpi) < 0.01)
+	  // Waleed: playing with threshold
+      if (fabs(lastCPI - cpi) < 0.001)
          return 1;
       lastCPI = cpi;
    }
@@ -1067,7 +1090,10 @@
          // generate number of instructions for this fetch
          // - formula tested in fetchavg.tcl
          curFetchInsnCount = round(genRandomProbability()*6-3+instructionsPerFetch);
-         assert(curFetchInsnCount >= 1); // must be >= one, so range cannot produce zero!
+         // Waleed: set curFetchInsnCount to 1 if random < 1? Just to avoid assert errors!
+		 // Waleed: we probably still need to come up with a better solution for this! 
+		 if(curFetchInsnCount < 1) curFetchInsnCount = 1;
+		 assert(curFetchInsnCount >= 1); // must be >= one, so range cannot produce zero!
       }
    }
    
@@ -1233,13 +1259,20 @@
    }
    // sample probability of address operand
    // TODO: allow both load and store on same insn
-   if (genRandomProbability() <= t->getType()->getLoadProb()) {
-      if (Debug>=3) fprintf(stderr, "  has load  at %llu\n", fakeAddress);
-      t->setMemoryLoadInfo(fakeAddress++, 8); // 8-byte fetch
-   } else if (genRandomProbability() <= t->getType()->getStoreProb()) {
-      if (Debug>=3) fprintf(stderr, "  has store at %llu\n", fakeAddress);
-      t->setMemoryStoreInfo(fakeAddress++, 8); // 8-byte store
-   }
+   // Waleed: just re-arranging the check for load/store; 
+   // Waleed: i'm checking if there's a prob for a load/store first
+   // Waleed: still, as mentioned above, the case for tokens with both load & store needs 
+   // Waleed: to be addressed
+   p = genRandomProbability();
+   if (p <= (t->getType()->getLoadProb()+t->getType()->getStoreProb()) ) {
+	  if(p <= t->getType()->getLoadProb() ) { 	
+		  if (Debug>=3) fprintf(stderr, "  has load  at %llu\n", fakeAddress);
+		  t->setMemoryLoadInfo(fakeAddress++, 8); // 8-byte fetch
+	   } else {
+		  if (Debug>=3) fprintf(stderr, "  has store at %llu\n", fakeAddress);
+		  t->setMemoryStoreInfo(fakeAddress++, 8); // 8-byte store
+   		}
+	}	
    // check if this instruction has incoming dependencies
    dep = checkForDependencies(t->instructionNumber());
    t->setInDependency(dep); // might be null, but ok
