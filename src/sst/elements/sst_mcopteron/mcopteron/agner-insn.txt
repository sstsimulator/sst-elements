/* 64- and 128- Bit Instructions */
/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency; */
/*              +Memory Latency;Throughput;Category  */
/*  By default, if an instruction has no character to its left, this means */
/*  that there is always a 2-cycle difference between that instruction have */
/*  only xmmister operands and that instruction having a memory operand. */
/*  Any instruction that has a memory operand as its second operand is a */
/*  LOAD. Instructions with an * in front of them means that the operands */
/*  must be inspected before you can tell which        */
/*  execution it will use and, therefore, its latency. */

/* WALEED: notes, I'm making a line for each unique combination of operands */
/*   I'm also removing the memory + latency because that should be taken care of in the model and since */
/*   We are reading a detailed instruction mix, each line of which should hit in exactly one line here */ 
/* also, replaced all CL/.. references with 'reg' and constant '1''s with 'imm'
// all entries with unspecified reg size, replaced to reg8/16/32/64
// finally, entries with unspecified 'mem' size also replaced to mem8/mem16/mem32/mem64

*MOVAPD  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVAPD  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
*MOVAPD  mem,xmm         MOV     double  FSTORE           2  0   1/1  FSTORE-2
*MOVAPS  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVAPS  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
*MOVAPS  mem,xmm         MOV     double  FSTORE           2  0   1/1  FSTORE-2
*MOVD    reg32,xmm/mm    MOV     single  FADD              3  0   1/1  FADD-3
*MOVD    reg64,xmm/mm    MOV     single  FADD              3  0   1/1  FADD-3
*MOVD    xmm,mem         MOV     single  FADD/FMUL/FSTORE  2  0   2/1  FLOAD-2
*MOVD    mem,xmm/mm      MOV     single  FSTORE            2  0   1/1  FSTORE-2
*MOVD    mm,mem          MOV     single  FADD/FMUL/FSTORE  4  0   2/1  FLOAD-4
*MOVD    xmm/mm,reg32    MOV     double  FMUL&ALU          6  0   1/3  ALU-6
*MOVD    xmm/mm,reg64    MOV     double  FMUL&ALU          6  0   1/3  ALU-6
*MOVDDUP xmm,xmm         MOV     single  FADD/FMUL        2  0   3/1  FADD-2
*MOVDDUP xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
*MOVDDUP mem,xmm         MOV     single  FSTORE           2  0   2/1  FLOAD-2
MOVDQ2Q  mm,xmm          MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQA  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQA  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
*MOVDQA  mem,xmm         MOV     double  FSTORE           2  0   1/1  FSTORE-2
*MOVDQU  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQU  mem,xmm         MOV     vector  FSTORE           3  0   1/2  FSTORE-3
*MOVDQU  xmm,mem         MOV     single  FADD/FMUL/FSTORE 2  0   2/1  FLOAD-2
MOVHLPS  xmm,xmm         MOV     single  FADD/FMUL  2    0    2/1   FADD-2
MOVHLPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FADD-2
MOVHLPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FADD-2
*MOVHPD  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVHPD  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVHPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVHPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
MOVLHPS  xmm,xmm         MOV     single  FADD/FMUL  2    0    2/1   FADD-2
MOVLHPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FADD-2
MOVLHPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FADD-2
*MOVLPD  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVLPD  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVLPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVLPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
MOVMSKPD reg32/reg64,xmm         MOV     single  FADD       3    0    1/1   FADD-3
MOVMSKPS reg32/reg64,xmm         MOV     single  FADD       3    0    1/1   FADD-3
/* The instruction latency is not given for these instructions in manual */
/* 40546.pdf, pg 261               */
MOVNTDQ  mem,xmm         MOV     double  FSTORE     3   0    1/1  FSTORE-X
MOVNTPD  mem,xmm         MOV     double  FSTORE     3   0    1/3  FSTORE-X
MOVNTPS  mem,xmm         MOV     double  FSTORE     3   0    1/3  FSTORE-X
MOVNTSD  mem,xmm         MOV     double  FSTORE     3   0    1/1  FSTORE-X
MOVNTSS  mem,xmm         MOV     double  FSTORE     3   0    1/1  FSTORE-X
MOVNTQ   mem,mm          MOV     single  FSTORE     3   0    1/1  FSTORE-X
*MOVQ    xmm,xmm         MOV     single  FADD/FMUL/FSTORE  2   0   3/1   FADD-2
*MOVQ    xmm/mm,reg64    MOV     double  FMUL&ALU          6  0   1/3  ALU-6
*MOVQ    reg64,xmm/mm    MOV     single  FADD              3  0   1/1  FADD-3
*MOVQ    mm,mm           MOV     single  FADD/FMUL/FSTORE  2   0   2/1   FADD-2
*MOVQ    mem,xmm/mm      MOV     single  FSTORE            2   0   1/1   FSTORE-2
*MOVQ    xmm,mem         MOV     single  FSTORE            2   0   2/1   FLOAD-2
*MOVQ    mm,mem          MOV     single  FADD/FMUL/FSTORE  4   0   2/1   FLOAD-4
MOVQ2DQ  xmm,mm          MOV     single  FADD/FMUL 2   0   3/1   FADD-2
*MOVSD   xmm,xmm         MOV     single  FADD/FMUL              2    0    2/1   FADD-2
*MOVSD   xmm,mem         MOV     single  FADD/FMUL/FSTORE       2    0    2/1   FLOAD-2
*MOVSD   mem,xmm         MOV     single  FSTORE                 2    0    1/1   FSTORE-2
*MOVSS   xmm,xmm         MOV     single  FADD/FMUL              2    0    2/1   FADD-2
*MOVSS   mem,xmm         MOV     single  FSTORE                 2    0    1/1   FSTORE-2
*MOVSS   xmm,mem         MOV     single  FADD/FMUL/FSTORE       2    0    2/1   FLOAD-2
*MOVSHDUP xmm,xmm        MOV     single  FADD/FMUL              2    0    2/1   FADD-2
*MOVSHDUP xmm,mem        MOV     single  FADD/FMUL/FSTORE       2    0    2/1   FLOAD-2
*MOVSLDUP xmm,xmm        MOV     single  FADD/FMUL              2    0    2/1   FADD-2
*MOVSLDUP xmm,mem        MOV     single  FADD/FMUL/FSTORE       2    0    2/1   FLOAD-2
*MOVUPD  xmm,xmm         MOV     single  FADD/FMUL/FSTORE       2   0   2/1   FADD-2
*MOVUPD  mem,xmm         MOV     vector  FSTORE                 3   0   1/2   FSTORE-3
*MOVUPD  xmm,mem         MOV     single  FADD/FMUL/FSTORE       2   0   2/1   FLOAD-2
*MOVUPS  xmm,xmm         MOV     single  FADD/FMUL/FSTORE       2   0   2/1   FADD-2
*MOVUPS  mem,xmm         MOV     vector  FSTORE                 3   0   1/2   FSTORE-3
*MOVUPS  xmm,mem         MOV     single  FADD/FMUL/FSTORE       2   0   2/1   FLOAD-2


CMPPD    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPPD    xmm,mem,imm     ADD     single  FADD       2    2    1/1   FADD-2
CMPPS    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPPS    xmm,mem,imm     ADD     single  FADD       2    2    1/1   FADD-2
CMPSD    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPSD    xmm,mem,imm     ADD     single  FADD       2    2    1/1   FADD-2
CMPSS    xmm,xmm,imm     ADD     single  FADD       2    0    1/1   FADD-2
CMPSS    xmm,mem,imm     ADD     single  FADD       2    2    1/1   FADD-2
MAXPD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXPD    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MAXPS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXPS    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MAXSD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXSD    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MAXSS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MAXSS    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MINPD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINPD    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MINPS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINPS    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MINSD    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINSD    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2
MINSS    xmm,xmm         ADD     single  FADD       2    0    1/1   FADD-2
MINSS    xmm,mem         ADD     single  FADD       2    2    1/1   FADD-2

PFCMPEQ  mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFCMPGE  mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFCMPGT  mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFMAX    mm,mm           ADD     single  FADD       2    0    1/1   FADD-2
PFMIN    mm,mm           ADD     single  FADD       2    0    1/1   FADD-2

EXTRQ    xmm,xmm/imm,imm ADD     single  FADD/FMUL         2    0    2/1   FADD-2
EXTRQ    mem,xmm/imm,imm ADD     single  FADD/FMUL/FSTORE  2    0    2/1   FADD-2

*PACKSSDW mm,xmm/mm      ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSDW mm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
*PACKSSWB mm,xmm/mm      ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSWB mm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
*PACKUSWB mm,xmm/mm      ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKUSWB mm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
*PACKSSDW mm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
*PACKSSWB xmm,xmm/mm     ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKUSWB xmm,xmm/mm     ADD     single  FADD/FMUL  2    0    2/1   FADD-2
*PACKSSDW xmm,mem        ADD     single  FADD/FMUL  2    2    2/1   FADD-2
*PACKSSWB xmm,mem        ADD     single  FADD/FMUL  2    2    2/1   FADD-2
*PACKUSWB xmm,mem        ADD     single  FADD/FMUL  2    2    2/1   FADD-2

PADDB    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDD    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDQ    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDSB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDUSB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PADDUSW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAVGB    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAVGW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAVGUSB  mm,mm           ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPEQB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPEQW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPEQD  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPGTB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPGTW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PCMPGTD  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMAXSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMAXUB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMINSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PMINUB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2  

PADDB    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDW    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDD    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDQ    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDSB   xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDSW   xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDUSB  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDUSW  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAVGB    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAVGW    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAVGUSB  mm,mem       ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPEQB  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPEQW  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPEQD  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPGTB  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPGTW  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPGTD  xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMAXSW   xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMAXUB   xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMINSW   xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMINUB   xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2  

PSHUFD   xmm,xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSHUFD   xmm,mem,imm         ADD     single  FADD/FMUL  3    2    2/1   FADD-2

PSHUFW   mm,mm,imm           ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSHUFHW  xmm,xmm,imm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSHUFLW  xmm,xmm,imm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSLLW    xmm/mm,xmm/mm/imm   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSLLD    xmm/mm,xmm/mm/imm   ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSLLQ    xmm/mm,xmm/mm/imm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSLLDQ   xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSRAW    xmm,xmm/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRAD    xmm,xmm/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRLW    xmm,xmm/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRLD    xmm,xmm/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRLQ    xmm,xmm/imm ADD single  FADD/FMUL  3    0    2/1   FADD-2
PSRAW    mm,mm/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRAD    mm,mm/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLW    mm,mm/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLD    mm,mm/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLQ    mm,mm/imm ADD single  FADD/FMUL  2    0    2/1   FADD-2
PSRLDQ   xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PSUBB    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBD    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBQ    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBSB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBUSB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBUSW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSWAPD   mm,mm           ADD     single  FADD/FMUL  2    0    2/1   FADD-2


PSHUFW   mm,mem,imm           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSHUFHW  xmm,mem,imm          ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSHUFLW  xmm,mem,imm          ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSLLW    xmm/mm,mem           ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PSLLD    xmm/mm,mem           ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PSLLQ    xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSRAW    xmm,mem              ADD single  FADD/FMUL  3    2    2/1   FADD-2
PSRAD    xmm,mem              ADD single  FADD/FMUL  3    2    2/1   FADD-2
PSRLW    xmm,mem              ADD single  FADD/FMUL  3    2    2/1   FADD-2
PSRLD    xmm,mem              ADD single  FADD/FMUL  3    2    2/1   FADD-2
PSRLQ    xmm,mem              ADD single  FADD/FMUL  3    2    2/1   FADD-2
PSRAW    mm,mem               ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRAD    mm,mem               ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLW    mm,mem               ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLD    mm,mem               ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLQ    mm,mem               ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSUBB    xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBW    xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBD    xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBQ    xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBSB   xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBSW   xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBUSB  xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBUSW  xmm/mm,mem           ADD     single  FADD/FMUL  2    2    2/1   FADD-2


PUNPCKHBW mm,mm  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKHWD mm,mm  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKHDQ mm,mm  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKLBW mm,mm  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKLWD mm,mm  ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PUNPCKLDQ mm,mm  ADD     single  FADD/FMUL  2    0    2/1   FADD-2

PUNPCKHBW mm,mem  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKHWD mm,mem  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKHDQ mm,mem  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLBW mm,mem  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLWD mm,mem  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLDQ mm,mem  ADD     single  FADD/FMUL  2    2    2/1   FADD-2


PUNPCKHBW xmm,xmm  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKHWD xmm,xmm  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKHDQ xmm,xmm  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLBW xmm,xmm  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLWD xmm,xmm  ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLDQ xmm,xmm  ADD     single  FADD/FMUL  3    0    2/1   FADD-2


PUNPCKHBW xmm,mem  ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKHWD xmm,mem  ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKHDQ xmm,mem  ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKLBW xmm,mem  ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKLWD xmm,mem  ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKLDQ xmm,mem  ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKHQDQ xmm,xmm       ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKLQDQ xmm,xmm       ADD     single  FADD/FMUL  3    0    2/1   FADD-2
PUNPCKHQDQ xmm,mem       ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PUNPCKLQDQ xmm,mem       ADD     single  FADD/FMUL  3    2    2/1   FADD-2
PXOR     xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PAND     xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PANDN    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
POR      xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PXOR     xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAND     xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PANDN    xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
POR      xmm/mm,mem   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
SHUFPD   xmm,xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
SHUFPS   xmm,xmm,imm         ADD     single  FADD/FMUL  3    0    2/1   FADD-2
SHUFPD   xmm,mem,imm         ADD     single  FADD/FMUL  3    2    2/1   FADD-2
SHUFPS   xmm,mem,imm         ADD     single  FADD/FMUL  3    2    2/1   FADD-2
UNPCKHPD xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKHPS xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKLPD xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKLPS xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
XORPD    xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
XORPS    xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ORPD     xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ORPS     xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDPD    xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDPS    xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDNPD   xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ANDNPS   xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
UNPCKHPD xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKHPS xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKLPD xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKLPS xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
XORPD    xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
XORPS    xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ORPD     xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ORPS     xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDPD    xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDPS    xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDNPD   xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDNPS   xmm,mem         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMOVMSKB reg32/reg64,xmm/mm      ADD     single  FADD       3    0    1/1   FADD-3

COMISD   xmm,xmm         ADD     single  FADD       3    0    1/1   FADD-3
COMISS   xmm,xmm         ADD     single  FADD       3    0    1/1   FADD-3
PSADBW   xmm/mm,xmm/mm   ADD     single  FADD       3    0    1/1   FADD-3
UCOMISD  xmm,xmm         ADD     single  FADD       3    0    1/1   FADD-3
UCOMISS  xmm,xmm         ADD     single  FADD       3    0    1/1   FADD-3
ADDPD    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
ADDPS    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
ADDSD    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
ADDSS    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
SUBPD    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
SUBPS    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
SUBSD    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
SUBSS    xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
ADDSUBPD xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
ADDSUBPS xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
HADDPD   xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
HADDPS   xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
HSUBPD   xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4
HSUBPS   xmm,xmm         ADD     single  FADD       4    0    1/1   FADD-4


COMISD   xmm,mem         ADD     single  FADD       3    2    1/1   FADD-3
COMISS   xmm,mem         ADD     single  FADD       3    2    1/1   FADD-3
PSADBW   xmm/mm,mem      ADD     single  FADD       3    2    1/1   FADD-3
UCOMISD  xmm,mem         ADD     single  FADD       3    2    1/1   FADD-3
UCOMISS  xmm,mem         ADD     single  FADD       3    2    1/1   FADD-3
ADDPD    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
ADDPS    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
ADDSD    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
ADDSS    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
SUBPD    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
SUBPS    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
SUBSD    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
SUBSS    xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
ADDSUBPD xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
ADDSUBPS xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
HADDPD   xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
HADDPS   xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
HSUBPD   xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
HSUBPS   xmm,mem         ADD     single  FADD       4    2    1/1   FADD-4
PF2ID    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PF2IW    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PI2FD    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PI2FW    mm,mm           ADD     single  FSTORE       5    0    1/1   FADD-5
PFACC    mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFADD    mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFNACC   mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFPNACC  mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFSUB    mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
PFSUBR   mm,mm           ADD     single  FADD       4    0    1/1   FADD-4
*PINSRW  xmm/mm,reg32/reg64,imm     ADD     double  FADD/FMUL  9    0    1/3   FADD-9
*PINSRW  xmm/mm,mem,imm             ADD     single  FADD/FMUL  4    0    1/1   FADD-9
LDDQU    xmm,mem                    LOAD    single  FADD/FMUL/FSTORE     2    0    2/1   FLOAD-2


CVTDQ2PS xmm,xmm         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTDQ2PD xmm,xmm         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTDQ2PS xmm,mem         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTDQ2PD xmm,mem         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTPD2DQ xmm,xmm    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTTPD2DQ xmm,xmm   ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTPD2DQ xmm,mem    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    2  1/1  REGWRITE-7
CVTTPD2DQ xmm,mem   ADD/WRITE double  (FADD/FMUL)&FSTORE 7    2  1/1  REGWRITE-7
CVTPD2PI mm,xmm     ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTTPD2PI mm,xmm    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTPD2PI mm,mem     ADD/WRITE double  (FADD/FMUL)&FSTORE 7    2  1/1  REGWRITE-7
CVTTPD2PI mm,mem    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    2  1/1  REGWRITE-7
CVTPD2PS xmm,xmm    CNVT      double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTPD2PS xmm,mem    CNVT      double  (FADD/FMUL)&FSTORE 7    2  1/1  REGWRITE-7
CVTPI2PD xmm,mm     CNVT      single  FSTORE     4    0    1/1   REGWRITE-4
CVTPI2PD xmm,mem    CNVT      single  FSTORE     4    2    1/1   REGWRITE-4
CVTPI2PS xmm,mm     ADD/WRITE double  (FADD/FMUL)&FSTORE 7    0  1/1  REGWRITE-7
CVTPI2PS xmm,mem    ADD/WRITE double  (FADD/FMUL)&FSTORE 7    2  1/1  REGWRITE-7
CVTPS2DQ xmm,xmm         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTTPS2DQ xmm,xmm        CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTPS2DQ xmm,mem         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTTPS2DQ xmm,mem        CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTPS2PD xmm,xmm         CNVT    single  FSTORE     2    0    1/1   REGWRITE-2
CVTPS2PD xmm,mem         CNVT    single  FSTORE     2    2    1/1   REGWRITE-2
CVTPS2PI mm,xmm          CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTTPS2PI mm,xmm         CNVT    single  FSTORE     4    0    1/1   REGWRITE-4
CVTPS2PI mm,mem          CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTTPS2PI mm,mem         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTSD2SI  reg32/reg64,xmm        ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTTSD2SI reg32/reg64,xmm        ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTSD2SI  reg32/reg64,mem        ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTTSD2SI reg32/reg64,mem        ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTSD2SS xmm,xmm                 CNVT    vector  (FADD/FMUL)&FSTORE 8    0  1/8  REGWRITE-8
CVTSD2SS xmm,mem                 CNVT    double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-8
CVTSI2SD xmm/reg32/reg64,mem     ADD/WRITE double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-9 
CVTSI2SD xmm,xmm/reg32/reg64     ADD/WRITE vector  (FADD/FMUL)&FSTORE 14   0  1/3  REGWRITE-14
CVTSI2SS xmm/reg32/reg64,mem     ADD/WRITE double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-9
CVTSI2SS xmm,xmm/reg32/reg64     ADD/WRITE vector  (FADD/FMUL)&FSTORE 14   0  1/3  REGWRITE-14
CVTSS2SD xmm,xmm                 ADD/WRITE vector  (FADD/FMUL)&FSTORE 7  0  1/2  REGWRITE-7
CVTSS2SD xmm,mem                 ADD/WRITE double  (FADD/FMUL)&FSTORE 7  0  1/2  REGWRITE-7
CVTSS2SI  reg32/reg64,xmm        ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTTSS2SI reg32/reg64,xmm        ADD/WRITE double  FADD&FSTORE 8   0   1/1  REGWRITE-8
CVTSS2SI  reg32/reg64,mem        ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTTSS2SI reg32/reg64,mem        ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTSS2SS xmm,xmm                 ADD/WRITE vector  (FADD/FMUL)&FSTORE 8  0  1/1  REGWRITE-8
CVTSS2SS xmm,mem                 ADD/WRITE vector  (FADD/FMUL)&FSTORE 8  2  1/1  REGWRITE-8

PEXTRW   reg32/reg64/mem,xmm/mm,imm  ADD/WRITE double FADD&FSTORE 6   0   1/1   REGWRITE-6


PFRCP    mm,mm           FMUL    single  FMUL       3    0    1/1   FMUL-3
PFRSQRT  mm,mm           FMUL    single  FMUL       3    0    1/1   FMUL-3

PMADDWD  xmm/mm,xmm/mm   FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULHUW  xmm/mm,xmm/mm   FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULHW   xmm/mm,xmm/mm   FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULLW   xmm/mm,xmm/mm   FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULUDQ  xmm/mm,xmm/mm   FMUL    single  FMUL       3    0    1/1   FMUL-3
PMULHRW  xmm/mm,xmm/mm   FMUL    single  FMUL       3    0    1/1   FMUL-3
PMADDWD  xmm/mm,mem      FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHUW  xmm/mm,mem      FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHW   xmm/mm,mem      FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULLW   xmm/mm,mem      FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULUDQ  xmm/mm,mem      FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHRW  xmm/mm,mem      FMUL    single  FMUL       3    2    1/1   FMUL-3
RCPPS    xmm,xmm         FMUL    single  FMUL       3    0    1/1   FMUL-3
RCPSS    xmm,xmm         FMUL    single  FMUL       3    0    1/1   FMUL-3
RSQRTPS  xmm,xmm         FMUL    single  FMUL       3    0    1/1   FMUL-3
RSQRTSS  xmm,xmm         FMUL    single  FMUL       3    0    1/1   FMUL-3
RCPPS    xmm,mem         FMUL    single  FMUL       3    2    1/1   FMUL-3
RCPSS    xmm,mem         FMUL    single  FMUL       3    2    1/1   FMUL-3
RSQRTPS  xmm,mem         FMUL    single  FMUL       3    2    1/1   FMUL-3
RSQRTSS  xmm,mem         FMUL    single  FMUL       3    2    1/1   FMUL-3

MULPD    xmm,xmm         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULPS    xmm,xmm         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULSD    xmm,xmm         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULSS    xmm,xmm         FMUL    single  FMUL       4    0    1/1   FMUL-4
MULPD    xmm,mem         FMUL    single  FMUL       4    2    1/1   FMUL-4
MULPS    xmm,mem         FMUL    single  FMUL       4    2    1/1   FMUL-4
MULSD    xmm,mem         FMUL    single  FMUL       4    2    1/1   FMUL-4
MULSS    xmm,mem         FMUL    single  FMUL       4    2    1/1   FMUL-4

PFMUL    mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4
PFRCPIT1 mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4
PFRCPIT2 mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4
PFRSQIT1 mm,mm           FMUL    single  FMUL       4    0    1/1   FMUL-4

DIVSS    xmm,xmm         FDIV    single  FMUL       16   0    1/13  FDIV-16
DIVPS    xmm,xmm         FDIV    single  FMUL       18   0    1/15  FDIV-18
DIVPD    xmm,xmm         FDIV    single  FMUL       20   0    1/17  FDIV-20
DIVSD    xmm,xmm         FDIV    single  FMUL       20   0    1/17  FDIV-20
SQRTSS   xmm,xmm         SQRT    single  FMUL       19   0    1/18  FSQRT-19
SQRTPS   xmm,xmm         SQRT    single  FMUL       21   0    1/18  FSQRT-21
SQRTPD   xmm,xmm         SQRT    single  FMUL       27    0    1/24  FSQRT-27
SQRTSD   xmm,xmm         SQRT    single  FMUL       27    0    1/24  FSQRT-27
DIVSS    xmm,mem         FDIV    single  FMUL       16   2    1/13  FDIV-16
DIVPS    xmm,mem         FDIV    single  FMUL       18   2    1/15  FDIV-18
DIVPD    xmm,mem         FDIV    single  FMUL       20   2    1/17  FDIV-20
DIVSD    xmm,mem         FDIV    single  FMUL       20   2    1/17  FDIV-20
SQRTSS   xmm,mem         SQRT    single  FMUL       19   2    1/18  FSQRT-19
SQRTPS   xmm,mem         SQRT    single  FMUL       21   2    1/18  FSQRT-21
SQRTPD   xmm,mem         SQRT    single  FMUL       27   2    1/24  FSQRT-27
SQRTSD   xmm,mem         SQRT    single  FMUL       27   2    1/24  FSQRT-27


FRSTOR   reg32/reg64/mem             RESTORE vector  NONE      133  0    1/133  SPECIAL
FSAVE    reg32/reg64/mem             SAVE    vector  NONE      162  0    1/162  SPECIAL
FXRSTOR  reg32/reg64/mem             RESTORE vector  NONE      89   0    1/89  SPECIAL
FXSAVE   reg32/reg64/mem             SAVE    vector  NONE      63   0    1/63  SPECIAL
*INSERTQ xmm,xmm         INSERT  vector  FSTORE     6   0    1/2   SPECIAL
*INSERTQ xmm,xmm,imm,imm INSERT  vector  FSTORE     6   0    1/2   SPECIAL
LDMXCSR  mem8/mem16/mem32/mem64             LOAD    vector  FSTORE    12   0    1/12  SPECIAL
MASKMOVDQU xmm,xmm       MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASKMOVDQU mem,xmm,xmm   MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASKMOVQ   mm,mm         MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASKMOVQ   mem,mm,mm     MOV     vector  FSTORE    99   0    1/99  SPECIAL

STMXCSR  none            STORE   vector  FSTORE    12   0    1/12  SPECIAL
STMXCSR  mem8/mem16/mem32/mem64            STORE   vector  FSTORE    12   0    1/12  SPECIAL

/* General Purpose Instructions */

/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency;*/
/*              +Memory Latency;Throughput;Category       */

/* Documentation & Agner Latency Tables assume data is ready in L1 cache for instrs with mem operands */
/* We have removed this assumption because in the model address generation and cache access is handeled */
/* separately and thus the latency here only represents the cycles incurred in an exuction unit only */
/* Latencies for vector-path instructions are left as is */


*ADC     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*ADC     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    1/1   STORE-4
*ADC     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

*ADD     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*ADD     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    1/1   STORE-4
*ADD     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

*AND     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*AND     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    1/1   STORE-4
*AND     reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

*BSF      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SCAN    vector  ALU        4    0    1/3   ALU-4 
*BSF      reg8/reg16/reg32/reg64,mem                            SCAN    vector  ALU        4    0    1/3   ALU-4 
*BSR      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SCAN    vector  ALU        4    0    1/3   ALU-4 
*BSR      reg8/reg16/reg32/reg64,mem                            SCAN    vector  ALU        4    0    1/3   ALU-4 

BSWAP    reg8/reg16/reg32/reg64             SWAP    single  ALU        1    0    1/1   ALU-1 

*BT      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    single  ALU        1    0    3/1   ALU-1 
*BT      mem8/mem16/mem32/mem64,imm         BCPY    single  ALU        1    0    3/1   ALU-1 
*BT      mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        7    0    1/2   ALU-7 

*BTC     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    double  ALU        2    0    3/1   ALU-2 
*BTC     mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        8    0    1/10   ALU-7 
*BTC     mem8/mem16/mem32/mem64,imm         BCPY    vector  ALU        9    0    2/3   ALU-7 

*BTR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    double  ALU        2    0    3/1   ALU-2 
*BTR     mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        8    0    1/7   ALU-7 
*BTR     mem8/mem16/mem32/mem64,imm         BCPY    vector  ALU        9    0    2/3   ALU-7 

*BTS     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     BCPY    double  ALU        2    0    3/1   ALU-2 
*BTS     mem,reg8/reg16/reg32/reg64         BCPY    vector  ALU        8    0    1/7   ALU-7 
*BTS     mem8/mem16/mem32/mem64,imm         BCPY    vector  ALU        9    0    2/3   ALU-7 

*CMP      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     CMP     single  ALU        1    0    3/1   ALU-1 
*CMP      mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     CMP     single  ALU        1    0    3/1   ALU-1 */
*CMP      reg8/reg16/reg32/reg64/mem,mem     	                CMP     single  ALU        1    0    2/1   ALU-1 
*CMPS     reg8/reg16/reg32/reg64/none                           CMP     vector  ALU       6    0    1/3   ALU-6 
*CMPSB    reg8/none                                             CMP     vector  ALU       6    0    1/3   ALU-6 
*CMPSW    reg16/none                                            CMP     vector  ALU       6    0    1/3   ALU-6 
*CMPSD    reg32/none                                            CMP     vector  ALU       6    0    1/3   ALU-6 
*CMPSQ    reg64/none                                            CMP     vector  ALU       6    0    1/3   ALU-6 
*CMPXCHG reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64          CMP     vector  ALU        3    0    1/1   ALU-3 
*CMPXCHG mem8,reg8                                              CMP     vector  ALU        6    0    1/1   ALU-6 
*CMPXCHG mem16/mem32/mem64,reg16/reg32/reg64                    CMP     vector  ALU        5    0    1/1   ALU-5 
*CMPXCHG8B  mem64                                               CMP     vector  ALU       10   0    1/1   ALU-10
*CMPXCHG16B mem128                                              CMP     vector  ALU       11   0    1/1   ALU-11

*DEC      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*INC      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*NEG      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*DEC      mem8/mem16/mem32/mem64             ADD     single  ALU        1    0    1/2   ALU-1 
*INC      mem8/mem16/mem32/mem64             ADD     single  ALU        1    0    1/2   ALU-1 
*NEG      mem8/mem16/mem32/mem64             ADD     single  ALU        1    0    1/2   ALU-1 
*NOT      reg8/reg16/reg32/reg64             ADD     single  ALU        1    0    3/1   ALU-1 
*NOT      mem8/mem16/mem32/mem64             ADD     single  ALU        1    0    1/1   ALU-1 
*OR      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    3/1   ALU-1 
*OR      mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm     ADD     single  ALU        1    0    1/1   STORE-4
*OR      reg8/reg16/reg32/reg64,mem         ADD     single  ALU        1    0    2/1   ALU-1 

/* latency of RCL/RCR depends on whether imm is 1 or another value, we assume it's another value */
/* if the imm value is 1, then it's a single-path instr with latency 1 */
*RCL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64          ROT     vector  ALU        6    0    1/3   ALU-6 
*RCL     reg8/reg16/reg32/reg64,imm         ROT     vector  ALU        7    0    1/3   ALU-7 
*RCL     mem8/mem16/mem32/mem64,imm         ROT     vector  ALU        7    0    1/3   ALU-7 
*RCL     mem,reg8/reg16/reg32/reg64          ROT     vector  ALU        7    0    1/3   ALU-7 

*RCR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64          ROT     vector  ALU        6    0    1/3   ALU-6 
*RCR     reg8/reg16/reg32/reg64,imm         ROT     vector  ALU        5    0    1/3   ALU-5 
*RCR     mem8/mem16/mem32/mem64,imm         ROT     vector  ALU        5    0    1/3   ALU-5
*RCR     mem,reg8/reg16/reg32/reg64         ROT     vector  ALU        5    0    1/3   ALU-5 

*ROL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*ROR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*ROL     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    1/1   ALU-1 
*ROR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    1/1   ALU-1 
*SAL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SAL     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    1/1   ALU-1 
*SAR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SAR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    1/1   ALU-1 
*SHR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SHR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    1/1   ALU-1 
*SHL     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    3/1   ALU-1 
*SHL     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ROT     single  ALU        1    0    1/1   ALU-1 
*SBB     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ADD     single  ALU       1    0    3/1   ALU-1 
*SBB     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ADD     single  ALU       1    0    1/1   STORE-4
*SBB     reg8/reg16/reg32/reg64,mem                           ADD     single  ALU        1    0    2/1   ALU-1 
*SUB     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ADD     single  ALU        1    0    3/1   ALU-1 
*SUB     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ADD     single  ALU        1    0    1/1   STORE-4
*SUB     reg8/reg16/reg32/reg64,mem                           ADD     single  ALU        1    0    2/1   ALU-1 
*TEST    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm	  AND     single  ALU        1    0    3/1   ALU-1 
*TEST    reg8/reg16/reg32/reg64,mem 	                       AND     single  ALU        1    0    2/1   ALU-1 
*TEST    mem8/mem16/mem32/mem64,reg/imm 	                    AND     single  ALU        1    0    1/1   ALU-1 
*XOR     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm    ADD     single  ALU        1    0    3/1   ALU-1 
*XOR     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm    ADD     single  ALU        1    0    1/1   STORE-4
*XOR     reg8/reg16/reg32/reg64,mem                           ADD     single  ALU        1    0    2/1   ALU-1 
CBW      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CWDE     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CDQE     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CWD      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CDQ      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CQO      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CNVT    single  ALU       1    0    3/1   ALU-1
CLC      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CLRF    single  ALU       1    0    3/1   ALU-1
CLD      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CLRF    single  ALU       1    0    3/1   ALU-1
CMC      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CLRF    single  ALU       1    0    3/1   ALU-1

CBW      none         CNVT    single  ALU       1    0    3/1   ALU-1
CWDE     none         CNVT    single  ALU       1    0    3/1   ALU-1
CDQE     none         CNVT    single  ALU       1    0    3/1   ALU-1
CWD      none         CNVT    single  ALU       1    0    3/1   ALU-1
CDQ      none         CNVT    single  ALU       1    0    3/1   ALU-1
CQO      none         CNVT    single  ALU       1    0    3/1   ALU-1
CLC      none         CLRF    single  ALU       1    0    3/1   ALU-1
CLD      none         CLRF    single  ALU       1    0    3/1   ALU-1
CMC      none         CLRF    single  ALU       1    0    3/1   ALU-1


/*  The cc in CMOVcc/JCC is a condition code.  These are in the instruction manual,*/
CMOVCC   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         CMOV    single  ALU       1    0    3/1   ALU-1
CMOVCC   reg8/reg16/reg32/reg64,mem         CMOV    single  ALU       1    0    2/1   ALU-1
JCC      disp8/disp16/disp32/disp64/disp128 COND    single  ALU       1    0    1/1   ALU-1 
JCXZ     disp8/disp16/disp32/disp64/disp128 COND    double  ALU       2    0    1/1   ALU-2
JECXZ    disp8/disp16/disp32/disp64/disp128 COND    double  ALU       2    0    1/1   ALU-2
JRCXZ    disp8/disp16/disp32/disp64/disp128 COND    double  ALU       2    0    1/1   ALU-2

/* Waleed: far jumps have longer latencies but don't know how to put entry here */
JMP     disp8/disp16/disp32/disp64/disp128        JMP     single  ALU       1    0    1/1   ALU-1
JMP     reg8/reg16/reg32/reg64                    JMP     single  ALU       1    0    1/1   ALU-1
JMP     mem8/mem16/mem32/mem64/mem128             JMP     single  ALU       1    0    1/1   ALU-1
LAHF     none            LDF     vector  ALU        3    0    1/2   ALU-3
/*  Mem addresses with a base and an index only have latency 1; mem   */
/*  addresses that have a base, index, and scale have a latency of 2. */
/* Waleed: LEA does not actually perform a load, it only computes Eff. Address */
/* Waleed: change source operand to reg */
LEA      reg32/reg64,reg                          LOAD    single  AGU       2    0    3/1   LOAD-1
LEA      reg16,reg                                LOAD    vector  AGU       3    0    1/1   LOAD-3
LEAVE    reg8/reg16/reg32/reg64,mem               STACK   double  ALU        3    0    1/3   SPECIAL
LEAVE    none                                     STACK   double  ALU        3    0    1/3   SPECIAL
LEAVE    reg8/reg16/reg32/reg64                   STACK   double  ALU        3    0    1/3   SPECIAL

LODS     reg,mem8/mem16/mem32/mem64               LOADS   vector  ALU       5    0    1/2   LOAD-5
LODSB    reg,mem8                                 LOADS   vector  ALU       5    0    1/2   LOAD-5
LODSW    reg,mem16                                LOADS   vector  ALU       5    0    1/2   LOAD-5
LODSD    reg,mem32                                LOADS   vector  ALU       4    0    1/2   LOAD-4
LODSQ    reg,mem64                                LOADS   vector  ALU       5    0    1/2   LOAD-5

*LOOPCC  disp64                                                    COND    vector  ALU       7    0    1/1   ALU-7 
*LOOPCC  disp32                                                    COND    vector  ALU       8    0    1/1   ALU-8 
*LZCNT   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/mem         CNT     single  ALU2      2    0    1/1   ALU-2 


*MOV     reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm         MOV     single  ALU       1    0    3/1   ALU-1
*MOV     mem8/mem16/mem32/mem64,reg8/reg16/reg32/reg64/imm         MOV     single  ALU       1    0    2/1   ALU-1
*MOV     reg8/reg16,mem                                            MOV     single  ALU       2    0    2/1   ALU-1
*MOV     reg32/reg64,mem                                           MOV     single  ALU       1    0    2/1   ALU-1

*MOVSX    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64            MOV     single  ALU       1    0    3/1   ALU-1
*MOVZX    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64            MOV     single  ALU       1    0    3/1   ALU-1
*MOVSX    reg8/reg16/reg32/reg64,mem                               MOV     single  ALU       2    0    2/1   ALU-1
*MOVZX    reg8/reg16/reg32/reg64,mem                               MOV     single  ALU       2    0    2/1   ALU-1
*MOVSXD   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64            MOV     single  ALU       1    0    3/1   ALU-1
*MOVSXD   reg8/reg16/reg32/reg64,mem                               MOV     single  ALU       2    0    2/1   ALU-1

SAHF     none            FLAGS   single  ALU       1    0    3/1   ALU-1
/* The cc in SET is a condition code.  These are in the */
/* instruction manual, 24594.pdf page 225. */
*SETCC    reg8/reg16/reg32/reg64             SETF    single  ALU       1    0    3/1   ALU-1
*SETCC    mem8/mem16/mem32/mem64             SETF    single  ALU       1    0    2/1   ALU-1
*SHLD    mem/reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,imm                         SHIFT   vector  ALU        4    0    1/2   ALU-4 
*SHLD    mem/reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64      SHIFT   vector  ALU        4    0    1/3   ALU-4 
*SHLD    mem8/mem16/mem32/mem64,imm                                                    SHIFT   vector  ALU        4    0    1/6   ALU-4 
*SHRD    mem8/mem16/mem32/mem64,imm                                                    SHIFT   single  ALU        1    0    1/1   ALU-1 
*SHRD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm                             SHIFT   single  ALU        1    0    1/1   ALU-1
*SHRD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm      SHIFT   vector  ALU        4    0    1/3   ALU-4 
*SHRD    mem,reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/imm                         SHIFT   vector  ALU        4    0    1/6   ALU-4 
STC      none                                SETF    single  ALU       1    0    3/1   ALU-1
STD      none                                SETF    double  ALU       2    0    3/2   ALU-2

*POPCNT   reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64/mem         POP     single  ALU2      2    3    1/1   ALU-2 

*XADD    reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         ADD     vector  ALU       2    0    1/1   ALU-2 
*XADD    mem,reg8/reg16/reg32/reg64                            ADD     vector  ALU       5    0    1/1   STORE-5


*XCHG    reg8,reg8                                             XCHG    vector  ALU       2    0    1/1   ALU-2
*XCHG    reg16/reg32/reg64,reg16/reg32/reg64                   XCHG    double  ALU       1    0    1/1   ALU-2
*XCHG    reg8,mem                                              XCHG    vector  ALU       16   0    1/1   ALU-2
*XCHG    reg16,mem                                             XCHG    double  ALU       16   0    1/1   ALU-2
*XCHG    reg32/reg64,mem                                       XCHG    double  ALU       15   0    1/1   ALU-2
*XCHG    mem8,reg8                                             XCHG    vector  ALU       16   0    1/1   STORE-16
*XCHG    mem16,reg16                                           XCHG    double  ALU       16   0    1/1   STORE-16
*XCHG    mem32/mem64,reg32/reg64                               XCHG    double  ALU       15   0    1/1   STORE-15

*IMUL    reg8/mem8                                             MUL     single  ALU0       3    0    1/1   ALU-3 
*IMUL    reg16/mem16                                           MUL     vector  ALU0       4    0    1/2   ALU-3 
*IMUL    reg32/mem32                                           MUL     double  ALU0       3    0    1/1   ALU-3 
*IMUL    reg64/mem64                                           MUL     double  ALU0       5    0    1/2   ALU-3 
*IMUL    reg16/reg32,reg16/reg32                               MUL     single  ALU0       3    0    1/3   ALU-3 
*IMUL    reg16/reg32,mem16/mem32                               MUL     single  ALU0       3    0    1/3   ALU-3 
*IMUL    reg64,reg64/mem64                                     MUL     single  ALU0       4    0    1/2   ALU-3 
*IMUL    reg16,reg16,imm                                       MUL     vector  ALU0       4    0    1/1   ALU-4 
*IMUL    reg32,reg32,imm                                       MUL     single  ALU0       3    0    1/1   ALU-4 
*IMUL    reg64,reg64,imm                                       MUL     single  ALU0       4    0    1/1   ALU-4 
*IMUL    reg8/reg16/reg32,mem8/mem16/mem32,imm                 MUL     vector  ALU0       4    0    1/2   ALU-4 
*IMUL    reg64,mem64,imm                                       MUL     vector  ALU0       5    0    1/2   ALU-4 
*MUL     reg8/mem8                                             MUL     single  ALU0       3    0      1/1   ALU-3 
*MUL     reg16/mem16                                           MUL     vector  ALU0       4    0    1/2   ALU-3 
*MUL     reg32/mem32                                           MUL     double  ALU0       3    0    1/1   ALU-3 
*MUL     reg64/mem64                                           MUL     double  ALU0       5    0    1/2   ALU-3 

*PUSH    mem8/mem16/mem32/mem64             STACK   double  ALU        3    0    1/1   ALU-3 
*PUSH    reg8/reg16/reg32/reg64/imm         STACK   double  ALU        3    0    2/1   ALU-3
PUSHA    mem16,reg16                        STACK   vector  ALU       6    0    1/6   ALU-6
PUSHAD   mem32,reg32                        STACK   vector  ALU       6    0    1/6   ALU-6
PUSHF    mem16,reg                          STACK   vector  ALU       3   0    1/3  ALU  
PUSHFD   mem32,reg                          STACK   vector  ALU       3   0    1/3  ALU  
PUSHFQ   mem64,reg                          STACK   vector  ALU       3   0    1/3  ALU  
*POP     mem8/mem16/mem32/mem64             STACK   vector  ALU        3    0    1/1   ALU-3 
*POP     reg32/reg64                        STACK   single  ALU        3    0    2/1   ALU-3
*POP     SS                                 STACK   vector  ALU        26   0    1/16   ALU-26
*POP     reg16                              STACK   double  ALU        4    0    1/1   ALU-4
*POP     DS/ES/FS/GS                        STACK   vector  ALU        10   0    1/8   ALU-10
POPA     reg16,mem16                        STACK   vector  ALU       6    0    1/6   ALU-6
POPAD    reg32,mem32                        STACK   vector  ALU       6    0    1/6   ALU-6
POPF     reg16,mem                          STACK   vector  ALU       16   0    1/11   ALU-15
POPFD    reg32,mem                          STACK   vector  ALU       16   0    1/11   ALU-15
POPFQ    reg64,mem                          STACK   vector  ALU       16   0    1/11   ALU-15


/* Waleed: far calls take much longer, but don't know how to enter that */
*CALL    disp8/disp16/disp32/disp64/disp128        STACK   double  ALU        3    0    1/2   ALU-3
*CALL    reg8/reg16/reg32/reg64                    STACK   double  ALU        3    0    1/3   ALU-3
*CALL    mem8/mem16/mem32/mem64                    STACK   vector  ALU        4    0    1/3   ALU-3

/* Waleed: also near and far have different latencies? */
*RET     none                                      STACK   single  ALU       4    0    1/3   ALU-4
*RET     imm                                       STACK   double  ALU       4    0    1/3   ALU-4

SCAS     none/reg8/reg16/reg32/reg64          	   CMP     vector  ALU       4    0    1/2   ALU-4
SCASB    none/reg8                                 CMP     vector  ALU       4    0    1/2   ALU-4
SCASW    none/reg16                                CMP     vector  ALU       4    0    1/2   ALU-4
SCASD    none/reg32                                CMP     vector  ALU       4    0    1/2   ALU-4
SCASQ    none/reg64                                CMP     vector  ALU       4    0    1/2   ALU-4

XLAT     none            CPY     vector  ALU       5    0    1/5   ALU-5
XLATB    none            CPY     vector  ALU       5    0    1/5   ALU-5

BOUND    reg8/reg16/reg32/reg64,mem         ADD     vector  ALU       6    0    1/2   ALU-6 




/* Waleed: Some DIV's have ranges so I'm picking upper bound of range */
*DIV      reg8/mem8        DIV     vector  ALU      17  0    1/17  ALU   
*DIV      reg16/mem16      DIV     vector  ALU      30  0    1/30  ALU   
*DIV      reg32/mem32      DIV     vector  ALU      46  0    1/46  ALU   
*DIV      reg64/mem64      DIV     vector  ALU      78  0    1/78  ALU   
*IDIV      reg8            DIV     vector  ALU      19  0    1/19  ALU   
*IDIV      mem8            DIV     vector  ALU      22  0    1/22  ALU   
*IDIV      reg16/mem16     DIV     vector  ALU      39  0    1/39  ALU   
*IDIV      reg32/mem32     DIV     vector  ALU      55  0    1/55  ALU   
*IDIV      reg64/mem64     DIV     vector  ALU      87  0    1/87  ALU   

STOS     mem8/mem16/mem32/mem64,reg STS     vector  ALU       4    0    1/2   STORE-4
STOSB    mem8,reg                   STS     vector  ALU       4    0    1/2   STORE-4
STOSW    mem16,reg                  STS     vector  ALU       4    0    1/2   STORE-4
STOSD    mem32,reg                  STS     vector  ALU       4    0    1/2   STORE-4
STOSQ    mem64,reg                  STS     vector  ALU       4    0    1/2   STORE-4
STOS     none                       STS     vector  ALU       4    0    1/2   STORE-4
STOSB    none                       STS     vector  ALU       4    0    1/2   STORE-4
STOSW    none                       STS     vector  ALU       4    0    1/2   STORE-4
STOSD    none                       STS     vector  ALU       4    0    1/2   STORE-4
STOSQ    none                       STS     vector  ALU       4    0    1/2   STORE-4


MOVS     none/mem8/mem16/mem32/mem64   MOV     vector  ALU       5    0    1/3   STORE-5
MOVSB    none/mem8                     MOV     vector  ALU       5    0    1/3   STORE-5
MOVSW    none/mem16                    MOV     vector  ALU       5    0    1/3   STORE-5
MOVSD    none/mem32                    MOV     vector  ALU       5    0    1/3   STORE-5
MOVSQ    none/mem64                    MOV     vector  ALU       5    0    1/3   STORE-5

/* The MOVNTI instruction's latency is variable. It uses the processor's */
/* write-combining resources. Should microbenchmark to determine latency.*/
MOVNTI   mem,reg8/reg16/reg32/reg64         MOV     single  ALU        99   0    1/1   STORE-X
	
*CPUID   fn0x0           SPEC    vector  ALU        41   0    1/1   SPECIAL
*CPUID   fn0x1           SPEC    vector  ALU        127  0    1/1   SPECIAL
*CPUID   fn0x2           SPEC    vector  ALU        37   0    1/1   SPECIAL
*CPUID   none            SPEC    vector  ALU        164   0    1/1   SPECIAL

DAA      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SPEC    vector  ALU        7    0    1/7   SPECIAL
DAS      reg8/reg16/reg32/reg64,reg8/reg16/reg32/reg64         SPEC    vector  ALU        7    0    1/7   SPECIAL

*ENTER   imm32,imm         STACK   vector  ALU        19   0    1/19   SPECIAL
/* Waleed: fixed NOPs, they go to ALU and single path decode */
NOP      none            SPEC    single    ALU       1    0    3/1   SPECIAL
NOP      reg8/reg16/reg32/reg64/mem8/mem16/mem32/mem64            SPEC    single    ALU       1    0    3/1   SPECIAL
NOP      mem,reg8/reg16/reg32/reg64                               SPEC    single    ALU       1    0    3/1   SPECIAL
NOP      reg8/reg16/reg32/reg64,mem                               SPEC    single    ALU       1    0    3/1   SPECIAL

RDTSC    none            SPEC    none    none       1    0    1/67   SPECIAL
SYSCALL  none            SPEC    none    none       1    0    1/1   SPECIAL

/* Waleed: I created a section for x87 FP instructions which was not there before */
FABS	none/mem32/mem64/mem80/reg32/reg64/reg80		   FABS	single	FMUL	    2    0    1/2   SPECIAL
FADD	none/mem32/mem64/mem80/reg32/reg64/reg80		   ADD	single	FADD	    4    0    1/1   SPECIAL
FADDP	none/mem32/mem64/mem80/reg32/reg64/reg80		   ADD	single	FADD	    4    0    1/1   SPECIAL
FADDR	none/mem32/mem64/mem80/reg32/reg64/reg80		   ADD	single	FADD	    4    0    1/1   SPECIAL
FADDRP none/mem32/mem64/mem80/reg32/reg64/reg80	      ADD	single	FADD	    4    0    1/1   SPECIAL
FBLD	none/mem32/mem64/mem80/reg32/reg64/reg80	      ADD	vector	FADD/FMUL/FSTORE	    94    0    1/30   SPECIAL
FBSTP	none/mem32/mem64/mem80/reg32/reg64/reg80	      ADD	vector	(FADD/FMUL)&FSTORE	             167    0    1/163   SPECIAL
FCHS	none/mem32/mem64/mem80/reg32/reg64/reg80		   FABS	single	FMUL	    2    0    1/2   SPECIAL
FCMOVcc	none/mem32/mem64/mem80/reg32/reg64/reg80	   MOV	vector	FADD/FMUL/FSTORE	    15    0    1/4   SPECIAL
FCOM	none/mem32/mem64/mem80/reg32/reg64/reg80		   FCOM	single	FADD	    2    0    1/1   SPECIAL
FCOMP	none/mem32/mem64/mem80/reg32/reg64/reg80		   FCOM	single	FADD	    2    0    1/1   SPECIAL
FCOMPP	none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	single	FADD	    2    0    1/1   SPECIAL
FUCOM	none/mem32/mem64/mem80/reg32/reg64/reg80		   FCOM	single	FADD	    2    0    1/1   SPECIAL
FUCOMP	none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	single	FADD	    2    0    1/1   SPECIAL
FUCOMPP	none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	single	FADD	    2    0    1/1   SPECIAL
FCOMI	none/mem32/mem64/mem80/reg32/reg64/reg80		   FCOM	vector	FADD	    3    0    1/1   SPECIAL
FCOMIP	none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	vector	FADD	    3    0    1/1   SPECIAL
FUCOMI	none/mem32/mem64/mem80/reg32/reg64/reg80	   FCOM	vector	FADD	    3    0    1/1   SPECIAL
FUCOMIP	none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	vector	FADD	    3    0    1/1   SPECIAL
FICOM	   none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	double	FADD&FSTORE	    9    0    1/1   SPECIAL
FICOMP	none/mem32/mem64/mem80/reg32/reg64/reg80		FCOM	double	FADD&FSTORE	    9    0    1/1   SPECIAL
FCOS	   none/mem32/mem64/mem80/reg32/reg64/reg80		FSIN	vector	FADD/FMUL	    93    0    1/90   SPECIAL
FDECSTP   none/mem32/mem64/mem80/reg32/reg64/reg80		MOV	single	FADD/FMUL/FSTORE    2    0    1/1   SPECIAL
FDIV	none/mem32/mem64/mem80/reg32/reg64/reg80		   FDIV	single	FMUL	    16    0    1/24   SPECIAL
FDIVP	none/mem32/mem64/mem80/reg32/reg64/reg80		   FDIV	single	FMUL	    16    0    1/24   SPECIAL
FDIVR	none/mem32/mem64/mem80/reg32/reg64/reg80		   FDIV	single	FMUL	    20    0    1/24   SPECIAL
FDIVRP	none/mem32/mem64/mem80/reg32/reg64/reg80		FDIV	single	FMUL	    24    0    1/24   SPECIAL
FFREE	none/mem32/mem64/mem80/reg32/reg64/reg80		   SPEC	single	FADD/FMUL/FSTORE	    2    0    1/1   SPECIAL
FIADD	none/mem32/mem64/mem80/reg32/reg64/reg80		   ADD	double	FADD&FSTORE	    11    0    1/4   SPECIAL
FIDIV	none/mem32/mem64/mem80/reg32/reg64/reg80		   FDIV	double	FADD&FSTORE	    31    0    1/24   SPECIAL
FIDIVR	none/mem32/mem64/mem80/reg32/reg64/reg80		FDIV	double	FADD&FSTORE	    31    0    1/24   SPECIAL
FILD	none/mem32/mem64/mem80/reg32/reg64/reg80  		LOAD	single	FSTORE	    6     0    1/1   SPECIAL
FIMUL	none/mem32/mem64/mem80/reg32/reg64/reg80  		FMUL	double	FADD&FSTORE	    11    0    1/4   SPECIAL
FINCSTP   none/mem32/mem64/mem80/reg32/reg64/reg80		MOV	single	FADD/FMUL/FSTORE    2    0    1/1   SPECIAL
FIST	none/mem32/mem64/mem80/reg32/reg64/reg80  		STORE	single	FSTORE	    4     0    1/1   SPECIAL
FISTP	none/mem32/mem64/mem80/reg32/reg64/reg80  		STORE	single	FSTORE	    4     0    1/1   SPECIAL
FISTTP none/mem32/mem64/mem80/reg32/reg64/reg80  		STORE	single	FSTORE	    4     0    1/1   SPECIAL
FISUB	none/mem32/mem64/mem80/reg32/reg64/reg80		   ADD	double	FADD&FSTORE	    11    0    1/4   SPECIAL
FISUBR	none/mem32/mem64/mem80/reg32/reg64/reg80		ADD	double	FADD&FSTORE	    11    0    1/4   SPECIAL
FLD	none/mem32/mem64/reg32/reg64/reg80  		      LOAD	single	FADD/FMUL/FSTORE	    2     0    2/1   SPECIAL
FLD	mem80  		                                    LOAD	vector	FADD/FMUL	    13     0    1/13   SPECIAL
FLD1	none/mem32/mem64/mem80/reg32/reg64/reg80        LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDL2E	none/mem32/mem64/mem80/reg32/reg64/reg80     LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDL2T	none/mem32/mem64/mem80/reg32/reg64/reg80     LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDLG2	none/mem32/mem64/mem80/reg32/reg64/reg80     LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDLN2	none/mem32/mem64/reg32/reg64/reg80        	LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDPI	none/mem32/mem64/mem80/reg32/reg64/reg80        LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDZ	none/mem32/mem64/mem80/reg32/reg64/reg80        LOAD	single	FSTORE	    4    0    1/1   SPECIAL
FLDCW	none/mem32/mem64/mem80/reg32/reg64/reg80		   LOAD	vector	(FADD/FMUL)&FSTORE	    14	 0    1/14   SPECIAL		    
FLDENV	none/mem32/mem64/mem80/reg32/reg64/reg80		LOAD	vector	(FADD/FMUL)&FSTORE	    116	 0    1/116   SPECIAL		    
FMUL	none/mem32/mem64/mem80/reg32/reg64/reg80		   FMUL	single	FMUL	    4    0    1/1   SPECIAL
FMULP	none/mem32/mem64/mem80/reg32/reg64/reg80		   FMUL	single	FMUL	    4    0    1/1   SPECIAL
FNCLEX	none/mem32/mem64/mem80/reg32/reg64/reg80		SPEC	vector	FSTORE	    17	 0    1/28   SPECIAL		    
FNINIT	none/mem32/mem64/mem80/reg32/reg64/reg80		SPEC	vector	FSTORE	    92	 0    1/103   SPECIAL		    
FNOP	none/mem32/mem64/mem80/reg32/reg64/reg80        LOAD	single	FADD/FMUL/FSTORE	    2    0    3/1   SPECIAL
FNSAVE	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    162    0    1/149   SPECIAL
FNSTCW	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    2    0    1/1   SPECIAL
FNSTENV	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	(FADD/FMUL)&FSTORE	    76    0    1/76   SPECIAL
FNSTSW	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    9    0    1/9   SPECIAL
FPATAN	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    151    0    1/151   SPECIAL
FPREM	none/mem32/mem64/mem80/reg32/reg64/reg80  		FPREM	single	FMUL	    40    0    1/7   SPECIAL
FPREM1	none/mem32/mem64/mem80/reg32/reg64/reg80  	FPREM	single	FMUL	    40    0    1/7   SPECIAL
FPTAN	none/mem32/mem64/mem80/reg32/reg64/reg80        SPEC	vector	FADD/FMUL/FSTORE	    109    0    1/109   SPECIAL
FRNDINT	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    10    0    1/37   SPECIAL
FRSTOR	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    133    0    1/149   SPECIAL
FSCALE	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    9    0    1/29   SPECIAL
FSIN	none/mem32/mem64/mem80/reg32/reg64/reg80		   FSIN	vector	FADD/FMUL	    93    0    1/51   SPECIAL
FSINCOS	none/mem32/mem64/mem80/reg32/reg64/reg80		FSIN	vector	FADD/FMUL	    125    0    1/125   SPECIAL
FSQRT 	none/mem32/mem64/mem80/reg32/reg64/reg80		FSIN	single	FMUL     	    35    0    1/35   SPECIAL
FST	none/mem32/mem64/reg32/mem80/reg64/reg80	      STORE	single	FADD/FMUL/FSTORE	    2     0    2/1   SPECIAL
FSTP	none/mem32/mem64/reg32/reg64/reg80  		      STORE	single	FADD/FMUL/FSTORE	    2     0    2/1   SPECIAL
FSTP	mem80  		                                    STORE	vector	FADD/FMUL	    8     0    1/7   SPECIAL
FSTSW	none/mem32/mem64/mem80/reg32/reg64/reg80  		STORE	vector	(FADD/FMUL)&FSTORE	    14    0    1/14   SPECIAL
FSUB	none/mem32/mem64/mem80/reg32/reg64/reg80  		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBP	none/mem32/mem64/mem80/reg32/reg64/reg80  		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBR	none/mem32/mem64/mem80/reg32/reg64/reg80  		ADD	single	FADD	    4    0    1/1   SPECIAL
FSUBRP	none/mem32/mem64/mem80/reg32/reg64/reg80 		ADD	single	FADD	    4    0    1/1   SPECIAL
FTST	none/mem32/mem64/mem80/reg32/reg64/reg80		   FTST	single	FADD	    2    0    1/1   SPECIAL
FWAIT	none/mem32/mem64/mem80/reg32/reg64/reg80		   WAIT	single	FADD/FMUL/FSTORE	    1    0    1/1   SPECIAL
FXAM	none/mem32/mem64/mem80/reg32/reg64/reg80		   FTST	vector	FSTORE&ALU	    2    0    1/1   SPECIAL
FXCH	none/mem32/mem64/mem80/reg32/reg64/reg80        MOV	single	FADD/FMUL/FSTORE	    2    0    3/1   SPECIAL
FXCH	reg8/reg16                 		               MOV	single	FADD/FMUL/FSTORE	    2    0    3/1   SPECIAL
FXRSTOR	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    89   0    1/89   SPECIAL
FXSAVE	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    63   0    1/58   SPECIAL
FXTRACT	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    9   0    1/41   SPECIAL
FYL2X	none/mem32/mem64/mem80/reg32/reg64/reg80        SPEC	vector	FADD/FMUL/FSTORE	    13   0    1/30   SPECIAL
FYL2XP1	none/mem32/mem64/mem80/reg32/reg64/reg80     SPEC	vector	FADD/FMUL/FSTORE	    114   0    1/44   SPECIAL

/* When processing measured benchmark instruction mixes, some instructions that appear in the mix do not exist */
/*   in the instruction table (above). They either do not appear at all or have different operands. */
/*	So, whenever I find a missing instruction, I add it here. */

MFENCE	none		MFENCE	vector	none	    33	 0    1/33   SPECIAL		    
SFENCE	none		MFENCE	vector	none	    33	 0    1/33   SPECIAL		    
EMMS	none		EMMS	vector	FADD/FMUL/FSTORE	    1	 0    3/1   SPECIAL		    

PREFETCHT0	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHT1	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHT2	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHTA	mem8/mem16/mem32/mem64		PREFETCH	single	ALU	    1     0    1/1   SPECIAL
PREFETCHNTA	mem8/mem16/mem32/mem64/mem512		PREFETCH	single	ALU	    1     0    1/1   SPECIAL



