# -*- coding: utf-8 -*-

from sst_unittest import *
from sst_unittest_support import *


class testcase_cassini_prefetch(SSTTestCase):

    def setUp(self):
        super(type(self), self).setUp()
        # Put test based setup code here. it is called once before every test

    def tearDown(self):
        # Put test based teardown code here. it is called once after every test
        super(type(self), self).tearDown()

#####

    @unittest.skipIf(testing_check_get_num_threads() > 3, "cassini_prefetch: test_cassini_prefetch_none skipped if threads > 3")
    def test_cassini_prefetch_none(self):
        self.cassini_prefetch_test_template("nopf")

    @unittest.skipIf(testing_check_get_num_threads() > 3, "cassini_prefetch: test_cassini_prefetch_stride skipped if threads > 3")
    def test_cassini_prefetch_stride(self):
        self.cassini_prefetch_test_template("sp")

    @unittest.skipIf(testing_check_get_num_threads() > 3, "cassini_prefetch: test_cassini_prefetch_nextblock skipped if threads > 3")
    def test_cassini_prefetch_nextblock(self):
        self.cassini_prefetch_test_template("nbp")

#####

    def cassini_prefetch_test_template(self, testcase, testtimeout=180):
        # Get the path to the test files
        test_path = self.get_testsuite_dir()
        outdir = self.get_test_output_run_dir()
        tmpdir = self.get_test_output_tmp_dir()

        # Set the various file paths
        testDataFileName="test_cassini_prefetch_{0}".format(testcase)

        sdlfile = "{0}/streamcpu-{1}.py".format(test_path, testcase)
        reffile = "{0}/refFiles/{1}.out".format(test_path, testDataFileName)
        outfile = "{0}/{1}.out".format(outdir, testDataFileName)
        errfile = "{0}/{1}.err".format(outdir, testDataFileName)
        mpioutfiles = "{0}/{1}.testfile".format(outdir, testDataFileName)

        self.run_sst(sdlfile, outfile, errfile, mpi_out_files=mpioutfiles, timeout_sec=testtimeout)

        # This is generated by SST when the number of ranks/threads > # of components
        ignore_lines = ["WARNING: No components are assigned to"]
        #These are warnings/info generated by SST/memH in debug mode
        ignore_lines.append("Notice: memory controller's region is larger than the backend's mem_size")
        ignore_lines.append("Region: start=")
        
        filesAreTheSame, statDiffs, othDiffs = testing_stat_output_diff(outfile, reffile, ignore_lines, {}, True)

        # Perform the tests
        if os_test_file(errfile, "-s"):
            log_testing_note("cassini_prefetch test {0} has a Non-Empty Error File {1}".format(testDataFileName, errfile))

        if filesAreTheSame:
            log_debug(" -- Output file {0} passed check against the Reference File {1}".format(outfile, reffile))
        else:
            diffdata = self._prettyPrintDiffs(statDiffs, othDiffs)
            log_failure(diffdata)
            self.assertTrue(filesAreTheSame, "Output file {0} does not pass check against the Reference File {1} ".format(outfile, reffile))

    def _prettyPrintDiffs(self, stat_diff, oth_diff):
        out = ""
        if len(stat_diff) != 0:
            out = "Statistic diffs:\n"
            for x in stat_diff:
                out += (x[0] + " " + ",".join(str(y) for y in x[1:]) + "\n")
        
        if len(oth_diff) != 0:
            out += "Non-statistic diffs:\n"
            for x in oth_diff:
                out += x[0] + " " + x[1] + "\n"

        return out
