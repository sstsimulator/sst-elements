diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/alpha/faults.cc src/arch/alpha/faults.cc
--- /home/mjleven/tmp/m5/src/arch/alpha/faults.cc	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/alpha/faults.cc	2011-07-26 11:20:19.000000000 -0600
@@ -201,7 +201,8 @@
         success = p->pTable->lookup(vaddr, entry);
     }
     if (!success) {
-        panic("Tried to access unmapped address %#x.\n", (Addr)vaddr);
+        panic("PC %#lx: Tried to access unmapped address %#x.\n", tc->readPC(),
+                                    (Addr)vaddr);
     } else {
         tc->getDTBPtr()->insert(vaddr.page(), entry);
     }
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/alpha/linux/linux.cc src/arch/alpha/linux/linux.cc
--- /home/mjleven/tmp/m5/src/arch/alpha/linux/linux.cc	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/alpha/linux/linux.cc	2011-04-22 10:37:05.000000000 -0600
@@ -61,6 +61,7 @@
   { AlphaLinux::TGT_O_EXCL,     O_EXCL },
   { AlphaLinux::TGT_O_NONBLOCK, O_NONBLOCK },
   { AlphaLinux::TGT_O_NOCTTY,   O_NOCTTY },
+  { AlphaLinux::TGT_O_DRD,   O_DIRECTORY },
 #ifdef O_SYNC
   { AlphaLinux::TGT_O_SYNC,     O_SYNC },
 #endif
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/alpha/linux/linux.hh src/arch/alpha/linux/linux.hh
--- /home/mjleven/tmp/m5/src/arch/alpha/linux/linux.hh	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/alpha/linux/linux.hh	2011-08-16 15:12:32.000000000 -0600
@@ -105,6 +105,7 @@
     static const unsigned TIOCISATTY_ = 0x2000745e;
     static const unsigned TIOCGETS_   = 0x402c7413;
     static const unsigned TIOCGETA_   = 0x40127417;
+	static const unsigned TCGETS_     = 0x403c7413;
     //@}
 
     /// For table().
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/alpha/linux/process.cc src/arch/alpha/linux/process.cc
--- /home/mjleven/tmp/m5/src/arch/alpha/linux/process.cc	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/alpha/linux/process.cc	2011-08-16 13:05:22.000000000 -0600
@@ -563,7 +563,10 @@
     /* 438 */ SyscallDesc("waitid", unimplementedFunc),
     /* 439 */ SyscallDesc("add_key", unimplementedFunc),
     /* 440 */ SyscallDesc("request_key", unimplementedFunc),
-    /* 441 */ SyscallDesc("keyctl", unimplementedFunc)
+    /* 441 */ SyscallDesc("keyctl", unimplementedFunc),
+    /* 442 */ SyscallDesc("virt2phys", virt2physFunc),
+    /* 443 */ SyscallDesc("mmap_dev", mmap_devFunc),
+    /* 443 */ SyscallDesc("fdmap", fdmapFunc)
 };
 
 AlphaLinuxProcess::AlphaLinuxProcess(LiveProcessParams * params,
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/alpha/tlb.cc src/arch/alpha/tlb.cc
--- /home/mjleven/tmp/m5/src/arch/alpha/tlb.cc	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/alpha/tlb.cc	2011-09-01 12:50:20.000000000 -0600
@@ -233,6 +233,12 @@
             return new UnimpFault("CPU trying to fetch from noncacheabled I/O");
 
     }
+#if 1 
+    if ( req->getPaddr() < 0x10000 ) {
+	    //DPRINTFN("TLB::%s() don't cache %#lx\n",__func__,req->getPaddr());
+        req->setFlags(Request::UNCACHEABLE);
+    }
+#endif
     return NoFault;
 }
 
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/alpha/tru64/tru64.hh src/arch/alpha/tru64/tru64.hh
--- /home/mjleven/tmp/m5/src/arch/alpha/tru64/tru64.hh	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/alpha/tru64/tru64.hh	2011-08-10 12:15:34.000000000 -0600
@@ -99,6 +99,7 @@
     static const unsigned TIOCISATTY_ = 0x2000745e;
     static const unsigned TIOCGETS_   = 0x402c7413;
     static const unsigned TIOCGETA_   = 0x40127417;
+    static const unsigned TCGETS_   = -1;
     //@}
 
     //@{
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/sparc/linux/syscalls.cc src/arch/sparc/linux/syscalls.cc
--- /home/mjleven/tmp/m5/src/arch/sparc/linux/syscalls.cc	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/sparc/linux/syscalls.cc	2011-08-10 13:02:21.000000000 -0600
@@ -677,7 +677,9 @@
     /* 280 */ SyscallDesc("sys_setaltroot", unimplementedFunc),
     /* 281 */ SyscallDesc("add_key", unimplementedFunc),
     /* 282 */ SyscallDesc("request_key", unimplementedFunc),
-    /* 283 */ SyscallDesc("keyctl", unimplementedFunc)
+    /* 283 */ SyscallDesc("keyctl", unimplementedFunc),
+	/* 284 */ SyscallDesc("virt2phys", virt2physFunc),
+    /* 285 */ SyscallDesc("mmap_dev", mmap_devFunc)
 };
 
 const int SparcLinuxProcess::Num_Syscall_Descs =
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/sparc/tlb.cc src/arch/sparc/tlb.cc
--- /home/mjleven/tmp/m5/src/arch/sparc/tlb.cc	2010-10-20 13:51:48.000000000 -0600
+++ src/arch/sparc/tlb.cc	2011-08-10 15:15:19.000000000 -0600
@@ -783,6 +783,12 @@
     }
     cacheValid = true;
     req->setPaddr(e->pte.translate(vaddr));
+#if 1 
+    if ( req->getPaddr() < 0x10000 ) {
+       //DPRINTFN("TLB::%s() don't cache %#lx\n",__func__,req->getPaddr());
+        req->setFlags(Request::UNCACHEABLE);
+    }
+#endif
     DPRINTF(TLB, "TLB: %#X -> %#X\n", vaddr, req->getPaddr());
     return NoFault;
 
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/x86/linux/linux.hh src/arch/x86/linux/linux.hh
--- /home/mjleven/tmp/m5/src/arch/x86/linux/linux.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/arch/x86/linux/linux.hh	2011-08-09 14:17:22.000000000 -0600
@@ -107,10 +107,39 @@
 
     static const unsigned TGT_MAP_ANONYMOUS = 0x20;
 
+    // these values are incorrect but it allows compilation
+    static const unsigned TIOCGETP_   = -1;
+    static const unsigned TIOCSETP_   = -2;
+    static const unsigned TIOCSETN_   = -3;
+    static const unsigned TIOCSETC_   = -4;
+    static const unsigned TIOCGETC_   = -5;
+    static const unsigned FIONREAD_   = -6;
+    static const unsigned TIOCISATTY_ = -7;
+    static const unsigned TIOCGETS_   = -8;
+    static const unsigned TIOCGETA_   = -9;
+    static const unsigned TCGETS_ = 0x5401;
+
+
     typedef struct {
         uint64_t iov_base; // void *
         uint64_t iov_len;  // size_t
     } tgt_iovec;
+
+    enum rlimit_resources {
+        TGT_RLIMIT_CPU = 0,
+        TGT_RLIMIT_FSIZE = 1,
+        TGT_RLIMIT_DATA = 2,
+        TGT_RLIMIT_STACK = 3,
+        TGT_RLIMIT_CORE = 4,
+        TGT_RLIMIT_RSS = 5,
+        TGT_RLIMIT_NOFILE = 7,
+        TGT_RLIMIT_AS = 9,
+        TGT_RLIMIT_VMEM = -1,
+        TGT_RLIMIT_NPROC = 6,
+        TGT_RLIMIT_MEMLOCK = 8,
+        TGT_RLIMIT_LOCKS = 10
+    };
+
 };
 
 class X86Linux32 : public Linux
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/x86/linux/syscalls.cc src/arch/x86/linux/syscalls.cc
--- /home/mjleven/tmp/m5/src/arch/x86/linux/syscalls.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/arch/x86/linux/syscalls.cc	2011-08-10 07:59:39.000000000 -0600
@@ -232,7 +232,7 @@
     /*   1 */ SyscallDesc("write", writeFunc),
     /*   2 */ SyscallDesc("open", openFunc<X86Linux64>),
     /*   3 */ SyscallDesc("close", closeFunc),
-    /*   4 */ SyscallDesc("stat", unimplementedFunc),
+    /*   4 */ SyscallDesc("stat", statFunc<X86Linux64>),
     /*   5 */ SyscallDesc("fstat", fstat64Func<X86Linux64>),
     /*   6 */ SyscallDesc("lstat", unimplementedFunc),
     /*   7 */ SyscallDesc("poll", unimplementedFunc),
@@ -244,7 +244,7 @@
     /*  13 */ SyscallDesc("rt_sigaction", unimplementedFunc),
     /*  14 */ SyscallDesc("rt_sigprocmask", unimplementedFunc),
     /*  15 */ SyscallDesc("rt_sigreturn", unimplementedFunc),
-    /*  16 */ SyscallDesc("ioctl", unimplementedFunc),
+    /*  16 */ SyscallDesc("ioctl", ioctlFunc<X86Linux64>),
     /*  17 */ SyscallDesc("pread64", unimplementedFunc),
     /*  18 */ SyscallDesc("pwrite64", unimplementedFunc),
     /*  19 */ SyscallDesc("readv", unimplementedFunc),
@@ -307,7 +307,7 @@
     /*  76 */ SyscallDesc("truncate", unimplementedFunc),
     /*  77 */ SyscallDesc("ftruncate", unimplementedFunc),
     /*  78 */ SyscallDesc("getdents", unimplementedFunc),
-    /*  79 */ SyscallDesc("getcwd", unimplementedFunc),
+    /*  79 */ SyscallDesc("getcwd", getcwdFunc),
     /*  80 */ SyscallDesc("chdir", unimplementedFunc),
     /*  81 */ SyscallDesc("fchdir", unimplementedFunc),
     /*  82 */ SyscallDesc("rename", renameFunc),
@@ -324,8 +324,9 @@
     /*  93 */ SyscallDesc("fchown", unimplementedFunc),
     /*  94 */ SyscallDesc("lchown", unimplementedFunc),
     /*  95 */ SyscallDesc("umask", unimplementedFunc),
-    /*  96 */ SyscallDesc("gettimeofday", unimplementedFunc),
-    /*  97 */ SyscallDesc("getrlimit", unimplementedFunc),
+    /*  96 */ SyscallDesc("gettimeofday", gettimeofdayFunc<X86Linux64>),
+    /*  97 */ SyscallDesc("getrlimit", getrlimitFunc<X86Linux64>),
+
     /*  98 */ SyscallDesc("getrusage", unimplementedFunc),
     /*  99 */ SyscallDesc("sysinfo", unimplementedFunc),
     /* 100 */ SyscallDesc("times", unimplementedFunc),
@@ -500,7 +501,9 @@
     /* 269 */ SyscallDesc("faccessat", unimplementedFunc),
     /* 270 */ SyscallDesc("pselect6", unimplementedFunc),
     /* 271 */ SyscallDesc("ppoll", unimplementedFunc),
-    /* 272 */ SyscallDesc("unshare", unimplementedFunc)
+    /* 272 */ SyscallDesc("unshare", unimplementedFunc),
+    /* 273 */ SyscallDesc("virt2phys", virt2physFunc),
+    /* 274 */ SyscallDesc("mmap_dev", mmap_devFunc)
 };
 
 const int X86_64LinuxProcess::numSyscalls = 
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/arch/x86/tlb.cc src/arch/x86/tlb.cc
--- /home/mjleven/tmp/m5/src/arch/x86/tlb.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/arch/x86/tlb.cc	2011-08-09 09:12:34.000000000 -0600
@@ -635,7 +635,8 @@
                     success = p->pTable->lookup(vaddr, newEntry);
                 }
                 if(!success) {
-                    panic("Tried to execute unmapped address %#x.\n", vaddr);
+                    panic("PC %#lx, Tried to execute unmapped address %#x.\n",
+                                tc->readPC(),vaddr);
                 } else {
                     Addr alignedVaddr = p->pTable->pageAlign(vaddr);
                     DPRINTF(TLB, "Mapping %#x to %#x\n", alignedVaddr,
@@ -701,6 +702,13 @@
         req->setPaddr(x86LocalAPICAddress(tc->contextId(), paddr - baseAddr));
     }
 #endif
+#if 1 
+    if ( req->getPaddr() < 0x10000 ) {
+       //DPRINTFN("TLB::%s() don't cache %#lx\n",__func__,req->getPaddr());
+        req->setFlags(Request::UNCACHEABLE);
+    }
+#endif
+
     return NoFault;
 };
 
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/base/trace.cc src/base/trace.cc
--- /home/mjleven/tmp/m5/src/base/trace.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/base/trace.cc	2011-08-22 13:05:48.000000000 -0600
@@ -92,6 +92,17 @@
         args.push_front(when);
     }
 
+#if 0 
+    static int _rank = -1;
+    if ( _rank == - 1) {
+        char* tmp = getenv("RANK");
+        if ( tmp ) sscanf( tmp, "%d", &_rank );
+    }
+ 
+    fmt = "%d:" + fmt;
+    args.push_front(_rank);
+#endif
+
     fmt += format;
 
     ccprintf(os, fmt.c_str(), args);
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/cpu/intr_control.cc src/cpu/intr_control.cc
--- /home/mjleven/tmp/m5/src/cpu/intr_control.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/cpu/intr_control.cc	2011-03-24 08:32:20.000000000 -0600
@@ -50,7 +50,7 @@
     DPRINTF(IntrControl, "post  %d:%d (cpu %d)\n", int_num, index, cpu_id);
     std::vector<ThreadContext *> &tcvec = sys->threadContexts;
     BaseCPU *cpu = tcvec[cpu_id]->getCpuPtr();
-    cpu->postInterrupt(int_num, index);
+    //cpu->postInterrupt(int_num, index);
 }
 
 void
@@ -59,7 +59,7 @@
     DPRINTF(IntrControl, "clear %d:%d (cpu %d)\n", int_num, index, cpu_id);
     std::vector<ThreadContext *> &tcvec = sys->threadContexts;
     BaseCPU *cpu = tcvec[cpu_id]->getCpuPtr();
-    cpu->clearInterrupt(int_num, index);
+    //cpu->clearInterrupt(int_num, index);
 }
 
 IntrControl *
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/cpu/SConscript src/cpu/SConscript
--- /home/mjleven/tmp/m5/src/cpu/SConscript	2010-10-20 13:51:49.000000000 -0600
+++ src/cpu/SConscript	2011-03-21 09:04:00.000000000 -0600
@@ -136,6 +136,10 @@
         SimObject('LegionTrace.py')
         Source('legiontrace.cc')
 
+if env['FULL_SYSTEM'] == 0:
+    SimObject('IntrControl.py')
+    Source('intr_control.cc')
+
 if env['TARGET_ISA'] == 'x86':
     SimObject('NativeTrace.py')
     Source('nativetrace.cc')
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/dev/SConscript src/dev/SConscript
--- /home/mjleven/tmp/m5/src/dev/SConscript	2010-10-20 13:51:49.000000000 -0600
+++ src/dev/SConscript	2011-03-21 09:02:11.000000000 -0600
@@ -106,3 +106,10 @@
         'EthernetIntr', 'EthernetSM', 'EthernetCksum' ])
     CompoundFlag('IdeAll', [ 'IdeCtrl', 'IdeDisk' ])
 
+if env['FULL_SYSTEM'] == 0:
+    SimObject('Device.py')
+    SimObject('Platform.py')
+    TraceFlag('DMA')
+    TraceFlag('IsaFake')
+    Source('io_device.cc')
+    Source('isa_fake.cc')
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/mem/cache/cache_impl.hh src/mem/cache/cache_impl.hh
--- /home/mjleven/tmp/m5/src/mem/cache/cache_impl.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/mem/cache/cache_impl.hh	2011-09-08 13:35:26.000000000 -0600
@@ -1296,7 +1296,7 @@
 
     // fall through... no pending requests.  Try a prefetch.
     assert(!miss_mshr && !write_mshr);
-    if (!mshrQueue.isFull()) {
+    if (prefetcher && !mshrQueue.isFull()) {
         // If we have a miss queue slot, we can try a prefetch
         PacketPtr pkt = prefetcher->getPacket();
         if (pkt) {
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/mem/packet.hh src/mem/packet.hh
--- /home/mjleven/tmp/m5/src/mem/packet.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/mem/packet.hh	2011-03-24 08:22:29.000000000 -0600
@@ -384,6 +384,8 @@
      */
     SenderState *senderState;
 
+    FlagsType getFlags() const { return flags; } 
+
     /// Return the string name of the cmd field (for debugging and
     /// tracing).
     const std::string &cmdString() const { return cmd.toString(); }
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/mem/page_table.cc src/mem/page_table.cc
--- /home/mjleven/tmp/m5/src/mem/page_table.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/mem/page_table.cc	2011-08-12 13:50:58.000000000 -0600
@@ -65,6 +65,31 @@
 }
 
 void
+PageTable::map(Addr vaddr, Addr paddr, int64_t size)
+{
+    // starting address must be page aligned
+    assert(pageOffset(vaddr) == 0);
+
+    DPRINTF(MMU, "Mapping Page: %#x-%#x -> %#x-%#x\n", 
+		vaddr, vaddr+ size, paddr, paddr+ size);
+
+    for (; size > 0; size -= pageSize, vaddr += pageSize, paddr += pageSize) {
+        PTableItr iter = pTable.find(vaddr);
+
+        if (iter != pTable.end()) {
+            // already mapped
+            fatal("PageTable::allocate: address 0x%x already mapped",
+                    vaddr);
+        }
+
+        pTable[vaddr] = TheISA::TlbEntry(process->M5_pid, vaddr, paddr );
+        DPRINTF(MMU,"Mapping %#lx %#lx\n", vaddr, paddr);
+        updateCache(vaddr, pTable[vaddr]);
+        if ( process->nicMmu ) process->nicMmu->add( vaddr, paddr );
+    }
+}
+
+void
 PageTable::allocate(Addr vaddr, int64_t size)
 {
     // starting address must be page aligned
@@ -81,9 +106,10 @@
                     vaddr);
         }
 
-        pTable[vaddr] = TheISA::TlbEntry(process->M5_pid, vaddr,
-                process->system->new_page());
+        Addr paddr = process->system->new_page();
+        pTable[vaddr] = TheISA::TlbEntry(process->M5_pid, vaddr, paddr );
         updateCache(vaddr, pTable[vaddr]);
+        if ( process->nicMmu ) process->nicMmu->add( vaddr, paddr );
     }
 }
 
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/mem/page_table.hh src/mem/page_table.hh
--- /home/mjleven/tmp/m5/src/mem/page_table.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/mem/page_table.hh	2011-03-21 13:01:39.000000000 -0600
@@ -79,6 +79,7 @@
     Addr pageAlign(Addr a)  { return (a & ~offsetMask); }
     Addr pageOffset(Addr a) { return (a &  offsetMask); }
 
+    void map(Addr vaddr, Addr paddr, int64_t size);
     void allocate(Addr vaddr, int64_t size);
     void remap(Addr vaddr, int64_t size, Addr new_vaddr);
     void deallocate(Addr vaddr, int64_t size);
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/mem/physical.cc src/mem/physical.cc
--- /home/mjleven/tmp/m5/src/mem/physical.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/mem/physical.cc	2011-07-20 15:38:56.000000000 -0600
@@ -54,7 +54,8 @@
 PhysicalMemory::PhysicalMemory(const Params *p)
     : MemObject(p), pmemAddr(NULL), pagePtr(0),
       lat(p->latency), lat_var(p->latency_var),
-      cachedSize(params()->range.size()), cachedStart(params()->range.start)
+      cachedSize(params()->range.size()), cachedStart(params()->range.start),
+    m_idx(0)
 {
     if (params()->range.size() % TheISA::PageBytes != 0)
         panic("Memory Size not divisible by page size\n");
@@ -360,6 +361,8 @@
         panic("PhysicalMemory::getPort: unknown port %s requested", if_name);
     }
 
+    if ( idx == -1 ) idx = m_idx++;
+
     if (idx >= (int)ports.size()) {
         ports.resize(idx + 1);
     }
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/mem/physical.hh src/mem/physical.hh
--- /home/mjleven/tmp/m5/src/mem/physical.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/mem/physical.hh	2011-07-18 13:03:42.000000000 -0600
@@ -151,6 +151,7 @@
 
     uint64_t cachedSize;
     uint64_t cachedStart;
+    int m_idx;
   public:
     Addr new_page();
     uint64_t size() { return cachedSize; }
Only in src: patch
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/SConscript src/SConscript
--- /home/mjleven/tmp/m5/src/SConscript	2010-10-20 13:51:48.000000000 -0600
+++ src/SConscript	2011-03-15 15:09:39.000000000 -0600
@@ -99,7 +99,7 @@
         
 class Source(SourceFile):
     '''Add a c/c++ source file to the build'''
-    def __init__(self, source, Werror=True, swig=False, bin_only=False,
+    def __init__(self, source, Werror=False, swig=False, bin_only=False,
                  skip_lib=False):
         super(Source, self).__init__(source)
 
@@ -946,14 +946,14 @@
     new_env.Append(**kwargs)
 
     swig_env = new_env.Clone()
-    swig_env.Append(CCFLAGS='-Werror')
+    #swig_env.Append(CCFLAGS='-Werror')
     if env['GCC']:
         swig_env.Append(CCFLAGS='-Wno-uninitialized')
         swig_env.Append(CCFLAGS='-Wno-sign-compare')
         swig_env.Append(CCFLAGS='-Wno-parentheses')
 
     werror_env = new_env.Clone()
-    werror_env.Append(CCFLAGS='-Werror')
+    #werror_env.Append(CCFLAGS='-Werror')
 
     def make_obj(source, static, extra_deps = None):
         '''This function adds the specified source to the correct
Only in src/sim: nicMmu.h
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/process.cc src/sim/process.cc
--- /home/mjleven/tmp/m5/src/sim/process.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/process.cc	2011-08-22 13:39:29.000000000 -0600
@@ -1,3 +1,4 @@
+
 /*
  * Copyright (c) 2001-2005 The Regents of The University of Michigan
  * All rights reserved.
@@ -98,7 +99,9 @@
 
 Process::Process(ProcessParams * params)
     : SimObject(params), system(params->system), checkpointRestored(false),
-    max_stack_size(params->max_stack_size)
+    max_stack_size(params->max_stack_size),
+    nicMmu( NULL ),
+    nid(params->nid)
 {
     string in = params->input;
     string out = params->output;
@@ -247,6 +250,12 @@
             TranslatingPort::Always);
     mem_port->setPeer(initVirtMem);
     initVirtMem->setPeer(mem_port);
+
+    if ( tc->getProcessPtr() && nid > -1 ) {
+        std::stringstream tmp;
+        tmp << "/pTable." << nid << "." << getpid();
+        nicMmu = new NicMmu( tmp.str(), false );
+    }
 }
 
 // map simulator fd sim_fd to target fd tgt_fd
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/process.hh src/sim/process.hh
--- /home/mjleven/tmp/m5/src/sim/process.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/process.hh	2011-08-12 12:18:38.000000000 -0600
@@ -49,6 +49,8 @@
 #include "base/types.hh"
 #include "sim/sim_object.hh"
 #include "sim/syscallreturn.hh"
+#include "sim/nicMmu.h"
+
 
 class GDBListener;
 class PageTable;
@@ -123,6 +125,7 @@
 
     // The maximum size allowed for the stack.
     Addr max_stack_size;
+    NicMmu*  nicMmu;
 
     // addr to use for next stack region (for multithreaded apps)
     Addr next_thread_stack_base;
@@ -157,6 +160,7 @@
     //This id is assigned by m5 and is used to keep process' tlb entries
     //separated.
     uint64_t M5_pid;
+    int      nid;
 
     class FdMap
     {
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/Process.py src/sim/Process.py
--- /home/mjleven/tmp/m5/src/sim/Process.py	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/Process.py	2011-05-31 15:19:17.000000000 -0600
@@ -38,6 +38,7 @@
     errout = Param.String('cerr', 'filename for stderr')
     system = Param.System(Parent.any, "system process will run on")
     max_stack_size = Param.MemorySize('64MB', 'maximum size of the stack')
+    nid = Param.Int(0, 'node id')
 
 class LiveProcess(Process):
     type = 'LiveProcess'
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/simulate.cc src/sim/simulate.cc
--- /home/mjleven/tmp/m5/src/sim/simulate.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/simulate.cc	2011-08-22 13:40:27.000000000 -0600
@@ -84,7 +84,15 @@
             if (se_event != limit_event) {
                 assert(limit_event->scheduled());
                 limit_event->squash();
+#if 0
                 hack_once("be nice to actually delete the event here");
+                fprintf(stderr,"%s %s %d\n",se_event->getCause().c_str(),
+                    se_event->description(),
+                    se_event->getCode());
+#endif
+            } else { 
+                delete limit_event;
+                se_event = NULL;
             }
 
             return se_event;
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/syscall_emul.cc src/sim/syscall_emul.cc
--- /home/mjleven/tmp/m5/src/sim/syscall_emul.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/syscall_emul.cc	2011-08-17 11:55:54.000000000 -0600
@@ -63,10 +63,57 @@
     DPRINTFR(SyscallVerbose, "%d: %s: syscall %s returns %d\n",
              curTick,tc->getCpuPtr()->name(), name, retval.value());
 
+#if 0
+    printf("%d:%s() %s: syscall %s returns %d\n",
+             curTick,__func__,tc->getCpuPtr()->name().c_str(), name, retval.value());
+#endif
+
     if (!(flags & SyscallDesc::SuppressReturnValue))
         process->setSyscallReturn(tc, retval);
 }
 
+SyscallReturn
+fdmapFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+                  ThreadContext *tc)
+{
+    int fd = process->getSyscallArg(tc, 0);
+    int sim_fd = process->sim_fd( fd );
+//    printf("%s() sim_fd=%d %d\n",__func__,sim_fd, fd );
+    return sim_fd;
+}
+
+SyscallReturn
+mmap_devFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+                  ThreadContext *tc)
+{
+    uint64_t  paddr = process->getSyscallArg(tc, 0);
+    uint64_t  length = process->getSyscallArg(tc, 1);
+
+    Addr start = process->mmap_end;
+
+    DPRINTF(SyscallVerbose, "syscall %s (#%d) vaddr=%#lx paddr=%#lx"
+		" length=%#lx\n", desc->name, callnum, start, paddr, length);
+
+    length = roundUp(length, TheISA::VMPageSize);
+    process->pTable->map(start, paddr, length );
+    process->mmap_end += length;
+
+    return start;
+}
+
+
+SyscallReturn
+virt2physFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+                  ThreadContext *tc)
+{
+    uint64_t  addr = process->getSyscallArg(tc, 0);
+    DPRINTF(SyscallVerbose, "syscall %s (#%d) addr=%#lx\n",
+                                 desc->name, callnum, addr);
+
+    Addr paddr;
+    process->pTable->translate( process->getSyscallArg(tc, 0), paddr );
+    return paddr;
+}
 
 SyscallReturn
 unimplementedFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/syscall_emul.hh src/sim/syscall_emul.hh
--- /home/mjleven/tmp/m5/src/sim/syscall_emul.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/syscall_emul.hh	2011-08-17 11:55:47.000000000 -0600
@@ -61,6 +61,8 @@
 #include "mem/page_table.hh"
 #include "sim/process.hh"
 
+#include <sys/resource.h>
+
 ///
 /// System call descriptor.
 ///
@@ -176,6 +178,13 @@
 SyscallReturn unimplementedFunc(SyscallDesc *desc, int num,
                                 LiveProcess *p, ThreadContext *tc);
 
+SyscallReturn virt2physFunc(SyscallDesc *desc, int num,
+                                LiveProcess *p, ThreadContext *tc);
+SyscallReturn mmap_devFunc(SyscallDesc *desc, int num,
+                                LiveProcess *p, ThreadContext *tc);
+SyscallReturn fdmapFunc(SyscallDesc *desc, int num,
+                                LiveProcess *p, ThreadContext *tc);
+
 /// Handler for unimplemented syscalls that we never intend to
 /// implement (signal handling, etc.) and should not affect the correct
 /// behavior of the program.  Print a warning only if the appropriate
@@ -485,6 +494,7 @@
     }
 
     switch (req) {
+      case OS::TCGETS_:
       case OS::TIOCISATTY_:
       case OS::TIOCGETP_:
       case OS::TIOCSETP_:
@@ -507,6 +517,11 @@
 openFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
          ThreadContext *tc)
 {
+#if THE_ISA == ALPHA_ISA 
+    int fd= process->getSyscallArg(tc, 0);
+    int tmp = process->alloc_fd(fd,"", 0, 0, 0);
+    return tmp; 
+#else 
     std::string path;
 
     if (!tc->getMemPort()->tryReadString(path, process->getSyscallArg(tc, 0)))
@@ -556,6 +571,7 @@
         return (fd == -1) ? -errno : process->alloc_fd(fd,path.c_str(),hostFlags,mode, false);
      }
 
+#endif
 }
 
 
@@ -996,6 +1012,33 @@
             rlp->rlim_max = htog(rlp->rlim_max);
             break;
 
+        case OS::TGT_RLIMIT_NOFILE:
+{
+            struct rlimit rlim;
+            getrlimit( RLIMIT_NOFILE, &rlim );
+            rlp->rlim_cur = rlim.rlim_cur;
+            rlp->rlim_max = rlim.rlim_max;
+}
+            break;
+
+        case OS::TGT_RLIMIT_NPROC:
+{
+            struct rlimit rlim;
+            getrlimit( RLIMIT_NPROC, &rlim );
+            rlp->rlim_cur = rlim.rlim_cur;
+            rlp->rlim_max = rlim.rlim_max;
+}
+            break;
+
+        case OS::TGT_RLIMIT_FSIZE:
+{
+            struct rlimit rlim;
+            getrlimit( RLIMIT_FSIZE, &rlim );
+            rlp->rlim_cur = rlim.rlim_cur;
+            rlp->rlim_max = rlim.rlim_max;
+}
+            break;
+
         default:
             std::cerr << "getrlimitFunc: unimplemented resource " << resource
                 << std::endl;
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/system.cc src/sim/system.cc
--- /home/mjleven/tmp/m5/src/sim/system.cc	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/system.cc	2011-08-17 11:54:33.000000000 -0600
@@ -253,7 +253,7 @@
     ++page_ptr;
     if (return_addr >= physmem->size())
         fatal("Out of memory, please increase size of physical memory.");
-    return return_addr;
+    return physmem->start() + return_addr;
 }
 
 Addr
diff -r -x '*.pyc' -u /home/mjleven/tmp/m5/src/sim/system.hh src/sim/system.hh
--- /home/mjleven/tmp/m5/src/sim/system.hh	2010-10-20 13:51:49.000000000 -0600
+++ src/sim/system.hh	2011-08-17 12:00:31.000000000 -0600
@@ -89,7 +89,7 @@
     std::vector<ThreadContext *> threadContexts;
     int _numContexts;
 
-    ThreadContext *getThreadContext(ThreadID tid)
+    virtual ThreadContext *getThreadContext(ThreadID tid)
     {
         return threadContexts[tid];
     }
@@ -228,7 +228,7 @@
 
 #else
 
-    Addr new_page();
+    virtual Addr new_page();
 
 #endif // FULL_SYSTEM
 
