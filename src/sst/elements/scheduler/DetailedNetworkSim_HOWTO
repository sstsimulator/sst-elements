------------------------------------------------------------------------------
    Overview of the Detailed Network Simulation Infrastructure 
------------------------------------------------------------------------------

The new simulation infrastructure provides interface between the scheduler element and the ember element in order to account for the performance impact of different allocation/task mapping schemes with higher accuracy.

Ember element models the MPI messaging patterns (i.e., motifs) in detail. Ember runs on top of a network model stack composed of firefly, hermes, and merlin. The new infrastructure provides the connection between the scheduler decisions and the underlying network by providing an interface between the two separate simulations.

The main functionality of this interface is that it runs the scheduler and ember simulations separately one after another, and provides the necessary information obtained from one simulation to another to proceed. In other words, we run two separate binaries (for the scheduler and the ember), but exchange information between the runs through python scripts and intermediate files.

The scheduler or ember simulations need to pause and resume at certain times. For example, when a new job gets successfully allocated and starts running in the scheduler, the scheduler simulation needs to pause and ember simulation should start running to estimate the running time of this newly started job. On the other hand, ember simulation needs to pause whenever a new job might possibly get scheduled to run in the scheduler. The logic for when/how to pause/resume simulations is incorporated within the "schedComponent" of the scheduler as well as the python scripts/intermediate files that drive the simulation. Whenever a simulation pauses, a snapshot of the current state is dumped in the form of .xml file (for scheduler) or .out file (for ember).

There is one main python script and two sub-python scripts that are used to run the simulations. The main python script (run_DetailedNetworkSim.py) drives the sub-python scripts to run scheduler and ember simulations successively until all jobs in the job trace are completed. The sub-python script "snapshotParser_sched.py" parses the snapshot of the scheduler state and runs ember based on this information. The other sub-python script "snapshotParser_ember.py" parses the snapshot of the ember state and runs scheduler based on this information.

Pausing and resuming simulations bring about some errors, which can be minimized by adjusting the simulation parameters. There are two main source of errors in this simulation environment: (i) the network state (the packages in flight, the congestion etc.) is reset every time the ember simulation pauses, (ii) if a motif execution gets interrupted when ember simulation pauses, we resume from the beginning of that motif in the next run. In order to minimize the error due to (i), one should simulate time scales large enough (in the order of seconds) so that the network warm-up time is negligible. In order to minimize the error due to (ii), one should make sure that each motif spans small enough time so that the additional estimated time due to the interruption is negligible.

All of the default scheduler functionality (without the ember interface) is protected by a boolean variable. By default, detailed network simulation with ember interface is OFF. In order to turn on the ember interface, one needs to add "detailedNetworkSim" : "ON" to the scheduler parameters.

------------------------------------------------------------------------------
    Descriptions of Files Involved in Running Scheduler Component with Detailed Network Simulation in SST
------------------------------------------------------------------------------

The files that are used by the detailed simulation infrastructure can be grouped into 4 categories: (i) Input files that are provided by the user, (ii) intermediate files that are generated and updated during the simulation, (iii) output files, (iv) python scripts that provide the interface between scheduler & ember simulations and run them. Next, we explain each category in detail:

(i) Input Files: <example file name located in /scheduler/simulations folder>

	Job trace file: <test_DetailedNetwork.sim>
		this is a list of jobs to run involving the arrival time, number of processors required, estimated running time etc. When running in DetailedNetworkSim mode, an application phase file has to be specified for each job as in the example trace.
	Scheduler input configuration file: <test_DetailedNetwork.py>
		This file includes the scheduler simulation configuration parameters such as the number of nodes, cores per node, the type of scheduler/task mapper to use etc. When running in DetailedNetworkSim mode, the parameters "detailedNetworkSim", "completedJobsTrace", and "runningJobsTrace" must be specified as in the example file. 
	Ember input configuration file: <emberLoad.py>
		This file configures the settings for the ember simulation such as the network topology, the number of nodes, network bandwodth, packet size etc. It includes some other python files from the ember/test directory for default parameters. In order not to copy all those files to our current directory, we add the full path to the directory of these files on line #3 of emberLoad.py. More details on this will be provided later. 
	Application phase file: <CTH_256.phase>
		Each job on the job list has a phase file. Phase file includes a series of motifs that represent the behavior of an application. Example motifs are Halo3D, Allreduce, PingPong etc., and they can be picked from the list of motifs defined in ember.

(ii) Intermediate Files: <example file name located in /scheduler/simulations folder>

	Scheduler snapshot file: <test_DetailedNetwork.sim.snapshot.xml>
		Whenever the scheduler simulation is paused, the scheduler creates/updates a snapshot file. The snapshot file includes information on the jobs that are currently running, the allocation/mapping of the tasks to the nodes, the time of the snapshot etc. A python script parses this information and converts it into a script to run ember.
	Ember output file: <ember.out>
		This file is created/updated at each run of ember simulation. It involves information on how long the ember simulation ran and why it stopped. A python script parses this information and updates the input files to run scheduler.
	Ember load file: <loadfile>
		This is one of the input files used to run ember. loadfile specifies the job numbers, which jobs run on which nodes in ember and the motifs for each job. It is updated before each run of ember.
	Ember motif log files: <motif-0.log>
		Ember simulation can be paused for various reasons. When that happens, we would like to resume ember simulation from where we left. Thus, we create motif logs which record the time whenever a new motif starts running in ember. Using the motif logs, next time we run ember, we continue from the beginning of the motif that was interrupted. For each job, we choose only one node from the node ID list and dump a motif log for the first core of that node. This way, we use the same rank of the application as a reference for application progress and we avoid dealing with too many motif logs.
	Completed/Running job log files: <EmberCompleted.txt> , <EmberRunning.txt>
		Scheduler needs to know the jobs that have completed/ still running in ember. Thus, at the end of each ember run, we update the completed/running job log files. For the jobs that have finished running, we record the actual running time in ember. For the jobs that are still running in ember, we record the running time so far and the current motif number that is running on ember. Scheduler uses this info to update the running times, avoid finishing the currently running jobs etc.

(iii) Output Files: <example file name located in /scheduler/simulations folder>

	Allocation file: <test_DetailedNetwork.sim.alloc>
		This file has the same format as in before. The parameters such as the actual running time, average pairwise L1 distance, job congestion, or hop bytes are based on the previous implementation without detailed network simulation. Thus, this file should be ignored.
	Timing file: <test_DetailedNetwork.sim.time>
		This file has the same format as in before. It includes the actual running time from ember simulation for each job. 

(iv) Python Scripts: <example file name located in /scheduler/simulations folder>

	Main python script: <run_DetailedNetworkSim.py>
		This main python script drives sub-python scripts in order to run scheduler & ember simulations successively until all jobs is the job trace finish running. Two input arguments have to be provided to this script: name of the ember output file (--emberOut) and the name of the scheduler input configuration file (--schedPy).
	Sub-python script to parse scheduler output & run ember: <snapshotParser_sched.py>
		This script parses the scheduler snapshot xml file, updates the ember input files (i.e., the loadfile), creates a script to run ember, and runs ember.
	Sub-python script to parse ember output & run scheduler: <snapshotParser_ember.py>
		This script parses the ember output file, updates the scheduler input files accordingly (i.e., Completed/Running job log files) and runs scheduler.

------------------------------------------------------------------------------
    How to Run The Scheduler Component with Detailed Network Simulation in SST
------------------------------------------------------------------------------

The steps to run are described below:

(1) cd into the /sst/elements/scheduler/simulations directory.

(2) Open the python file named emberLoad.py. In line #3, replace the word PATH with the full path to the ember test directory (i.e., /sst/elements/ember/test). This is done to be able to include the other python files from this folder.

(3) ./run_DetailedNetworkSim.py --emberOut ember.out --schedPy test_DetailedNetwork.py

------------------------------------------------------------------------------
    Important Items to Check Before Running the Detailed Network Simulation
------------------------------------------------------------------------------

-Ember requires all cores of a node to be fully occupied with tasks. Thus, all jobs in the job trace should have the requested number of processors that is an integer multiple of coresPerNode (Ex: If coresPerNode = 4, valid values for the requested number of processors are 4, 8, 12,..., 1000,...).

-Application phase files (Ex: CTH_256.phase) should not include more than a few 100 motifs. As the number of motifs per job and the number of nodes increase, ember runs into memory issues and the simulation gets killed. If simulation of longer jobs are desired, one should increase the number of iterations within a motif as opposed to creating more number of motifs. It is a tradeoff between simulation granularity & simulated time and the resource limitations of the host processor.

-All application phase files should include a "Stop" motif right before the "Fini" motif at the end of the file. See the example CTH_256.phase file for reference.

-The running times in the input job trace should match (i.e., should be within the ballpark of) the actual running times of the applications in ember. If (EmberRunningTime) > (MaximumRequestedTime specified in the job trace), the scheduler will give a fatal error saying "Failed to start job <jobNumber> at guaranteed time".
