diff -r -x '*.pyc' -u sandbox-2/src/arch/alpha/linux/linux.cc sandbox-1/src/arch/alpha/linux/linux.cc
--- sandbox-2/src/arch/alpha/linux/linux.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/alpha/linux/linux.cc	2011-09-21 15:04:11.000000000 -0600
@@ -61,6 +61,7 @@
   { AlphaLinux::TGT_O_EXCL,     O_EXCL },
   { AlphaLinux::TGT_O_NONBLOCK, O_NONBLOCK },
   { AlphaLinux::TGT_O_NOCTTY,   O_NOCTTY },
+  { AlphaLinux::TGT_O_DRD,   O_DIRECTORY },
 #ifdef O_SYNC
   { AlphaLinux::TGT_O_SYNC,     O_SYNC },
 #endif
diff -r -x '*.pyc' -u sandbox-2/src/arch/alpha/linux/linux.hh sandbox-1/src/arch/alpha/linux/linux.hh
--- sandbox-2/src/arch/alpha/linux/linux.hh	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/alpha/linux/linux.hh	2011-09-21 15:04:49.000000000 -0600
@@ -106,6 +106,7 @@
     static const unsigned TIOCGETS_   = 0x402c7413;
     static const unsigned TIOCGETA_   = 0x40127417;
     static const unsigned TCSETAW_    = 0x80147419; // 2.6.15 kernel
+    static const unsigned TCGETS_     = 0x403c7413;
     //@}
 
     /// For table().
diff -r -x '*.pyc' -u sandbox-2/src/arch/alpha/linux/process.cc sandbox-1/src/arch/alpha/linux/process.cc
--- sandbox-2/src/arch/alpha/linux/process.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/alpha/linux/process.cc	2011-09-22 10:43:21.000000000 -0600
@@ -567,7 +567,10 @@
     /* 438 */ SyscallDesc("waitid", unimplementedFunc),
     /* 439 */ SyscallDesc("add_key", unimplementedFunc),
     /* 440 */ SyscallDesc("request_key", unimplementedFunc),
-    /* 441 */ SyscallDesc("keyctl", unimplementedFunc)
+    /* 441 */ SyscallDesc("keyctl", unimplementedFunc),
+    /* 442 */ SyscallDesc("virt2phys", virt2physFunc),
+    /* 443 */ SyscallDesc("mmap_dev", mmap_devFunc),
+    /* 444 */ SyscallDesc("fdmap", fdmapFunc)
 };
 
 AlphaLinuxProcess::AlphaLinuxProcess(LiveProcessParams * params,
diff -r -x '*.pyc' -u sandbox-2/src/arch/alpha/tlb.cc sandbox-1/src/arch/alpha/tlb.cc
--- sandbox-2/src/arch/alpha/tlb.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/alpha/tlb.cc	2011-09-22 13:20:04.000000000 -0600
@@ -234,6 +234,13 @@
             return new UnimpFault("CPU trying to fetch from noncacheabled I/O");
 
     }
+#if 1 
+    if ( req->getPaddr() < 0x10000 ) {
+//        printf("TLB::%s() don't cache %#lx\n",__func__,req->getPaddr());
+        req->setFlags(Request::UNCACHEABLE);
+    }
+#endif
+
     return NoFault;
 }
 
diff -r -x '*.pyc' -u sandbox-2/src/arch/alpha/tru64/tru64.hh sandbox-1/src/arch/alpha/tru64/tru64.hh
--- sandbox-2/src/arch/alpha/tru64/tru64.hh	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/alpha/tru64/tru64.hh	2011-09-21 15:23:02.000000000 -0600
@@ -100,6 +100,7 @@
     static const unsigned TIOCGETS_   = 0x402c7413;
     static const unsigned TIOCGETA_   = 0x40127417;
     static const unsigned TCSETAW_    = 0x80147419;
+    static const unsigned TCGETS_   = -1;
     //@}
 
     //@{
diff -r -x '*.pyc' -u sandbox-2/src/arch/x86/linux/linux.hh sandbox-1/src/arch/x86/linux/linux.hh
--- sandbox-2/src/arch/x86/linux/linux.hh	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/x86/linux/linux.hh	2011-09-23 11:56:00.000000000 -0600
@@ -88,12 +88,39 @@
     static const int NUM_OPEN_FLAGS;
 
     static const unsigned TGT_MAP_ANONYMOUS = 0x20;
+    // these values are incorrect but it allows compilation
+    static const unsigned TIOCGETP_   = -1;
+    static const unsigned TIOCSETP_   = -2;
+    static const unsigned TIOCSETN_   = -3;
+    static const unsigned TIOCSETC_   = -4;
+    static const unsigned TIOCGETC_   = -5;
+    static const unsigned FIONREAD_   = -6;
+    static const unsigned TIOCISATTY_ = -7;
+    static const unsigned TIOCGETS_   = -8;
+    static const unsigned TIOCGETA_   = -9;
+    static const unsigned TCGETS_ = 0x5401;
+    static const unsigned TCSETAW_ = 0x507;
 
     typedef struct {
         uint64_t iov_base; // void *
         uint64_t iov_len;  // size_t
     } tgt_iovec;
 
+    enum rlimit_resources {
+        TGT_RLIMIT_CPU = 0,
+        TGT_RLIMIT_FSIZE = 1,
+        TGT_RLIMIT_DATA = 2,
+        TGT_RLIMIT_STACK = 3,
+        TGT_RLIMIT_CORE = 4,
+        TGT_RLIMIT_RSS = 5,
+        TGT_RLIMIT_NOFILE = 7,
+        TGT_RLIMIT_AS = 9,
+        TGT_RLIMIT_VMEM = -1,
+        TGT_RLIMIT_NPROC = 6,
+        TGT_RLIMIT_MEMLOCK = 8,
+        TGT_RLIMIT_LOCKS = 10
+    };
+
     typedef struct {
         int64_t  uptime;    /* Seconds since boot */
         uint64_t loads[3];  /* 1, 5, and 15 minute load averages */
diff -r -x '*.pyc' -u sandbox-2/src/arch/x86/linux/syscalls.cc sandbox-1/src/arch/x86/linux/syscalls.cc
--- sandbox-2/src/arch/x86/linux/syscalls.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/x86/linux/syscalls.cc	2011-09-22 15:28:59.000000000 -0600
@@ -229,7 +229,7 @@
     /*  13 */ SyscallDesc("rt_sigaction", ignoreFunc),
     /*  14 */ SyscallDesc("rt_sigprocmask", unimplementedFunc),
     /*  15 */ SyscallDesc("rt_sigreturn", unimplementedFunc),
-    /*  16 */ SyscallDesc("ioctl", unimplementedFunc),
+    /*  16 */ SyscallDesc("ioctl", ioctlFunc<X86Linux64>),
     /*  17 */ SyscallDesc("pread64", unimplementedFunc),
     /*  18 */ SyscallDesc("pwrite64", unimplementedFunc),
     /*  19 */ SyscallDesc("readv", unimplementedFunc),
@@ -292,7 +292,7 @@
     /*  76 */ SyscallDesc("truncate", truncateFunc),
     /*  77 */ SyscallDesc("ftruncate", ftruncateFunc),
     /*  78 */ SyscallDesc("getdents", unimplementedFunc),
-    /*  79 */ SyscallDesc("getcwd", unimplementedFunc),
+    /*  79 */ SyscallDesc("getcwd", getcwdFunc),
     /*  80 */ SyscallDesc("chdir", unimplementedFunc),
     /*  81 */ SyscallDesc("fchdir", unimplementedFunc),
     /*  82 */ SyscallDesc("rename", renameFunc),
@@ -309,8 +309,8 @@
     /*  93 */ SyscallDesc("fchown", unimplementedFunc),
     /*  94 */ SyscallDesc("lchown", unimplementedFunc),
     /*  95 */ SyscallDesc("umask", unimplementedFunc),
-    /*  96 */ SyscallDesc("gettimeofday", unimplementedFunc),
-    /*  97 */ SyscallDesc("getrlimit", unimplementedFunc),
+    /*  96 */ SyscallDesc("gettimeofday", gettimeofdayFunc<X86Linux64>),
+    /*  97 */ SyscallDesc("getrlimit", getrlimitFunc<X86Linux64>),
     /*  98 */ SyscallDesc("getrusage", unimplementedFunc),
     /*  99 */ SyscallDesc("sysinfo", sysinfoFunc<X86Linux64>),
     /* 100 */ SyscallDesc("times", unimplementedFunc),
@@ -485,7 +485,10 @@
     /* 269 */ SyscallDesc("faccessat", unimplementedFunc),
     /* 270 */ SyscallDesc("pselect6", unimplementedFunc),
     /* 271 */ SyscallDesc("ppoll", unimplementedFunc),
-    /* 272 */ SyscallDesc("unshare", unimplementedFunc)
+    /* 272 */ SyscallDesc("unshare", unimplementedFunc),
+    /* 273 */ SyscallDesc("virt2phys", virt2physFunc),
+    /* 274 */ SyscallDesc("mmap_dev", mmap_devFunc),
+    /* 275 */ SyscallDesc("fdmap", fdmapFunc)
 };
 
 const int X86_64LinuxProcess::numSyscalls = 
diff -r -x '*.pyc' -u sandbox-2/src/arch/x86/tlb.cc sandbox-1/src/arch/x86/tlb.cc
--- sandbox-2/src/arch/x86/tlb.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/arch/x86/tlb.cc	2011-09-23 12:09:25.000000000 -0600
@@ -691,6 +691,13 @@
         req->setPaddr(x86LocalAPICAddress(tc->contextId(), paddr - baseAddr));
     }
 #endif
+#if 1           
+    if ( req->getPaddr() < 0x10000 ) {
+       //DPRINTFN("TLB::%s() don't cache %#lx\n",__func__,req->getPaddr());
+        req->setFlags(Request::UNCACHEABLE);
+    }       
+#endif      
+
     return NoFault;
 };
 
diff -r -x '*.pyc' -u sandbox-2/src/base/debug.cc sandbox-1/src/base/debug.cc
--- sandbox-2/src/base/debug.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/base/debug.cc	2011-09-22 13:33:43.000000000 -0600
@@ -35,6 +35,7 @@
 #include <csignal>
 #include <map>
 #include <vector>
+#include <deque>
 
 #include "base/cprintf.hh"
 #include "base/debug.hh"
@@ -183,3 +184,66 @@
             cprintf("%s\n", f->name());
     }
 }
+
+
+#include <assert.h>
+void
+enableDebugFlags(string str)
+{
+    using namespace Debug;
+
+    std::deque< std::string > add;
+    std::deque< std::string > remove;
+    bool all = false;
+    size_t cur = 0;
+
+    str = str.substr( str.find_first_not_of(" ") );
+
+    while ( ( cur = str.find(' ') ) != std::string::npos || str.length() ) {
+
+        if ( ! str.substr(0,cur).compare("All") ) {
+            all = true;
+        } else if ( str.substr(0,cur).at(0) == '-' ) {
+            remove.push_back( str.substr(1,cur-1) );
+        } else {
+            add.push_back( str.substr(0,cur) );
+        }
+
+        if ( cur == std::string::npos ) {
+            break;
+        }
+        str = str.substr(cur);
+        if ( str.find_first_not_of(" ") == std::string::npos ) {
+            break;
+        }
+        str = str.substr( str.find_first_not_of(" ") );
+    }
+
+    std::deque<std::string>::iterator strIter;
+    FlagsMap::iterator i = allFlags().begin();
+    FlagsMap::iterator end = allFlags().end();
+    for (; i != end; ++i) {
+        SimpleFlag *f = dynamic_cast<SimpleFlag *>(i->second);
+
+        if ( f ) {
+            //printf("flag %s \n",f->name().c_str());
+            if ( all ) {
+                f->enable();
+            } else {
+                strIter = add.begin();
+                for ( ; strIter != add.end(); ++strIter ) {
+                    if ( ! (*strIter).compare(f->name()) ) {
+                        f->enable();
+                    }
+                }
+            }
+
+            strIter = remove.begin();
+            for ( ; strIter != remove.end(); ++strIter ) {
+                if ( ! (*strIter).compare(f->name()) ) {
+                    f->disable();
+                }
+            }
+        }
+    }
+}
diff -r -x '*.pyc' -u sandbox-2/src/base/stats/output.hh sandbox-1/src/base/stats/output.hh
--- sandbox-2/src/base/stats/output.hh	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/base/stats/output.hh	2011-09-21 10:46:58.000000000 -0600
@@ -56,6 +56,7 @@
     virtual void visit(const VectorDistInfo &info) = 0;
     virtual void visit(const Vector2dInfo &info) = 0;
     virtual void visit(const FormulaInfo &info) = 0;
+    virtual ~Output() {}
 };
 
 } // namespace Stats
diff -r -x '*.pyc' -u sandbox-2/src/cpu/inorder/resource_pool.hh sandbox-1/src/cpu/inorder/resource_pool.hh
--- sandbox-2/src/cpu/inorder/resource_pool.hh	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/cpu/inorder/resource_pool.hh	2011-09-21 11:35:32.000000000 -0600
@@ -122,7 +122,7 @@
 
   public:
     ResourcePool(InOrderCPU *_cpu, ThePipeline::Params *params);
-    ~ResourcePool();    
+    virtual ~ResourcePool();    
 
     std::string name();
 
diff -r -x '*.pyc' -u sandbox-2/src/cpu/intr_control.cc sandbox-1/src/cpu/intr_control.cc
--- sandbox-2/src/cpu/intr_control.cc	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/cpu/intr_control.cc	2011-09-21 13:15:23.000000000 -0600
@@ -50,8 +50,8 @@
 {
     DPRINTF(IntrControl, "post  %d:%d (cpu %d)\n", int_num, index, cpu_id);
     std::vector<ThreadContext *> &tcvec = sys->threadContexts;
-    BaseCPU *cpu = tcvec[cpu_id]->getCpuPtr();
-    cpu->postInterrupt(int_num, index);
+    //BaseCPU *cpu = tcvec[cpu_id]->getCpuPtr();
+    //cpu->postInterrupt(int_num, index);
 }
 
 void
@@ -59,8 +59,8 @@
 {
     DPRINTF(IntrControl, "clear %d:%d (cpu %d)\n", int_num, index, cpu_id);
     std::vector<ThreadContext *> &tcvec = sys->threadContexts;
-    BaseCPU *cpu = tcvec[cpu_id]->getCpuPtr();
-    cpu->clearInterrupt(int_num, index);
+    //BaseCPU *cpu = tcvec[cpu_id]->getCpuPtr();
+    //cpu->clearInterrupt(int_num, index);
 }
 
 IntrControl *
diff -r -x '*.pyc' -u sandbox-2/src/cpu/SConscript sandbox-1/src/cpu/SConscript
--- sandbox-2/src/cpu/SConscript	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/cpu/SConscript	2011-09-21 13:08:51.000000000 -0600
@@ -135,6 +135,11 @@
         SimObject('LegionTrace.py')
         Source('legiontrace.cc')
 
+if env['FULL_SYSTEM'] == 0:
+    SimObject('IntrControl.py')
+    Source('intr_control.cc')
+
+
 if env['USE_CHECKER']:
     Source('checker/cpu.cc')
     DebugFlag('Checker')
diff -r -x '*.pyc' -u sandbox-2/src/dev/SConscript sandbox-1/src/dev/SConscript
--- sandbox-2/src/dev/SConscript	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/dev/SConscript	2011-09-21 14:08:48.000000000 -0600
@@ -110,3 +110,11 @@
         'EthernetIntr', 'EthernetSM', 'EthernetCksum' ])
     CompoundFlag('IdeAll', [ 'IdeCtrl', 'IdeDisk' ])
 
+else:
+    SimObject('Device.py')
+    SimObject('Platform.py')
+    DebugFlag('DMA')
+    DebugFlag('IsaFake')
+    Source('io_device.cc')
+    Source('isa_fake.cc')
+
diff -r -x '*.pyc' -u sandbox-2/src/mem/packet.hh sandbox-1/src/mem/packet.hh
--- sandbox-2/src/mem/packet.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/mem/packet.hh	2011-09-21 14:12:41.000000000 -0600
@@ -394,6 +394,8 @@
      */
     SenderState *senderState;
 
+    FlagsType getFlags() const { return flags; } 
+
     /// Return the string name of the cmd field (for debugging and
     /// tracing).
     const std::string &cmdString() const { return cmd.toString(); }
diff -r -x '*.pyc' -u sandbox-2/src/mem/page_table.cc sandbox-1/src/mem/page_table.cc
--- sandbox-2/src/mem/page_table.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/mem/page_table.cc	2011-09-21 15:10:31.000000000 -0600
@@ -67,6 +67,31 @@
 }
 
 void
+PageTable::map(Addr vaddr, Addr paddr, int64_t size)
+{
+    // starting address must be page aligned
+    assert(pageOffset(vaddr) == 0);
+
+    DPRINTF(MMU, "Mapping Page: %#x-%#x -> %#x-%#x\n", 
+       vaddr, vaddr+ size, paddr, paddr+ size);
+
+    for (; size > 0; size -= pageSize, vaddr += pageSize, paddr += pageSize) {
+        PTableItr iter = pTable.find(vaddr);
+
+        if (iter != pTable.end()) {
+            // already mapped
+            fatal("PageTable::allocate: address 0x%x already mapped",
+                    vaddr);
+        }
+
+        pTable[vaddr] = TheISA::TlbEntry(process->M5_pid, vaddr, paddr );
+        DPRINTF(MMU,"Mapping %#lx %#lx\n", vaddr, paddr);
+        updateCache(vaddr, pTable[vaddr]);
+        if ( process->nicMmu ) process->nicMmu->add( vaddr, paddr );
+    }
+}
+
+void
 PageTable::allocate(Addr vaddr, int64_t size)
 {
     // starting address must be page aligned
@@ -83,9 +108,17 @@
                     vaddr);
         }
 
+#if 0
         pTable[vaddr] = TheISA::TlbEntry(process->M5_pid, vaddr,
                 process->system->new_page());
+#endif
+        Addr paddr = process->system->new_page();
+        pTable[vaddr] = TheISA::TlbEntry(process->M5_pid, vaddr, paddr );
+
         updateCache(vaddr, pTable[vaddr]);
+
+        if ( process->nicMmu ) process->nicMmu->add( vaddr, paddr );
+
     }
 }
 
diff -r -x '*.pyc' -u sandbox-2/src/mem/page_table.hh sandbox-1/src/mem/page_table.hh
--- sandbox-2/src/mem/page_table.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/mem/page_table.hh	2011-09-21 15:10:43.000000000 -0600
@@ -79,6 +79,7 @@
     Addr pageAlign(Addr a)  { return (a & ~offsetMask); }
     Addr pageOffset(Addr a) { return (a &  offsetMask); }
 
+    void map(Addr vaddr, Addr paddr, int64_t size);
     void allocate(Addr vaddr, int64_t size);
     void remap(Addr vaddr, int64_t size, Addr new_vaddr);
     void deallocate(Addr vaddr, int64_t size);
diff -r -x '*.pyc' -u sandbox-2/src/mem/physical.cc sandbox-1/src/mem/physical.cc
--- sandbox-2/src/mem/physical.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/mem/physical.cc	2011-09-21 15:11:45.000000000 -0600
@@ -73,6 +73,7 @@
 PhysicalMemory::PhysicalMemory(const Params *p)
     : MemObject(p), pmemAddr(NULL), lat(p->latency), lat_var(p->latency_var),
       _size(params()->range.size()), _start(params()->range.start)
+    ,m_idx(0)
 {
     if (size() % TheISA::PageBytes != 0)
         panic("Memory Size not divisible by page size\n");
@@ -383,6 +384,8 @@
         panic("PhysicalMemory::getPort: unknown port %s requested", if_name);
     }
 
+    if ( idx == -1 ) idx = m_idx++;
+
     if (idx >= (int)ports.size()) {
         ports.resize(idx + 1);
     }
diff -r -x '*.pyc' -u sandbox-2/src/mem/physical.hh sandbox-1/src/mem/physical.hh
--- sandbox-2/src/mem/physical.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/mem/physical.hh	2011-09-21 15:12:14.000000000 -0600
@@ -156,6 +156,7 @@
     uint64_t _size;
     uint64_t _start;
   public:
+    int      m_idx;
     uint64_t size() { return _size; }
     uint64_t start() { return _start; }
 
diff -r -x '*.pyc' -u sandbox-2/src/SConscript sandbox-1/src/SConscript
--- sandbox-2/src/SConscript	2011-09-20 09:21:52.000000000 -0600
+++ sandbox-1/src/SConscript	2011-09-21 11:45:04.000000000 -0600
@@ -151,7 +151,7 @@
         
 class Source(SourceFile):
     '''Add a c/c++ source file to the build'''
-    def __init__(self, source, Werror=True, swig=False, **guards):
+    def __init__(self, source, Werror=False, swig=False, **guards):
         '''specify the source file, and any guards'''
         super(Source, self).__init__(source, **guards)
 
@@ -873,20 +873,21 @@
     new_env.Append(**kwargs)
 
     swig_env = new_env.Clone()
-    swig_env.Append(CCFLAGS='-Werror')
+#    swig_env.Append(CCFLAGS='-Werror')
     if env['GCC']:
         swig_env.Append(CCFLAGS='-Wno-uninitialized')
         swig_env.Append(CCFLAGS='-Wno-sign-compare')
         swig_env.Append(CCFLAGS='-Wno-parentheses')
 
     werror_env = new_env.Clone()
-    werror_env.Append(CCFLAGS='-Werror')
+#    werror_env.Append(CCFLAGS='-Werror')
 
     def make_obj(source, static, extra_deps = None):
         '''This function adds the specified source to the correct
         build environment, and returns the corresponding SCons Object
         nodes'''
 
+        #print source.filename, static
         if source.swig:
             env = swig_env
         elif source.Werror:
@@ -905,8 +906,8 @@
         return obj
 
     sources = Source.get(main=False, skip_lib=False)
-    static_objs = [ make_obj(s, True) for s in sources ]
     shared_objs = [ make_obj(s, False) for s in sources ]
+    static_objs = [ make_obj(s, True) for s in sources ]
 
     static_date = make_obj(date_source, static=True, extra_deps=static_objs)
     static_objs.append(static_date)
diff -r -x '*.pyc' -u sandbox-2/src/sim/debug.cc sandbox-1/src/sim/debug.cc
--- sandbox-2/src/sim/debug.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/debug.cc	2011-09-21 15:39:12.000000000 -0600
@@ -123,7 +123,8 @@
     Py_DECREF(locals);
 }
 
-int remote_gdb_base_port = 7000;
+//int remote_gdb_base_port = 7000;
+int remote_gdb_base_port = 0;
 
 int
 getRemoteGDBPort()
Only in sandbox-1/src/sim: nicMmu.h
diff -r -x '*.pyc' -u sandbox-2/src/sim/process.cc sandbox-1/src/sim/process.cc
--- sandbox-2/src/sim/process.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/process.cc	2011-09-22 10:31:32.000000000 -0600
@@ -101,7 +101,9 @@
 
 Process::Process(ProcessParams * params)
     : SimObject(params), system(params->system),
-      max_stack_size(params->max_stack_size)
+      max_stack_size(params->max_stack_size),
+    nicMmu( NULL ),
+    nid( params->nid )
 {
     string in = params->input;
     string out = params->output;
@@ -250,6 +252,14 @@
             TranslatingPort::Always);
     mem_port->setPeer(initVirtMem);
     initVirtMem->setPeer(mem_port);
+
+#if 0
+    if ( tc->getProcessPtr() && nid > -1 ) {
+        std::stringstream tmp;
+        tmp << "/pTable." << nid << "." << getpid();
+        nicMmu = new NicMmu( tmp.str(), false );
+    }
+#endif
 }
 
 // map simulator fd sim_fd to target fd tgt_fd
diff -r -x '*.pyc' -u sandbox-2/src/sim/process.hh sandbox-1/src/sim/process.hh
--- sandbox-2/src/sim/process.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/process.hh	2011-09-21 15:13:10.000000000 -0600
@@ -50,6 +50,7 @@
 #include "config/the_isa.hh"
 #include "sim/sim_object.hh"
 #include "sim/syscallreturn.hh"
+#include "sim/nicMmu.h"
 
 class PageTable;
 class ProcessParams;
@@ -107,6 +108,7 @@
 
     // The maximum size allowed for the stack.
     Addr max_stack_size;
+    NicMmu*  nicMmu;
 
     // addr to use for next stack region (for multithreaded apps)
     Addr next_thread_stack_base;
@@ -140,6 +142,7 @@
     //This id is assigned by m5 and is used to keep process' tlb entries
     //separated.
     uint64_t M5_pid;
+    int nid;
 
     class FdMap
     {
diff -r -x '*.pyc' -u sandbox-2/src/sim/Process.py sandbox-1/src/sim/Process.py
--- sandbox-2/src/sim/Process.py	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/Process.py	2011-09-21 14:19:57.000000000 -0600
@@ -38,6 +38,7 @@
     errout = Param.String('cerr', 'filename for stderr')
     system = Param.System(Parent.any, "system process will run on")
     max_stack_size = Param.MemorySize('64MB', 'maximum size of the stack')
+    nid = Param.Int(0, 'node id')
 
 class LiveProcess(Process):
     type = 'LiveProcess'
diff -r -x '*.pyc' -u sandbox-2/src/sim/sim_object.cc sandbox-1/src/sim/sim_object.cc
--- sandbox-2/src/sim/sim_object.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/sim_object.cc	2011-09-22 13:33:33.000000000 -0600
@@ -96,6 +96,44 @@
 {
 }
 
+void SimObject::initAll()
+{
+    SimObjectList::iterator i = simObjectList.begin();
+    SimObjectList::iterator end = simObjectList.end();
+    
+    for (; i != end; ++i) {
+        //cprintf("init_All for %s\n", (*i)->name());
+        SimObject *obj = *i;
+        obj->init();
+    }
+}
+
+void SimObject::regAllStats()
+{
+    SimObjectList::iterator i = simObjectList.begin();
+    SimObjectList::iterator end = simObjectList.end();
+    for (; i != end; ++i) {
+        (*i)->regStats();
+    }
+}
+
+void
+SimObject::startupAll()
+{
+    SimObjectList::iterator i = simObjectList.begin();
+    SimObjectList::iterator end = simObjectList.end();
+
+    for (; i != end; ++i) {
+        //cprintf("initStats for %s\n", (*i)->name());
+        (*i)->initState();
+    }
+
+    for (i = simObjectList.begin(); i != end; ++i) {
+        //cprintf("startup calls for %s\n", (*i)->name());
+        (*i)->startup();
+    }
+}
+
 //
 // no default statistics, so nothing to do in base implementation
 //
diff -r -x '*.pyc' -u sandbox-2/src/sim/sim_object.hh sandbox-1/src/sim/sim_object.hh
--- sandbox-2/src/sim/sim_object.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/sim_object.hh	2011-09-21 14:58:06.000000000 -0600
@@ -92,6 +92,10 @@
 
     virtual const std::string name() const { return params()->name; }
 
+    static void initAll();
+    static void regAllStats();
+    static void startupAll();
+
     // The following SimObject initialization methods are called from
     // the instantiate() method in src/python/m5/simulate.py.  See
     // that function for details on how/when these methods are
diff -r -x '*.pyc' -u sandbox-2/src/sim/simulate.cc sandbox-1/src/sim/simulate.cc
--- sandbox-2/src/sim/simulate.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/simulate.cc	2011-09-21 15:16:51.000000000 -0600
@@ -84,7 +84,12 @@
             if (se_event != limit_event) {
                 assert(limit_event->scheduled());
                 limit_event->squash();
+#if 0
                 hack_once("be nice to actually delete the event here");
+#endif
+            } else {
+                delete limit_event;
+                se_event = NULL;
             }
 
             return se_event;
diff -r -x '*.pyc' -u sandbox-2/src/sim/syscall_emul.cc sandbox-1/src/sim/syscall_emul.cc
--- sandbox-2/src/sim/syscall_emul.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/syscall_emul.cc	2011-09-21 15:30:17.000000000 -0600
@@ -75,6 +75,53 @@
         process->setSyscallReturn(tc, retval);
 }
 
+SyscallReturn
+fdmapFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+                  ThreadContext *tc)
+{
+    int index = 0;
+    int fd = process->getSyscallArg(tc, index);
+    int sim_fd = process->sim_fd( fd );
+//    printf("%s() sim_fd=%d %d\n",__func__,sim_fd, fd );
+    return sim_fd;
+}
+
+SyscallReturn
+mmap_devFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+                  ThreadContext *tc)
+{
+    int index = 0;
+    uint64_t  paddr = process->getSyscallArg(tc, index);
+    index = 1;
+    uint64_t  length = process->getSyscallArg(tc, index);
+
+    Addr start = process->mmap_end;
+
+    DPRINTF(SyscallVerbose, "syscall %s (#%d) vaddr=%#lx paddr=%#lx"
+        " length=%#lx\n", desc->name, callnum, start, paddr, length);
+
+    length = roundUp(length, TheISA::VMPageSize);
+    process->pTable->map(start, paddr, length );
+    process->mmap_end += length;
+
+    return start;
+}
+
+
+SyscallReturn
+virt2physFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
+                  ThreadContext *tc)
+{
+    int index = 0;
+    uint64_t  addr = process->getSyscallArg(tc, index);
+    DPRINTF(SyscallVerbose, "syscall %s (#%d) addr=%#lx\n",
+                                 desc->name, callnum, addr);
+
+    Addr paddr;
+    process->pTable->translate( addr, paddr );
+    return paddr;
+}
+
 
 SyscallReturn
 unimplementedFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
diff -r -x '*.pyc' -u sandbox-2/src/sim/syscall_emul.hh sandbox-1/src/sim/syscall_emul.hh
--- sandbox-2/src/sim/syscall_emul.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/syscall_emul.hh	2011-09-21 15:25:40.000000000 -0600
@@ -47,6 +47,7 @@
 #include <sys/stat.h>
 #include <sys/time.h>
 #include <sys/uio.h>
+#include <sys/resource.h>
 #include <fcntl.h>
 
 #include <cerrno>
@@ -182,6 +183,14 @@
 SyscallReturn unimplementedFunc(SyscallDesc *desc, int num,
                                 LiveProcess *p, ThreadContext *tc);
 
+SyscallReturn virt2physFunc(SyscallDesc *desc, int num,
+                                LiveProcess *p, ThreadContext *tc);
+SyscallReturn mmap_devFunc(SyscallDesc *desc, int num,
+                                LiveProcess *p, ThreadContext *tc);
+SyscallReturn fdmapFunc(SyscallDesc *desc, int num,
+                                LiveProcess *p, ThreadContext *tc);
+
+
 /// Handler for unimplemented syscalls that we never intend to
 /// implement (signal handling, etc.) and should not affect the correct
 /// behavior of the program.  Print a warning only if the appropriate
@@ -503,6 +512,7 @@
     }
 
     switch (req) {
+      case OS::TCGETS_:
       case OS::TIOCISATTY_:
       case OS::TIOCGETP_:
       case OS::TIOCSETP_:
@@ -526,6 +536,13 @@
 openFunc(SyscallDesc *desc, int callnum, LiveProcess *process,
          ThreadContext *tc)
 {
+#if THE_ISA == ALPHA_ISA 
+    int index = 0;
+    int fd= process->getSyscallArg(tc, index);
+    int tmp = process->alloc_fd(fd,"", 0, 0, 0);
+    return tmp; 
+#else 
+
     std::string path;
 
     int index = 0;
@@ -577,6 +594,7 @@
         return (fd == -1) ? -errno : process->alloc_fd(fd,path.c_str(),hostFlags,mode, false);
      }
 
+#endif
 }
 
 /// Target sysinfo() handler.
@@ -1070,6 +1088,35 @@
             rlp->rlim_max = htog(rlp->rlim_max);
             break;
 
+        case OS::TGT_RLIMIT_NOFILE:
+{
+            struct rlimit rlim;
+            getrlimit( RLIMIT_NOFILE, &rlim );
+            rlp->rlim_cur = rlim.rlim_cur;
+            rlp->rlim_max = rlim.rlim_max;
+}
+            break;
+
+        case OS::TGT_RLIMIT_NPROC:
+{
+            struct rlimit rlim;
+            getrlimit( RLIMIT_NPROC, &rlim );
+            rlp->rlim_cur = rlim.rlim_cur;
+            rlp->rlim_max = rlim.rlim_max;
+}
+            break;
+
+        case OS::TGT_RLIMIT_FSIZE:
+{
+            struct rlimit rlim;
+            getrlimit( RLIMIT_FSIZE, &rlim );
+            rlp->rlim_cur = rlim.rlim_cur;
+            rlp->rlim_max = rlim.rlim_max;
+}
+            break;
+
+
+
         default:
             std::cerr << "getrlimitFunc: unimplemented resource " << resource
                 << std::endl;
diff -r -x '*.pyc' -u sandbox-2/src/sim/system.cc sandbox-1/src/sim/system.cc
--- sandbox-2/src/sim/system.cc	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/system.cc	2011-09-21 15:20:16.000000000 -0600
@@ -271,7 +271,7 @@
     ++pagePtr;
     if (return_addr >= physmem->size())
         fatal("Out of memory, please increase size of physical memory.");
-    return return_addr;
+    return physmem->start() + return_addr;
 }
 
 Addr
diff -r -x '*.pyc' -u sandbox-2/src/sim/system.hh sandbox-1/src/sim/system.hh
--- sandbox-2/src/sim/system.hh	2011-09-20 09:21:53.000000000 -0600
+++ sandbox-1/src/sim/system.hh	2011-09-21 15:20:37.000000000 -0600
@@ -90,7 +90,7 @@
     std::vector<ThreadContext *> threadContexts;
     int _numContexts;
 
-    ThreadContext *getThreadContext(ThreadID tid)
+    virtual ThreadContext *getThreadContext(ThreadID tid)
     {
         return threadContexts[tid];
     }
@@ -279,7 +279,7 @@
 
 #else
 
-    Addr new_page();
+    virtual Addr new_page();
 
 #endif // FULL_SYSTEM
 
