/* 64- and 128- Bit Instructions */
/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency; */
/*              +Memory Latency;Throughput;Category  */
/*  By default, if an instruction has no character to its left, this means */
/*  that there is always a 2-cycle difference between that instruction have */
/*  only xmmister operands and that instruction having a memory operand. */
/*  Any instruction that has a memory operand as its second operand is a */
/*  LOAD. Instructions with an * in front of them means that the operands */
/*  must be inspected before you can tell which        */
/*  execution it will use and, therefore, its latency. */

*MOVAPD  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVAPD  xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
*MOVAPD  mem,xmm         MOV     double  FSTORE           2  0   1/1  FSTORE-2
*MOVAPS  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVAPS  xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
*MOVAPS  mem,xmm         MOV     double  FSTORE           2  0   1/1  FSTORE-2
*MOVDDUP xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDDUP xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
MOVDQ2Q  mm,xmm          MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQA  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQA  xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
*MOVDQU  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2  0   3/1  FADD-2
*MOVDQU  mem,xmm         MOV     vector  FSTORE           3  0   1/2  FSTORE-3
*MOVDQU  xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2

*MOVD    reg,xmm/mm      MOV     single  FADD/INT         3  0   1/1  FADD-3
*MOVD    xmm,mem         MOV     single  FSTORE           2  0   2/1  FLOAD-2
*MOVD    mem,xmm/mm      MOV     single  FSTORE           2  0   1/1  FSTORE-2
/* No throughput was given for these instructions in the 40546.pdf manual, pg 260 */
*MOVD    mm,mem          MOV     single  FADD/FMUL/FSTORE 4  0   3/1  FLOAD-4
/* No throughput was given in the 40546.pdf manual, p260, for this instruction */
/* JEC: how to read this in and occupy both int and fp queues??? */
*MOVD    xmm/mm,reg      MOV     double  ALU              6  0   1/1  ALU-6
  
*MOVQ    xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2   0   3/1   FADD-2
*MOVQ    mm,mm           MOV     single  FADD/FMUL        2   0   2/1   FADD-2
/* JEC: insn below had (1/1)/X in throughput for a while; there may be a question */
*MOVQ    mem,xmm/mm      MOV     single  FSTORE           2   0   1/1   FSTORE-2
*MOVQ    xmm,mem         MOV     single  FSTORE           2   0   2/1   FLOAD-2
*MOVQ    mm,mem          MOV     single  FADD/FMUL/FSTORE 4   0   3/1   FLOAD-4

MOVQ2DQ  xmm,mm          MOV     single  FADD/FMUL/FSTORE 2   0   3/1   FADD-2

*MOVUPS  xmm,xmm         MOV     single  FADD/FMUL/FSTORE 2   0   3/1   FADD-2
*MOVUPS  mem,xmm         MOV     vector  FSTORE           3   0   1/2   FSTORE-3
*MOVUPS  xmm,mem         MOV     single  FSTORE           2   0   2/1   FLOAD-2

CMPPD    xmm,xmm,imm     ADD     single  FADD       2    2    1/1   FADD-2
CMPPS    xmm,xmm,imm     ADD     single  FADD       2    2    1/1   FADD-2
CMPSD    xmm,xmm,imm     ADD     single  FADD       2    2    1/1   FADD-2
CMPSS    xmm,xmm,imm     ADD     single  FADD       2    2    1/1   FADD-2
MAXPD    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MAXPS    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MAXSD    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MAXSS    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MINPD    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MINPS    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MINSD    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
MINSS    xmm,xmm         ADD     single  FADD       2    2    1/1   FADD-2
PFCMPEQ  mm,mm           ADD     single  FADD       2    2    1/1   FADD-2
PFCMPGE  mm,mm           ADD     single  FADD       2    2    1/1   FADD-2
PFCMPGT  mm,mm           ADD     single  FADD       2    2    1/1   FADD-2
PFMAX    mm,mm           ADD     single  FADD       2    2    1/1   FADD-2
PFMIN    mm,mm           ADD     single  FADD       2    2    1/1   FADD-2
MOVLHPS  xmm,xmm         MOV     single  FADD/FMUL  2    0    2/1   FADD-2
MOVHLPS  xmm,xmm         MOV     single  FADD/FMUL  2    0    2/1   FADD-2
*MOVSD   xmm,xmm         MOV     single  FADD/FMUL  2    0    2/1   FADD-2
*MOVSD   xmm,mem         MOV     single  FADD       2    0    2/1   FLOAD-2
*MOVSD   mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVSHDUP xmm,xmm        MOV     single  FADD/FMUL  2    0    2/1   FADD-2
*MOVSHDUP xmm,mem        MOV     single  FSTORE     2    0    2/1   FLOAD-2
*MOVSLDUP xmm,xmm        MOV     single  FADD/FMUL  2    0    2/1   FADD-2
*MOVSLDUP xmm,mem        MOV     single  FSTORE     2    0    2/1   FLOAD-2
*MOVSS   xmm,xmm         MOV     single  FADD/FMUL  2    0    2/1   FADD-2
*MOVSS   mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVSS   xmm,mem         MOV     single  FSTORE     2    0    2/1   FLOAD-2
ANDNPD   xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDNPS   xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDPD    xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ANDPS    xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
EXTRQ    xmm,xmm/imm,imm ADD     single  FADD/FMUL  2    0    2/1   FADD-2
ORPD     xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
ORPS     xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PACKSSDW xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PACKSSWB xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PACKUSWB xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDB    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDD    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDQ    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDSB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDUSB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PADDUSW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAND     xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PANDN    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAVGB    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAVGW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PAVGUSB  mm,mm           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPEQB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPEQW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPEQD  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPGTB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPGTW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PCMPGTD  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMAXSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMAXUB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMINSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PMINUB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
POR      xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSHUFD   xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSHUFW   mm,mm           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSHUFHW  xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSHUFLW  xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSLLW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSLLD    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSLLQ    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSLLDQ   xmm,xmm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSRAW    xmm/mm,(xmm/mm)/imm ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRAD    xmm/mm,(xmm/mm)/imm ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLW    xmm/mm,(xmm/mm)/imm ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLD    xmm/mm,(xmm/mm)/imm ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLQ    xmm/mm,(xmm/mm)/imm ADD single  FADD/FMUL  2    2    2/1   FADD-2
PSRLDQ   xmm,imm         ADD     single  FADD/FMUL  2    0    2/1   FADD-2
PSUBB    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBW    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBD    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBQ    xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBSB   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBSW   xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBUSB  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSUBUSW  xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PSWAPD   mm,mm           ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKHBW xmm/mm,xmm/mm  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKHWD xmm/mm,xmm/mm  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKHDQ xmm/mm,xmm/mm  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKHQDQ xmm,xmm       ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLBW xmm/mm,xmm/mm  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLWD xmm/mm,xmm/mm  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLDQ xmm/mm,xmm/mm  ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PUNPCKLQDQ xmm,xmm       ADD     single  FADD/FMUL  2    2    2/1   FADD-2
PXOR     xmm/mm,xmm/mm   ADD     single  FADD/FMUL  2    2    2/1   FADD-2
SHUFPD   xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
SHUFPS   xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKHPD xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKHPS xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKLPD xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
UNPCKLPS xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
XORPD    xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2
XORPS    xmm,xmm         ADD     single  FADD/FMUL  2    2    2/1   FADD-2

MOVMSKPD reg,xmm         MOV     single  FADD       3    0    1/1   FADD-3
MOVMSKPS reg,xmm         MOV     single  FADD       3    0    1/1   FADD-3
PMOVMSKB reg,xmm/mm      ADD     single  FADD       3    0    1/1   FADD-3
COMISD   xmm,xmm         ADD     single  FADD       3    2    1/1   FADD-3
COMISS   xmm,xmm         ADD     single  FADD       3    2    1/1   FADD-3
PSADBW   xmm/mm,xmm/mm   ADD     single  FADD       3    2    1/1   FADD-3
UCOMISD  xmm,xmm         ADD     single  FADD       3    2    1/1   FADD-3
UCOMISS  xmm,xmm         ADD     single  FADD       3    2    1/1   FADD-3

ADDPD    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
ADDPS    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
ADDSD    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
ADDSS    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
ADDSUBPD xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
ADDSUBPS xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
HADDPD   xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
HADDPS   xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
HSUBPD   xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
HSUBPS   xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
PF2ID    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PF2IW    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PFACC    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PFADD    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PFNACC   mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PFPNACC  mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PFSUB    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PFSUBR   mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PI2FD    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
PI2FW    mm,mm           ADD     single  FADD       4    2    1/1   FADD-4
SUBPD    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
SUBPS    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
SUBSD    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4
SUBSS    xmm,xmm         ADD     single  FADD       4    2    1/1   FADD-4

*PINSRW  xmm,reg,imm     ADD     single  FADD/FMUL  4    0    1/1   FADD-4
*PINSRW  xmm,reg,imm     ADD     double  FADD/FMUL  9    0    1/1   FADD-9

*MOVHPD  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVHPD  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVHPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVHPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVLPD  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVLPD  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4
*MOVLPS  mem,xmm         MOV     single  FSTORE     2    0    1/1   FSTORE-2
*MOVLPS  xmm,mem         MOV     single  FADD/FMUL  4    0    2/1   FLOAD-4

/* The instruction latency is not given for these instructions in manual */
/* 40546.pdf, pg 261               */
MOVNTDQ  mem,xmm         MOV     double  FSTORE     99   0    1/99  FSTORE-X
MOVNTPD  mem,xmm         MOV     double  FSTORE     99   0    1/99  FSTORE-X
MOVNTPS  mem,xmm         MOV     double  FSTORE     99   0    1/99  FSTORE-X
MOVNTSD  mem,xmm         MOV     double  FSTORE     99   0    1/99  FSTORE-X
MOVNTSS  mem,xmm         MOV     double  FSTORE     99   0    1/99  FSTORE-X
MOVNTQ   mem,mm          MOV     single  FSTORE     99   0    1/99  FSTORE-X

LDDQU    xmm,mem         LOAD    single  FSTORE     2    0    2/1   FLOAD-2

CVTPS2PD xmm,xmm         CNVT    single  FSTORE     2    2    1/1   REGWRITE-2

CVTDQ2PD xmm,xmm         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTDQ2PS xmm,xmm         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTPI2PD xmm,mm          CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTPS2DQ xmm,xmm         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTTPS2DQ xmm,xmm        CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTPS2PI mm,xmm          CNVT    single  FSTORE     4    2    1/1   REGWRITE-4
CVTTPS2PI mm,xmm         CNVT    single  FSTORE     4    2    1/1   REGWRITE-4

PEXTRW   reg,xmm/mm,imm  ADD/WRITE double FADD&FSTORE 6   0   1/1   REGWRITE-6

CVTPD2DQ xmm,xmm    ADD/WRITE double  (FADD/FMUL)&FSTORE 7  2  1/1  REGWRITE-7
CVTTPD2DQ xmm,xmm   ADD/WRITE double  (FADD/FMUL)&FSTORE 7  2  1/1  REGWRITE-7
CVTPD2PI mm,xmm     ADD/WRITE double  (FADD/FMUL)&FSTORE 7  2  1/1  REGWRITE-7
CVTTPD2PI mm,xmm    ADD/WRITE double  (FADD/FMUL)&FSTORE 7  2  1/1  REGWRITE-7
CVTPD2PS xmm,xmm    ADD/WRITE double  (FADD/FMUL)&FSTORE 7  2  1/1  REGWRITE-7
CVTPI2PS xmm,mm     ADD/WRITE double  (FADD/FMUL)&FSTORE 7  2  1/1  REGWRITE-7
*CVTSS2SD xmm,xmm   ADD/WRITE vector  (FADD/FMUL)&FSTORE 7  0  1/1  REGWRITE-7
*CVTSS2SD xmm,mem   ADD/WRITE double  (FADD/FMUL)&FSTORE 7  0  1/1  REGWRITE-7

/* This is actually not quite correct. There's an 8-cycle that uses the vector */
/* path, no mem operand; There's a 9-cycle that uses the double path and has a */
/* memory operand.  Probably rarely occurs.              */
CVTSD2SS xmm,xmm   ADD/WRITE double  (FADD/FMUL)&FSTORE 8  1   1/1  REGWRITE-8
CVTSD2SI reg,xmm         ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTTSD2SI reg,xmm        ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTSS2SI reg,xmm         ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8
CVTTSS2SI reg,xmm        ADD/WRITE double  FADD&FSTORE 8   2   1/1  REGWRITE-8

*CVTSI2SD xmm,mem  ADD/WRITE double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-9
*CVTSI2SD xmm,reg  ADD/WRITE vector  (FADD/FMUL)&FSTORE 14   0  1/1  REGWRITE-14
*CVTSI2SS xmm,mem  ADD/WRITE double  (FADD/FMUL)&FSTORE 9    0  1/1  REGWRITE-9
*CVTSI2SS xmm,reg  ADD/WRITE vector  (FADD/FMUL)&FSTORE 14   0  1/1  REGWRITE-14

PFRCP    mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
PFRSQRT  mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
PMADDWD  xmm/mm,xmm/mm   FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHUW  xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHW   xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULLW   xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULUDQ  xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHRW  mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHUW  mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULHW   mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULLW   mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
PMULUDQ  mm,mm           FMUL    single  FMUL       3    2    1/1   FMUL-3
RCPPS    xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
RCPSS    xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
RSQRTPS  xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3
RSQRTSS  xmm,xmm         FMUL    single  FMUL       3    2    1/1   FMUL-3

MULPD    xmm,xmm         FMUL    single  FMUL       4    2    1/1   FMUL-4
MULPS    xmm,xmm         FMUL    single  FMUL       4    2    1/1   FMUL-4
MULSD    xmm,xmm         FMUL    single  FMUL       4    2    1/1   FMUL-4
MULSS    xmm,xmm         FMUL    single  FMUL       4    2    1/1   FMUL-4
PFMUL    mm,mm           FMUL    single  FMUL       4    2    1/1   FMUL-4
PFRCPIT1 mm,mm           FMUL    single  FMUL       4    2    1/1   FMUL-4
PFRCPIT2 mm,mm           FMUL    single  FMUL       4    2    1/1   FMUL-4
PFRSQIT1 mm,mm           FMUL    single  FMUL       4    2    1/1   FMUL-4

DIVSS    xmm,xmm         FDIV    single  FMUL       16   2    1/13  FDIV-16
DIVPS    xmm,xmm         FDIV    single  FMUL       18   2    1/15  FDIV-18
DIVPD    xmm,xmm         FDIV    single  FMUL       20   2    1/17  FDIV-20
DIVSD    xmm,xmm         FDIV    single  FMUL       20   2    1/17  FDIV-20

SQRTSS   xmm,xmm         SQRT    single  FMUL       19   2    1/18  FSQRT-19
SQRTPS   xmm,xmm         SQRT    single  FMUL       21   2    1/18  FSQRT-21
SQRTPD   xmm,xmm         SQRT    single  FMUL       27   2    1/24  FSQRT-27
SQRTSD   xmm,xmm         SQRT    single  FMUL       27   2    1/24  FSQRT-27

FRSTOR   reg             RESTORE vector  NONE      133  0    1/133  SPECIAL
FSAVE    reg             SAVE    vector  NONE      162  0    1/162  SPECIAL
FXRSTOR  reg             RESTORE vector  NONE      89   0    1/89  SPECIAL
FXSAVE   reg             SAVE    vector  NONE      63   0    1/63  SPECIAL
*INSERTQ xxm,xxm         INSERT  vector  FSTORE     5   0    1/5   SPECIAL
*INSERTQ xxm,xxm,imm,imm INSERT  vector  FSTORE     5   0    1/5   SPECIAL
LDMXCSR  mem             LOAD    vector  FSTORE    12   0    1/12  SPECIAL
MASKMOVDQU xmm,xmm       MOV     vector  FSTORE    99   0    1/99  SPECIAL
MASMOVQ  mm,mm           MOV     vector  FSTORE    99   0    1/99  SPECIAL
STMXCSR  none            STORE   vector  FSTORE    12   0    1/12  SPECIAL

/* General Purpose Instructions */

/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency;*/
/*              +Memory Latency;Throughput;Category       */
/*  By default, if an instruction has no character to its left, this means */
/*  that there is always a 2-cycle difference between that instruction have */
/*  only xmm register operands and that instruction having a memory operand.*/
/*  Any instruction that has a memory operand as its second operand is a LOAD.*/
/*  Instructions with an * in front of them means that the operands must be */
/*  inspected before you can tell which      */
/*  execution unit it will use, and therefore, its latency. */

/* I'm actually not sure of the throughput of any of these instructions. */
/* The instruction table doesn't have a throughput column, so I'm assuming */
/* that the throughput is 1/1, but this may need to be verified with */
/*  microbenchmarks. */

*ADC     reg,reg/imm     ADD     single  ALU        1    3    1/1   ALU-1 
//*ADC     mem,reg/imm     ADD     single  ALU        4    0    1/1   STORE-4
*ADD     reg,reg/imm     ADD     single  ALU        1    3    1/1   ALU-1 
//*ADD     mem,reg/imm     ADD     single  ALU        4    0    1/1   STORE-4
*AND     reg,reg/imm     ADD     single  ALU        1    3    1/1   ALU-1 
//*AND     mem,reg/imm     ADD     single  ALU        4    0    1/1   STORE-4
BSWAP    reg             SWAP    single  ALU        1    0    1/1   ALU-1 
*BT      reg,reg/imm     BCPY    single  ALU        1    0    1/1   ALU-1 
//*BT      mem,imm         BCPY    single  ALU        4    0    1/1   ALU-4 
//*BT      mem,reg         BCPY    vector  ALU        7    0    1/1   ALU-7 
*BTC     reg,reg/imm     BCPY    double  ALU        2    0    1/1   ALU-2 
//*BTC     mem,imm         BCPY    vector  ALU        5    0    1/1   ALU-5 
//*BTC     mem,reg         BCPY    vector  ALU        8    0    1/1   ALU-8 
*BTR     reg,reg/imm     BCPY    double  ALU        2    0    1/1   ALU-2 
//*BTR     mem,imm         BCPY    vector  ALU        5    0    1/1   ALU-5 
//*BTR     mem,reg         BCPY    vector  ALU        8    0    1/1   ALU-8 
*BTS     reg,reg/imm     BCPY    double  ALU        2    0    1/1   ALU-2 
//*BTS     mem,imm         BCPY    vector  ALU        5    0    1/1   ALU-5 
//*BTS     mem,reg         BCPY    vector  ALU        8    0    1/1   ALU-8 
CMP      reg,reg/imm     CMP     single  ALU        1    3    1/1   ALU-1 
DEC      reg             ADD     single  ALU        1    3    1/1   ALU-1 
INC      reg             ADD     single  ALU        1    3    1/1   ALU-1 
NEG      reg             ADD     single  ALU        1    3    1/1   ALU-1 
NOT      reg             ADD     single  ALU        1    3    1/1   ALU-1 
*OR      reg,reg/imm     ADD     single  ALU        1    3    1/1   ALU-1 
//*OR      mem,reg/imm     ADD     single  ALU        4    0    1/1   STORE-4
*RCL     reg,1           ROT     single  ALU        1    0    1/1   ALU-1 
*RCL     mem,1           ROT     single  ALU        4    0    1/1   ALU-4 
*RCL     reg,CL          ROT     vector  ALU        6    0    1/1   ALU-6 
*RCL     reg,imm         ROT     vector  ALU        7    0    1/1   ALU-7 
*RCL     mem,imm/CL      ROT     vector  ALU        7    0    1/1   ALU-7 
*RCR     reg,1           ROT     single  ALU        1    0    1/1   ALU-1 
*RCR     reg,CL          ROT     vector  ALU        4    0    1/1   ALU-4 
*RCR     mem,imm/CL      ROT     vector  ALU        6    0    1/1   ALU-6 
*RCR     mem,1           ROT     single  ALU        4    0    1/1   ALU-4 
*RCR     reg,imm         ROT     vector  ALU        5    0    1/1   ALU-5 
ROL      reg,1/CL/imm    ROT     single  ALU        1    3    1/1   ALU-1 
ROR      reg,1/CL/imm    ROT     single  ALU        1    3    1/1   ALU-1 
*SAL     reg,1/CL/imm    SHIFT   single  ALU        1    0    1/1   ALU-1 
//*SAL     mem,1/CL/imm    SHIFT   single  ALU        4    0    1/1   ALU-4 
*SAR     reg,1/CL/imm    SHIFT   single  ALU        1    0    1/1   ALU-1 
//*SAR     mem,1/CL/imm    SHIFT   single  ALU        4    0    1/1   ALU-4 
*SBB     reg,reg/imm     ADD     single  ALU        1    3    1/1   ALU-1 
//*SBB     mem,reg/imm     ADD     single  ALU        4    0    1/1   STORE-4
*SHL     reg,1/CL/imm    SHIFT   single  ALU        1    0    1/1   ALU-1 
//*SHL     mem,1/CL/imm    SHIFT   single  ALU        4    0    1/1   ALU-4 
*SHR     reg,1/CL/imm    SHIFT   single  ALU        1    0    1/1   ALU-1 
//*SHR     mem,1/CL/imm    SHIFT   single  ALU        4    0    1/1   ALU-4 
*SUB     reg,reg/imm     ADD     single  ALU        1    3    1/1   ALU-1 
//*SUB     mem,reg/imm     ADD     single  ALU        4    0    1/1   STORE-4
*TEST    reg,reg/imm     AND     single  ALU        1    0    1/1   ALU-1 
//*TEST    mem,reg/imm     AND     single  ALU        4    0    1/1   ALU-4 
*XOR     reg,reg/imm     XOR     single  ALU        1    3    1/1   ALU-1 
//*XOR     mem,reg/imm     XOR     single  ALU        4    0    1/1   STORE-4

CBW      reg,reg         CNVT    single  ALU       1    0    1/1   ALU-1
CWDE     reg,reg         CNVT    single  ALU       1    0    1/1   ALU-1
CDQE     reg,reg         CNVT    single  ALU       1    0    1/1   ALU-1
CWD      reg,reg         CNVT    single  ALU       1    0    1/1   ALU-1
CDQ      reg,reg         CNVT    single  ALU       1    0    1/1   ALU-1
CQO      reg,reg         CNVT    single  ALU       1    0    1/1   ALU-1
CLC      reg,reg         CLRF    single  ALU       1    0    1/1   ALU-1
CLD      reg,reg         CLRF    single  ALU       1    0    1/1   ALU-1
CMC      reg,reg         CLRF    single  ALU       1    0    1/1   ALU-1
/*  The cc in CMOVcc is a condition code.  These are in the instruction manual,*/
/*  24594.pdf, page 91. */
CMOVCC   reg,reg         CMOV    single  ALU       1    3    1/1   ALU-1
/*  The cc in J cc is a condition code.  These are in the instruction manual,  */
/*  24594.pdf, page 130. */

/* JCC      disp8/disp16/disp32/disp64/disp128 COND single  ALU       1    0    1/1   ALU-1 */
JCC      disp COND single  ALU       1    0    1/1   ALU-1 

*JMP     disp/reg        JMP     single  ALU       1    0    1/1   ALU-1
//*JMP   mem             JMP     single  ALU       4    0    1/1   ALU-4 

*MOV     reg,reg         MOV     single  ALU       1    0    1/1   ALU-1
/* JEC: I modified the latency of the MOV below from 3 to 1, since 3 implies cache */
//*MOV     reg,mem32/mem64    LOAD    single  ALU       3    0    1/1   LOAD-3
//*MOV     reg,mem8/mem16     LOAD    single  ALU       4    0    1/1   LOAD-4
//*MOV     mem,reg/imm     MOV     single  ALU       3    0    1/1   STORE-3
//*MOV     mem16,FS        MOV     double  ALU       4    0    1/1   STORE-4
//*MOV     mem32,SS/DS     MOV     double  ALU       4    0    1/1   STORE-4
//*MOV     reg32/reg64,FS     MOV     single  ALU       3    0    1/1   ALU-3
//*MOV     reg32,SS/DS     MOV     single  ALU       4    0    1/1   ALU-4
//*MOV     DS,reg32        MOV     vector  ALU       8    0    1/1   ALU-8
//*MOV     FS,reg32/reg64     MOV     vector  ALU       8    0    1/1   ALU-8
//*MOV     SS,reg32        MOV     vector  ALU      10    0    1/1   ALU-10
//*MOV     DS,mem32        MOV     vector  ALU      10    0    1/1   LOAD-10
//*MOV     FS,mem16        MOV     vector  ALU      10    0    1/1   LOAD-10
//*MOV     SS,mem32        MOV     vector  ALU      26    0    1/1   LOAD-26

MOVSX    reg,reg         MOV     single  ALU       1    3    1/1   ALU-1
MOVSXD   reg,reg         MOV     single  ALU       1    3    1/1   ALU-1
MOVZX    reg,reg         MOV     single  ALU       1    3    1/1   ALU-1
SAHF     none            FLAGS   single  ALU       1    0    1/1   ALU-1
/* The cc in SET is a condition code.  These are in the */
/* instruction manual, 24594.pdf page 225. */
SETCC    reg             SETF    single  ALU       1    2    1/1   ALU-1
STC      none            SETF    single  ALU       1    0    1/1   ALU-1

LZCNT    reg,reg         CNT     single  ALU2      2    3    1/1   ALU-2 
POPCNT   reg,reg         POP     single  ALU2      2    3    1/1   ALU-2 
*XADD    reg,reg         ADD     vectir  ALU       2    0    1/1   ALU-2 
//*XADD    mem,reg         ADD     vector  ALU       5    0    1/1   STORE-5

JCXZ     disp            COND    double  ALU       2    0    1/1   ALU-2
JECXZ    disp            COND    double  ALU       2    0    1/1   ALU-2
JRCXZ    disp            COND    double  ALU       2    0    1/1   ALU-2
STD      none            SETF    double  ALU       2    0    1/1   ALU-2
*XCHG    reg8,reg8       XCHG    vector  ALU       2    0    1/1   ALU-2
*XCHG    reg32/reg64,mem32/mem64 XCHG  double  ALU       15   0    1/1   LOAD-15
*XCHG    reg8,mem8       XCHG    vector  ALU       16   0    1/1   LOAD-16
*XCHG    reg16,mem16     XCHG    double  ALU       16   0    1/1   LOAD-16
*XCHG    mem32/mem64,reg32/reg64 XCHG  double  ALU       15   0    1/1   STORE-15
*XCHG    mem8,reg8       XCHG    vector  ALU       16   0    1/1   STORE-16
*XCHG    mem16,reg16     XCHG    double  ALU       16   0    1/1   STORE-16

/*  According to the docs on p. 225 of the 40546.pdf manual, multiplication */
/*  uses only the ALU0 execution unit.  Division doesn't need to use ALU0.  */
*IMUL    reg8            MUL     single  ALU0       3    0    1/1   ALU-3 
*IMUL    reg16           MUL     vector  ALU0       4    0    1/1   ALU-4 
*IMUL    reg16,reg16     MUL     single  ALU0       3    0    1/1   ALU-3 
*IMUL    reg16,imm16     MUL     vector  ALU0       4    2    1/1   ALU-4 
*IMUL    reg16,reg16,imm MUL     vector  ALU0       4    0    1/1   ALU-4 
//*IMUL    reg16,mem16,imm MUL     vector  ALU0       7    0    1/1   ALU-7 
*IMUL    reg32           MUL     double  ALU0       3    0    1/1   ALU-3 
*IMUL    reg32,reg32     MUL     single  ALU0       3    0    1/1   ALU-3 
*IMUL    reg32,imm32     MUL     single  ALU0       3    3    1/1   ALU-3 
*IMUL    reg32,reg32,imm MUL     single  ALU0       3    0    1/1   ALU-3 
*IMUL    reg64           MUL     double  ALU0       5    0    1/1   ALU-5 
*IMUL    reg64,reg64     MUL     single  ALU0       4    0    1/1   ALU-4 
*IMUL    reg64,imm64     MUL     single  ALU0       4    3    1/1   ALU-4 
*IMUL    reg64,reg64,imm MUL     single  ALU0       4    0    1/1   ALU-4 
//*IMUL    mem8            MUL     single  ALU0       6    0    1/1   ALU-6 
//*IMUL    mem32           MUL     double  ALU0       6    0    1/1   ALU-6 
//*IMUL    reg32,mem32,imm MUL     vector  ALU0       7    0    1/1   ALU-7 
//*IMUL    mem16           MUL     vector  ALU0       7    0    1/1   ALU-7 
//*IMUL    reg64,mem64,imm MUL     vector  ALU0       8    0    1/1   ALU-8 
//*IMUL    mem64           MUL     double  ALU0       8    0    1/1   ALU-8 
*MUL     reg8            MUL     single  ALU0       3    0    1/1   ALU-3 
*MUL     reg16           MUL     vector  ALU0       4    0    1/1   ALU-4 
*MUL     reg32           MUL     double  ALU0       3    0    1/1   ALU-3 
*MUL     reg64           MUL     double  ALU0       5    0    1/1   ALU-5 
//*MUL     mem8            MUL     single  ALU0       6    0    1/1   ALU-6 
//*MUL     mem16           MUL     vector  ALU0       7    0    1/1   ALU-7 
//*MUL     mem32           MUL     double  ALU0       6    0    1/1   ALU-6 
//*MUL     mem64           MUL     double  ALU0       8    0    1/1   ALU-8 

*CMPXCHG reg,reg         CMP     vector  ALU        3    0    1/1   ALU-3 
*CMPXCHG mem16/mem32/mem64,reg16/reg32/reg64 CMP vector ALU     5    0    1/1   ALU-5 
*CMPXCHG mem8,reg8       CMP     vector  ALU        6    0    1/1   ALU-6 

*PUSH    mem             STACK   double  ALU        3    0    1/1   ALU-3 
*PUSH    reg/imm         STACK   single  ALU        3    0    1/1   ALU-3
*PUSH    CS/DS/ES/FS/GS/SS STACK double  ALU        3    0    1/1   ALU-3
*POP     mem             STACK   vector  ALU        3    0    1/1   ALU-3 
*POP     reg32/reg64        STACK   single  ALU        3    0    1/1   ALU-3
*POP     SS              STACK   vector  ALU        26   0    1/1   ALU-26
*POP     reg16           STACK   double  ALU        4    0    1/1   ALU-4
*POP     DS/ES/FS/GS     STACK   vector  ALU        10   0    1/1   ALU-10

*CALL    disp/reg        STACK   double  ALU        3    0    1/1   ALU-3
//*CALL    mem             STACK   vector  ALU        4    0    1/1   ALU-4 
LAHF     none            LDF     vector  ALU        3    0    1/1   ALU-3

BSF      reg,reg         SCAN    vector  ALU        4    3    1/1   ALU-4 
BSR      reg,reg         SCAN    vector  ALU        4    3    1/1   ALU-4 
*SHLD    reg,reg,CL/imm  SHIFT   vector  ALU        4    0    1/1   ALU-4 
//*SHLD    mem,reg,CL/imm  SHIFT   vector  ALU        6    0    1/1   ALU-6 
*SHRD    reg,reg,CL/imm  SHIFT   vector  ALU        4    0    1/1   ALU-4 
//*SHRD    mem,reg,CL/imm  SHIFT   vector  ALU        6    0    1/1   ALU-6 

*RET     none            STACK   single  ALU       4    0    1/1   ALU-4
*RET     imm16           STACK   double  ALU       4    0    1/1   ALU-4

SCAS     reg8/reg16/reg32/reg64   CMP     vector  ALU       4    0    1/1   ALU-4
SCASB    reg8            CMP     vector  ALU       4    0    1/1   ALU-4
SCASW    reg16           CMP     vector  ALU       4    0    1/1   ALU-4
SCASD    reg32           CMP     vector  ALU       4    0    1/1   ALU-4
SCASQ    reg64           CMP     vector  ALU       4    0    1/1   ALU-4

XLAT     none            CPY     vector  ALU       5    0    1/1   ALU-5
XLATB    none            CPY     vector  ALU       5    0    1/1   ALU-5

BOUND    reg,mem         ADD     vector  ALU       6    0    1/1   ALU-6 
CMPS     reg8/reg16/reg32/reg64   CMP     vector  ALU       6    0    1/1   ALU-6 
CMPSB    reg8            CMP     vector  ALU       6    0    1/1   ALU-6 
CMPSW    reg16           CMP     vector  ALU       6    0    1/1   ALU-6 
CMPSD    reg32           CMP     vector  ALU       6    0    1/1   ALU-6 
CMPSQ    reg64           CMP     vector  ALU       6    0    1/1   ALU-6 

POPA     reg16,mem16     STACK   vector  ALU       6    0    1/1   ALU-6
POPAD    reg32,mem32     STACK   vector  ALU       6    0    1/1   ALU-6
PUSHA    mem16,reg16     STACK   vector  ALU       6    0    1/1   ALU-6
PUSHAD   mem32,reg32     STACK   vector  ALU       6    0    1/1   ALU-6

*LOOPCC  pm64            COND    vector  ALU       7    0    1/1   ALU-7 
*LOOPCC  pm32            COND    vector  ALU       8    0    1/1   ALU-8 

CMPXCHG8B mem64          CMP     vector  ALU       10   0    1/1   ALU-10
CMPXCHG16B mem128        CMP     vector  ALU       11   0    1/1   ALU-11

POPF     reg16,mem       STACK   vector  ALU       15   0    1/1   ALU-15
POPFD    reg32,mem       STACK   vector  ALU       15   0    1/1   ALU-15
POPFQ    reg64,mem       STACK   vector  ALU       15   0    1/1   ALU-15

/* For division, we have a problem.  The latency is dependent on the size  */
/* of the operand. We probably need to collect stats on this from the      */
/* application.  With any luck, these don't occur very often.  The latency */
/* ranges between 17 and 72 cycles.  See page 142 of the Software          */
/* Optimization Manual (40546.pdf) for the details. */  
/* JEC: This still needs some work but we are guessing for now */
DIV      reg16,mem16      DIV     vector  ALU      24  0    1/21  ALU   
DIV      reg32,mem32      DIV     vector  ALU      40  0    1/37  ALU   
DIV      reg64,mem64      DIV     vector  ALU      72  0    1/69  ALU   
IDIV     reg16,mem16      DIV     vector  ALU      31  0    1/28  ALU   
IDIV     reg32,mem32      DIV     vector  ALU      47  0    1/44  ALU   
IDIV     reg64,mem64      DIV     vector  ALU      79  0    1/76  ALU   

/*  For the PUSHF, PUSHFD, and PUSHFQ instructions, there is no latency */
/*  listed (guess: same as regular) */
PUSHF    mem16,reg       STACK   vector  ALU       3   0    1/1  ALU  
PUSHFD   mem32,reg       STACK   vector  ALU       3   0    1/1  ALU  
PUSHFQ   mem64,reg       STACK   vector  ALU       3   0    1/1  ALU  

/*  Mem addresses with a base and an index only have latency 1; mem   */
/*  addresses that have a base, index, and scale have a latency of 2. */
LEA      reg32/reg64,mem    LOAD    single  AGU       1    0    1/1   LOAD-1
LEA      reg16,mem       LOAD    vector  AGU       3    0    1/1   LOAD-3

LODS     reg,mem8/mem16/mem32/mem64 LOADS vector  ALU       5    0    1/1   LOAD-5
LODSB    reg,mem8        LOADS   vector  ALU       5    0    1/1   LOAD-5
LODSW    reg,mem16       LOADS   vector  ALU       5    0    1/1   LOAD-5
LODSD    reg,mem32       LOADS   vector  ALU       4    0    1/1   LOAD-4
/*  I'm not sure about the latency on the LOADSQ instruction.  This is */
/*  in the instruction description (24594.pdf,pg 149), but is not in */
/*  40546.pdf (page 244).  I'm guessing a latency of 5, */
/*  but I think this will need to be micro-benchmarked. */
LODSQ    reg,mem64       LOADS   vector  ALU       5    0    1/1   LOAD-5

STOS     mem8/mem16/mem32/mem64,reg STS   vector  ALU       4    0    1/1   STORE-4
STOSB    mem8,reg        STS     vector  ALU       4    0    1/1   STORE-4
STOSW    mem16,reg       STS     vector  ALU       4    0    1/1   STORE-4
STOSD    mem32,reg       STS     vector  ALU       4    0    1/1   STORE-4
STOSQ    mem64,reg       STS     vector  ALU       4    0    1/1   STORE-4

MOVS     mem8/mem16/mem32/mem64   MOV     vector  ALU       5    0    1/1   STORE-5
MOVSB    mem8            MOV     vector  ALU       5    0    1/1   STORE-5
MOVSW    mem16           MOV     vector  ALU       5    0    1/1   STORE-5
MOVSD    mem32           MOV     vector  ALU       5    0    1/1   STORE-5
MOVSQ    mem64           MOV     vector  ALU       5    0    1/1   STORE-5

/* The MOVNTI instruction's latency is variable. It uses the processor's */
/* write-combining resources. Should microbenchmark to determine latency.*/
MOVNTI   mem,reg         MOV     single  ALU        99   0    1/1   STORE-X
	
*CPUID   fn0x0           SPEC    vector  ALU        41   0    1/1   SPECIAL
*CPUID   fn0x1           SPEC    vector  ALU        127  0    1/1   SPECIAL
*CPUID   fn0x2           SPEC    vector  ALU        37   0    1/1   SPECIAL
DAA      reg,reg         SPEC    vector  ALU        7    0    1/1   SPECIAL
DAS      reg,reg         SPEC    vector  ALU        7    0    1/1   SPECIAL
*ENTER   imm32,0         STACK   vector  ALU        14   0    1/1   SPECIAL
*ENTER   imm32,1         STACK   vector  ALU        17   0    1/1   SPECIAL
*ENTER   imm32,2         STACK   vector  ALU        19   0    1/1   SPECIAL
LEAVE    reg,mem         STACK   double  ALU        3    0    1/1   SPECIAL
NOP      none            SPEC    none    none       1    0    1/1   SPECIAL
RDTSC    none            SPEC    none    none       1    0    1/1   SPECIAL
SYSCALL  none            SPEC    none    none       1    0    1/1   SPECIAL

FWAIT	none		WAIT	single	none	    0    0    1/1   SPECIAL
FNSTCW	none		STORE	vector	none	    2    0    1/1   SPECIAL
FLDCW	none		LOAD	vector	FSTORE	    12	 0    1/1   SPECIAL		    
