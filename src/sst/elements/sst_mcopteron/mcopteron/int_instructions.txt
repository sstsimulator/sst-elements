/* General Purpose Instructions */

/*  Instruction;Operands;Operation;Decode Unit;Execution Unit;Base Latency;+Memory Latency;Throughput;Category       */
/*  By default, if an instruction has no character to its left, this means that there is always a 2-cycle difference */
/*  between that instruction have only xmm register operands and that instruction having a memory operand.          */
/*  Any instruction that has a memory operand as its second operand is a LOAD.                                       */
/*  Instructions with an * in front of them means that the operands must be inspected before you can tell which      */
/*  execution unit it will use, and therefore, its latency.							     */

/*  I'm actually not sure of the throughput of any of these instructions.  The instruction table doesn't have a      */
/*  throughput column, so I'm assuming that the throughput is 1/1, but this may need to be verified with             */
/*  microbenchmarks.       											     */
		

*ADC	reg,reg/imm		ADD	single	ALU	1	3	1/1	ALU-1	
*ADD	reg,reg/imm		ADD     single  ALU     1       3       1/1    	ALU-1 
*AND	reg,reg/imm    		ADD     single  ALU     1       3       1/1    	ALU-1 
BSWAP   reg           	  	SWAP    single  ALU     1       0       1/1     ALU-1
*BT     reg,reg/imm    	 	BCPY    single  ALU	1       0       1/1    	ALU-1 
CMP     reg,reg/imm             CMP     single  ALU     1       3       1/1     ALU-1
DEC     reg                     ADD     single  ALU     1       3       1/1     ALU-1
INC     reg                     ADD     single  ALU     1       3       1/1     ALU-1
NEG     reg                     ADD     single  ALU     1       3       1/1     ALU-1
NOT     reg                     ADD     single  ALU     1       3       1/1     ALU-1
*OR     reg,reg/imm             ADD     single  ALU     1       3       1/1     ALU-1
*RCL    reg,1                   ROT     single  ALU     1       0       1/1     ALU-1
*RCR    reg,1                   ROT     single  ALU     1       0       1/1     ALU-1
ROL	reg,1/CL/imm		ROT	single	ALU	1	3	1/1	ALU-1
ROR	reg,1/CL/imm		ROT	single	ALU	1	3	1/1	ALU-1
*SAL	reg,1/CL/imm		SHIFT	single	ALU	1	0	1/1	ALU-1
*SAR    reg,1/CL/imm            SHIFT   single  ALU     1       0       1/1     ALU-1
*SBB    reg,reg/imm             ADD     single  ALU     1       3       1/1     ALU-1
*SHL    reg,1/CL/imm            SHIFT   single  ALU     1       0       1/1     ALU-1
*SHR    reg,1/CL/imm            SHIFT   single  ALU     1       0       1/1     ALU-1
*SUB	reg,reg/imm		ADD	single	ALU	1	3	1/1	ALU-1
*TEST	reg,reg/imm		AND	single	ALU	1	0	1/1	ALU-1
*XOR	reg,reg/imm		XOR	single	ALU	1	3	1/1	ALU-1


CBW	none          	 	CNVT    single  NONE    1       0       1/1    	NONE-1 
CWDE    none           	 	CNVT    single  NONE    1       0       1/1    	NONE-1 
CDQE    none               	CNVT    single  NONE    1       0       1/1    	NONE-1
CWD     none                	CNVT    single  NONE    1       0       1/1    	NONE-1 
CDQ     none                	CNVT    single  NONE    1       0       1/1    	NONE-1 
CQO     none                	CNVT    single  NONE    1       0       1/1    	NONE-1 
CLC     none                	CLRF    single  NONE    1       0       1/1    	NONE-1 
CLD     none                	CLRF    single  NONE    1       0       1/1    	NONE-1 
CMC     none                	CLRF    single  NONE    1       0       1/1    	NONE-1 
/*  The cc in CMOVcc is a condition code.  These are in the instruction manual,*/
/*  24594.pdf, page 91.                             
CMOVcc	reg,reg			CMOV	single	NONE	1	3	1/1	NONE-1
/*  The cc in J cc is a condition code.  These are in the instruction manual,  */
/*  24594.pdf, page 130.                                                       */
Jcc	disp			COND	single	NONE	1	0	1/1	NONE-1

JMP	disp/reg		JMP	single	NONE	1	0	1/1	NONE-1

*MOV	reg,reg			MOV	single	NONE	1	0	1/1	NONE-1
MOVSX	reg,reg			MOV	single	NONE	1	3	1/1	NONE-1
MOVSXD	reg,reg			MOV	single	NONE	1	3	1/1	NONE-1
MOVSZX  reg,reg         	MOV     single  NONE    1       3       1/1     NONE-1
SAHF	none			FLAGS	single	NONE	1	0	1/1	NONE-1
/*  The cc in SET is a condition code.  These are in the instruction manual, 24594.pdf  */
/*  page 225.                                                                           */
SETcc	reg			SETF	single	NONE	1	2	1/1	NONE-1
STC	none			SETF	single	NONE	1	0	1/1	NONE-1


*BTC    reg,reg/imm     BCPY    double  ALU     2       0       1/1    	ALU-2 
*BTR    reg,reg/imm     BCPY    double  ALU     2       0       1/1    	ALU-2 
*BTS    reg,reg/imm     BCPY    double  ALU     2       0       1/1    	ALU-2 
LZCNT	reg,reg		CNT	single	ALU2	2	3	1/1	ALU-2
POPCNT	reg,reg		POP	single	ALU2	2	3	1/1	ALU-2
*XADD	reg,reg		ADD	vectir	ALU	2	0	1/1	ALU-2


JCXZ    disp            COND    double  NONE    2       0       1/1     NONE-2
JECXZ   disp            COND    double  NONE    2       0       1/1     NONE-2
JRCXZ   disp            COND    double  NONE    2       0       1/1     NONE-2
STD	none		SETF	double	NONE	2	0	1/1	NONE-2
*XCHG	reg8,reg8	XCHG	vector	NONE	2	0	1/1	NONE-2


/*  According to the documentation on page 225 of the 40546.pdf manual, multiplication    */
/*  uses only the ALU0 execution unit.  Division doesn't need to use ALU0.                */
*IMUL   	reg8            MUL     single  ALU0    3       0       1/1     ALU-3
*MUL    	reg8            MUL     single  ALU0    3       0       1/1     ALU-3
*IMUL  	 	reg16,reg16     MUL     single  ALU0    3       0       1/1     ALU-3
*IMUL   	reg32           MUL     double  ALU0    3       0       1/1     ALU-3
*MUL    	reg32           MUL     double  ALU0    3       0       1/1     ALU-3
*IMUL   	reg32,reg32     MUL     single  ALU0    3       0       1/1     ALU-3
*IMUL   	reg32,imm32     MUL     single  ALU0    3       3       1/1     ALU-3
*IMUL   	reg32,reg32,imm MUL     single  ALU0    3       0       1/1     ALU-3
*CMPXCHG        reg,reg         CMP     vector  ALU	3       0       1/1     ALU-3


*PUSH           mem                     PUSH    double  AGU     3       0       1/1     AGU-3
*POP            mem                     POP     vector  AGU     3       0       1/1     AGU-3


*CALL           disp/reg    	        JMP     double  NONE    3       0       1/1     NONE-3
LAHF           	none                    LDF     vector  NONE    3       0       1/1     NONE-3
*MOV            reg32/64,FS             MOV     single  NONE    3       0       1/1     NONE-3
*POP            reg32/64                POP     single  NONE    3       0       1/1     NONE-3
*PUSH           reg/imm                 PUSH    single  NONE    3       0       1/1     NONE-3
*PUSH           CS/DS/ES/FS/GS/SS       PUSH    double  NONE    3       0       1/1     NONE-3


*BT     mem,imm         BCPY    single  ALU     4       0       1/1    	ALU-4 
BSF     reg,reg         SCAN    vector  ALU     4       3       1/1    	ALU-4 
BSR     reg,reg         SCAN    vector  ALU     4       3       1/1    	ALU-4
*RCL	mem,1		ROT	single	ALU	4	0	1/1	ALU-4
*RCR	reg,CL		ROT	vector	ALU	4	0	1/1	ALU-4
*RCR	mem,1		ROT	single	ALU	4	0	1/1	ALU-4
*SAL    mem,1/CL/imm    SHIFT   single  ALU     4       0       1/1     ALU-4
*SAR    mem,1/CL/imm    SHIFT   single  ALU     4       0       1/1     ALU-4
*SHL    mem,1/CL/imm    SHIFT   single  ALU     4       0       1/1     ALU-4
*SHLD	reg,reg,CL/imm	SHIFT	vector	ALU	4	0	1/1	ALU-4
*SHR    mem,1/CL/imm    SHIFT   single  ALU     4       0       1/1     ALU-4
*SHRD   reg,reg,CL/imm  SHIFT   vector  ALU     4       0       1/1     ALU-4
*TEST	mem,reg/imm	AND	single	ALU	4	0	1/1	ALU-4


*JMP    mem             JMP     single  AGU     4       0       1/1     AGU-4
*CALL   mem	        JMP     vector  AGU     4       0       1/1     AGU-4


*RET    none            RET     single  NONE    4       0       1/1     NONE-4
*RET    imm16           RET     double  NONE    4       0       1/1     NONE-4


*MOV    reg32,SS/DS     MOV     single  NONE    4       0       1/1     NONE-4
*POP    reg16           MOV     double  NONE    4       0       1/1     NONE-4
SCAS	none		CMP	vector	NONE	4	0	1/1	NONE-4
SCASB   none            CMP     vector  NONE    4       0       1/1     NONE-4
SCASW   none            CMP     vector  NONE    4       0       1/1     NONE-4
SCASD   none            CMP     vector  NONE    4       0       1/1     NONE-4
SCASQ   none            CMP     vector  NONE    4       0       1/1     NONE-4


*IMUL	reg16		MUL	vector	ALU0	4	0	1/1	ALU-4
*MUL    reg16           MUL     vector  ALU0    4       0       1/1     ALU-4
*IMUL	reg16,imm16	MUL	vector	ALU0	4	2	1/1	ALU-4
*IMUL	reg16,reg16,imm	MUL	vector	ALU0	4	0	1/1	ALU-4
*IMUL	reg64,imm64	MUL	single	ALU0	4	3	1/1	ALU-4
*IMUL	reg64,reg64	MUL	single	ALU0	4	0	1/1	ALU-4
*IMUL	reg64,reg64,imm	MUL	single	ALU0	4	0	1/1	ALU-4


*BTC            mem,imm			BCPY    vector  ALU     5       0       1/1    	ALU-5 
*BTR            mem,imm         	BCPY    vector  ALU     5       0       1/1    	ALU-5 
*BTS            mem,imm         	BCPY    vector  ALU     5       0       1/1    	ALU-5
*CMPXCHG        mem16/32/64,reg16/32/64 CMP     vector  ALU     5       0       1/1     ALU-5
*RCR		reg,imm			ROT	vector	ALU	5	0	1/1	ALU-5
*IMUL		reg64			MUL	double	ALU0	5	0	1/1	ALU-5
*MUL    	reg64           	MUL     double  ALU0    5       0       1/1     ALU-5


XLAT	none	CPY	vector	NONE	5	0	1/1	NONE-5
XLATB	none	CPY	vector	NONE	5	0	1/1	NONE-5


BOUND   	reg,mem         ADD     vector  ALU     6       0       1/1    	ALU-6 
CMPS           	none            CMP     vector  ALU     6       0       1/1    	ALU-6 
CMPSB           none            CMP     vector  ALU     6       0       1/1    	ALU-6 
CMPSW           none            CMP     vector  ALU     6       0       1/1    	ALU-6 
CMPSD           none            CMP     vector  ALU     6       0       1/1    	ALU-6 
CMPSQ           none            CMP     vector  ALU     6       0       1/1    	ALU-6 
*CMPXCHG        mem8,reg8       CMP     vector  ALU     6       0       1/1    	ALU-6 
*RCL		reg,CL		ROT	vector	ALU	6	0	1/1	ALU-6
*RCR		mem,imm/CL	ROT	vector	ALU	6	0	1/1	ALU-6
*IMUL		mem8		MUL	single	ALU0	6	0	1/1	ALU-6
*MUL    	mem8            MUL     single  ALU0    6       0       1/1     ALU-6
*IMUL		mem32		MUL	double	ALU0	6	0	1/1	ALU-6
*MUL    	mem32           MUL     double  ALU0    6       0       1/1     ALU-6
*SHLD		mem,reg,CL/imm	SHIFT	vector	ALU	6	0	1/1	ALU-6
*SHRD           mem,reg,CL/imm  SHIFT   vector  ALU     6       0       1/1     ALU-6


POPA	none	POP     vector  NONE    6       0       1/1     NONE-6
POPAD   none    POP     vector  NONE    6       0       1/1     NONE-6
PUSHA   none    PUSH    vector  NONE    6       0       1/1     NONE-6
PUSHAD  none    PUSH    vector  NONE    6       0       1/1     NONE-6


*BT     mem,reg         BCPY    vector  ALU     7       0       1/1    	ALU-7 
*LOOPcc	pm64		COND	vector	ALU	7	0	1/1	ALU-7
*RCL	reg,imm		ROT	vector	ALU	7	0	1/1	ALU-7
*RCL	mem,imm/CL	ROT	vector	ALU	7	0	1/1	ALU-7
*IMUL	reg16,mem16,imm	MUL	vector	ALU0	7	0	1/1	ALU-7
*IMUL	reg32,mem32,imm	MUL	vector	ALU0	7	0	1/1	ALU-7
*IMUL	mem16		MUL	vector	ALU0	7	0	1/1	ALU-7
*MUL    mem16           MUL     vector  ALU0    7       0       1/1     ALU-7


*BTC    mem,reg         BCPY    vector  ALU     8       0       1/1    	ALU-8 
*BTR    mem,reg         BCPY    vector  ALU     8       0       1/1    	ALU-8 
*BTS    mem,reg         BCPY    vector  ALU     8       0       1/1    	ALU-8 
*LOOPcc	pm32		COND	vector	ALU	8	0	1/1	ALU-8
*IMUL	reg64,mem64,imm	MUL	vector	ALU0	8	0	1/1	ALU-8
*IMUL	mem64		MUL	double	ALU0	8	0	1/1	ALU-8
*MUL    mem64           MUL     double  ALU0    8       0       1/1     ALU-8


*MOV    DS,reg32        MOV     vector  NONE    8       0       1/1     NONE-8
*MOV    FS,reg32/64     MOV     vector  NONE    8       0       1/1     NONE-8


CMPXCHG8B       mem64   CMP     vector  ALU     10      0       1/1    	ALU-10 


*MOV	SS,reg32	MOV	vector	NONE	10	0	1/1	NONE-10
*POP	DS/ES/FS/GS	POP	vector	NONE	10	0	1/1	NONE-10


CMPXCHG16B      mem128  CMP     vector  ALU     11      0       1/1    	ALU-11 


POPF	none	POP	vector	NONE	15	0	1/1	NONE-15
POPFD   none    POP     vector  NONE    15      0       1/1     NONE-15
POPFQ   none    POP     vector  NONE    15      0       1/1     NONE-15


*POP	SS	POP	vector	NONE	26	0	1/1	NONE-26
	

/*  For division, we have a problem.  The latency is dependent on the size of the operand. */
/*  We probably need to collect stats on this from the application.  With any luck, these  */
/*  don't occur very often.  The latency ranges between 17 and 72 cycles.  See page 142    */
/*  of the Software Optimization Manual (40546.pdf) for the details.                       */  
DIV	reg,mem		DIV	vector	ALU	X	0	X	ALU	
IDIV	reg,mem		DIV	vector	ALU	X	0	X	ALU	


/*  For the PUSHF, PUSHFD, and PUSHFQ instructions, there is no latency listed.            */
PUSHF	none	PUSH	vector	NONE	X	0	X	NONE
PUSHFD	none	PUSH    vector  NONE    X       0       X       NONE
PUSHFQ	none	PUSH    vector  NONE    X       0       X      	NONE 


/*  Mem addresses with a base and an index only have latency 1; mem addresses that have a  */
/*  base, index, and scale have a latnecy of 2.                                            */
LEA	reg32/64,mem	LOAD	single	AGU	1	0	1/1	LOAD-1


LEA     reg16,mem       LOAD    vector  AGU     3       0       1/1     LOAD-3
*MOV	reg,mem32/64	LOAD	single	AGU	3	0	1/1	LOAD-3



LODSD	none            LOADS   vector  NONE    4       0       1/1     LOAD-4
*MOV	reg,mem8/16	LOAD	single	AGU	4	0	1/1	LOAD-4



LODS	none	LOADS	vector	NONE	5	0	1/1	LOAD-5
LODSW	none	LOADS	vector	NONE	5	0	1/1	LOAD-5

/*  I'm not sure about the latency on the LOADSQ instruction.  This is in the instruction   */
/*  description (24594.pdf,pg 149), but is not in 40546.pdf (page 244).  I'm guessing a     */
/*  latency of 5, but I think this will need to be micro-benchmarked.                       */
LODSQ	none	LOADS	vector	NONE	5	0	1/1	LOAD-5 


*MOV	DS,mem32	MOV	vector	AGU	10	0	1/1	LOAD-10
*MOV	FS,mem16	MOV	vector	AGU	10	0	1/1	LOAD-10


*XCHG	reg32/64,mem32/64	XCHG	double	AGU	15	0	1/1	LOAD-15


*XCHG	reg8,mem8	XCHG	vector	AGU	16	0	1/1	LOAD-16
*XCHG	reg16,mem16	XCHG	double	AGU	16	0	1/1	LOAD-16


*MOV	SS,mem32	MOV	vector	AGU	26	0	1/1	LOAD-26


*MOV	mem,reg/imm	MOV	single	AGU	3	0	1/1	STORE-3


*ADC	mem,reg/imm	ADD	single	ALU	4	0	1/1	STORE-4
*ADD	mem,reg/imm     ADD     single  ALU     4       0       1/1     STORE-4
*AND	mem,reg/imm     ADD     single  ALU     4       0       1/1     STORE-4
*OR	mem,reg/imm	ADD	single	ALU	4	0	1/1	STORE-4
*MOV    mem16,FS        MOV     double  AGU     4       0       1/1     STORE-4
*MOV    mem32,SS/DS     MOV     double  AGU     4       0       1/1     STORE-4
*SBB	mem,reg/imm	ADD	single	ALU	4	0	1/1	STORE-4
STOS	none		STS	vector	NONE	4	0	1/1	STORE-4
STOSB   none            STS     vector  NONE    4       0       1/1     STORE-4
STOSW   none            STS     vector  NONE    4       0       1/1     STORE-4
STOSD   none            STS     vector  NONE    4       0       1/1     STORE-4
STOSQ   none            STS     vector  NONE    4       0       1/1     STORE-4
*SUB	mem,reg/imm	ADD	single	ALU	4	0	1/1	STORE-4
*XOR	mem,reg/imm	XOR	single	ALU	4	0	1/1	STORE-4


MOVS	none	MOV	vector	NONE	5	0	1/1	STORE-5
MOVSB	none	MOV     vector  NONE    5       0       1/1     STORE-5
MOVSW	none	MOV     vector  NONE    5       0       1/1     STORE-5
MOVSD	none	MOV     vector  NONE    5       0       1/1     STORE-5
MOVSQ	none	MOV     vector  NONE    5       0       1/1     STORE-5
*XADD	mem,reg	ADD	vector	ALU	5	0	1/1	STORE-5


*XCHG	mem32/64,reg32/64	XCHG	double	AGU	15	0	1/1	STORE-15


*XCHG	mem8,reg8	XCHG	vector	AGU	16	0	1/1	STORE-16
*XCHG	mem16,reg16	XCHG	double	AGU	16	0	1/1	STORE-16


/*  The MOVNTI instruction's latency may be variable.  It uses the processor's    */
/*  write-combining resources.  Should microbenchmark to determine latency.       */
MOVNTI	mem,reg		MOV	single	AGU	X	0	1/1	STORE-X

	
*CPUID	fn0x0	SPEC	vector	ALU	41	0	1/1	SPECIAL
*CPUID	fn0x1	SPEC	vector	ALU	127	0	1/1	SPECIAL
*CPUID	fn0x2	SPEC	vector	ALU	37	0	1/1	SPECIAL
DAA	none	SPEC	vector	ALU	7	0	1/1	SPECIAL
DAS	none	SPEC    vector  ALU     7       0       1/1     SPECIAL
*ENTER	imm32,0	SPEC	vector	ALU	14	0	1/1	SPECIAL
*ENTER  imm32,1 SPEC    vector  ALU     17      0       1/1     SPECIAL
*ENTER  imm32,2 SPEC    vector  ALU     19      0       1/1     SPECIAL
LEAVE	none	SPEC	double	ALU	3	0	1/1	SPECIAL
