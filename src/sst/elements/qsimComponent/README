QSim Component for SST
======================

1. Architecture
---------------

The QSim component provides a simple x86 CPU emulator based on the QSim
emulation library, which provides an instrumentation API to the QEmu emulation
environment. The QSim component expands the QSim library by allowing memory
contents to be stored in a simulated memory hierarchy instead of internally
within QSim. This allows simualtions using QSim to run across multiple physical
nodes without requiring them to share memory.

QEmu, the emulator used by QSim is, at its heart, a dynamic binary translator,
meaning that it emulates the guest architecture by translating its binary code
into code executable by the host processor. Translated code pulled from the
simulated memory system is executed out of a translation cache.

QSim is constructed in such a way that each process using the QSim library is
limited to a single instance of the QSim object. The consequence of this in an
SST simulation is that only one instance of the QSim component may exist per MPI
rank.

2. Configuration
----------------

A simple C template generating arbitrary-sized SDL files, gen_sdl.c, has been
provided for reference. The QSim component is designed to be connected to
MemHierarchy components providing a coherent cache.

2.1 HDL Parameters
------------------

state - required

  The initial state is loaded from a file created with the qsim-fastforwarder
  utility. The number of hardware threads in the state must correspond to the
  number of QSim components in the simulation.

app - required

  This is the path of a .tar file containing a benchmark and a script called
  runme.sh. All QSim components connected to the same memory system must load an
  identical app.

hwthread - required

  Each instance of the QSim component represents a single hardware thread
  context in a chip multiprocessor. This parameter provides the ID of the
  hardware thread. This is a set of unique, sequential integers starting with 0.

2.2 Ports
---------

memLink - required - MemEvent (bidirectional)

  The "memLink" is the interface to the memory system.

iMemLink - optional - MemEvent (bidirectional)

  Optionally, instruction and data memory can be split out. This requires that
  the memory system keep the instruction and data caches coherent with
  one-another.

ipiRingIn - required - IPIEvent (recv)
ipiRingOut - required - IPIEvent (send)

  Inter-processor interrupts are delivered via a simple ring network which must
  connect every instance of QSim with 

3. Getting Started
------------------

3.1 Requirements
----------------

The following software is needed in order to use the QSim component with SST:

  - Relatively recent Linux distribution
  - QSim 0.2 or later

3.2 Setting up QSim
-------------------

A detailed set of installation instructions for QSim can be found in the file
INSTALL in the QSim root directory.

3.3 Setting up SST
------------------

To run a simple test:

  $ emacs gen_sdl.c

    Change the constant "APP" at the top of the file to the path of a QSim
    benchmark .tar file (more on which in the QSim documentation).

  $ gcc -o gen_sdl gen_sdl.c
  $ ./gen_sdl 11 > test_11.xml
  $ mpirun -np 11 sst.x test_11.xml --stop-at 1ms


4. Resources
------------

  QSim website: http://manifold.gatech.edu/projects/qsim-a-multicore-emulator/
