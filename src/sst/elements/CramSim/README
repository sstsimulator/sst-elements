~~~~~~~~~~~~~~~~~~~~ README ~~~~~~~~~~~~~~~~~~
CramSim - ControlleR And Memory SIMulator
Developed using the Structural Simulation Toolkit

PREREQUISITES TO INSTALLATION:
  - Boost 1.57
  - OpenMPI 1.8.8
  - SST Release Version

INSTALLATION:
  - Once the repo is cloned, cd to main folder (sstcramsim/)
  - Run "./autogen.sh"
  - Run "cd sst/elements/CramSim"
  - Run "make"

  When editing the simulator:
  - If adding a new class:
    - Add class files to Makefile.am
    - cd to parent directory "sstcramsim"
    - Run "./autogen.sh"
    - Run "cd sst/elements/CramSim"
    - Run "make"
  - If modifying existing files:
    - Run "make"

RUNNING A SIMULATION:
  - Syntax:
    sst --lib-path:./libs/ PYTHON_TEST_FILE.py --model-options="--configfile=CONFIG.cfg --tracefile=TRACE.trc"

  Python file instantiates SST components and links them together. It also provides the simulator with access to "parameter knobs". Many different test
  python files exist in ./tests/ . Here are some highlights
    - test_txngenrand2.py: Runs simulation using a series of randomly generated instructions. --model-options flag not required
    - test_txngenseq3.py: Runs simulation using a series of sequentially generated instructions --model-options flag not required
    - test_txntrace1.py: Runs simulation with a commandline-provided trace file and config file. Trace format is "INTERVAL TXN_TYPE TXN_ADDRESS TXN_WIDTH"
    - test_txntrace2.py: Runs simulation with a commandline-provided trace file and config file. Trace format is the same as DRAMSim2's
    - test_txntrace3.py: Runs simulation with a commandline-provided trace file and config file. Trace format is the same as USimm's
    - test_txntrace4.py: Similar to test_txntrace3.py but is intended to be used as part of the Verimem test suite

VERIMEM:
  Verimem is a series of traces intended to be run to confirm the validity of the results of a simulator. Verimem's test traces that apply to the
  granularity of this simulator are 1, 4, 5, and 6. Suites 2, 3, and 7 require a model that includes bank rows and columns to provide any insights that
  1, 4, 5, and 6 don't already.

  NOTE: VeriMem tests will not run without downloading the traces. SST directory structure mandated that the VeriMem traces cannot be checked in into the sst-elements directory. 
  The VeriMem traces are currently (01 2017) available here: https://github.com/sstsimulator/sst-downloads/releases
  The filenames begin with sst-CramSim-trace_verimem in the SST Test Support Files section.
 
  To run Verimem (from within /sstcramsim/sst/elements/CramSim/):
      python ./tests/VeriMem/test_verimem1.py BOOL_DEBUG_OUTPUT
    BOOL_DEBUG_OUTPUT should be either 0 or 1, depending on if debugging output is wanted or not.
  This script runs simulations using a config file (to edit, change the variable "config_file") and a series of different trace files specifically structured to
  test the validity of the simulator's results.
  
SST BASICS:
  SST allows the usage of isolated components. Each component has its own internal clockCycle. Every cycle, each component runs its clockTic() method.
    The simulator is cycle-based in that in a given cycle, all the clockTics are to be seen as running concurrently.
  Components can be connected using SST-provided links. A link must be registered (and named) by the two components it connects. Once both components register the link,
    SST-provided Event objects can be sent on the link. The Event class can be subclassed to include specific event types that carry specific payloads (e.g. c_TxnReqEvent).
    The simulator is event-based in that components respond discretely to events as they arrive.

CramSim.cpp:
  This is the factory-pattern class that is used to instantiate SST components. Link names and parameters are explicitly defined here so that the python file
  can properly map them together.

MODEL OVERVIEW:
  Each SST component listed is connected to the component above it and below it using a group of unidirectional links

  - Txn Generator (multiple options):
    - c_TxnGenSeq
      - Generates Txns in sequential-address order
    - c_TxnGenRand
      - Generates Txns in random-address order
    - c_TracefileReader
      - Reads Txns from a trace file
    - c_DramSimTraceReader
      - Reads Txns from a DRAMSim2 trace file
    - c_USimmTraceReader
      - Reads Txns from a USimm trace file

    - Generates txn requests and buffers them. Every cycle a txn is removed from the buffer and sent to TxnUnit
    - Receives txn responses from TxnUnit. Every cycle a txn is removed from the buffer and marked as complete.

  - c_TxnUnit
    - Receives Txn requests from TxnGen and stores them. Every cycle a txn is removed from the buffer, converted to Cmds, and sent to CmdUnit
    - Receives Cmd responses from CmdUnit and updates the Txn that Cmd "belonged" to. Every cycle a completed txn is removed from the response buffer and returned to TxnGen

  - c_CmdUnit
    - Receives Cmd requests from TxnUnit and stores them. Every cycle a cmd is removed, mapped to its correct bank, and sent to DIMM. In addition, the cmd is
        fed to the CmdUnit's internal reference to each bank's BankState.
        - c_BankState:
          - Implemented using State Design Pattern. Current states supported: IDLE, ACTIVATING, ACTIVE, READ, READA, WRITE, WRITEA, PRECHARGE, REFRESH
    - Receives Cmd responses from DIMM and stores them. Every cycle a cmd is removed and sent to TxnUnit

  - c_DIMM:
    - Receives a Cmd request from CmdUnit and maps it to its particular bank before sending it to that bank.
    - Receives a Cmd response from its internal banks and sends it back to CmdUnit


  ADDITIONAL INFO:
    - Bank addresses are mapped from the singleton class c_AddressHasher.
      - The address hash is highly flexible, and can be specified at the bit granularity. The map string is interpreted as little-endian (MSB first).
      - Checking is done to verify that the structure-level parameters (e.g. numRanksPerChannel) match with the number of bits defined in the address map
      - A simple map is also available. If only one instance of each type is defined the map will be automatically expanded to cover the structure sizes defined by the normal parameters.
      - If the complex address map type is defined and fewer map bits are defined than those defined by the structure parameters (e.g. map contains R:2 and numRanksPerChannel is 8) a warning will be printed but simulation will continue with only a subset of the structures being used (some ranks can never be accessed).
      - If the complex addres map type is defined and more map bits are defined than those defined by the structure parameters (e.g. map contains R:2 and numRanksPerChannel is 1) then the simulation will abort.
      - The underscore '_' can be used as spacers to increase readability of address maps
      - Address map key:
      	C - Channel
	R - Rank
	B - BankGroup
	b - Bank
	r - Row
	l - Column
	h - Cacheline (matches burst size in bytes)
      - Examples:
      	_r_l_b_R_B_h_ - simple version, will be expanded as necessary to fill defined structures in the order defined. No 'C' included, so only 1 channel is possible.
	__r:15_l:7__bb__R__BB__h:6__ - 15 row bits at MSB, folled by 7 column bits, 2 bank bits, 1 Rank bit, 2 BankGroup bits, and 6 cacheline bits
	
    - It is highly recommended that simulator output is piped to an external file. There is usually a lot of output to decipher



RUNNING A SIMULATION WITH CPU MODELS:
  CramSim can run as a backend of the memoryHierarchy element to communicate with other SST elements. 
  A CramSim backend is available in the memoryHierarchy directory (elements/memHierarchy/membackend/cramSimBackend.cc).

0. Prerequisites: set environment variables
    $ export SST_ELEMENT_HOME="SST-Element installation directory"
    $ export SST_CORE_HOME="SST-Core installation directory"
    $ export SST_ELEMENT_ROOT="SST-ELEMENT source code directory"

1. Run with Ariel
   - install 
    $ cd $SST_ELEMENT_ROOT
    $ ./autogen.sh
    $ ./configure --prefix=$SST_ELEMENT_HOME --with-sst-core=$SST_CORE_HOME
	$ make install

   - run
    $ cd $SST_ELEMENT_ROOT/src/sst/elements/CramSim/tests
	$ make
    $ sst ariel_cramsim.py

2. Run with MacSim
   - install 
    $ cd $SST_ELEMENT_ROOT/src/sst/elements/CramSim/tests
    $ ./get_macsim.sh
    $ cd $SST_ELEMENT_ROOT
    $ ./autogen.sh
    $ export PIN_HOME = "PIN tool installation directory"
    $ ./configure --prefix=$SST_ELEMENT_HOME --with-sst-core=$SST_CORE_HOME --with-pin=$PIN_HOME
    $ make install

   - run
    $ cd $SST_ELEMENT_ROOT/src/sst/elements/CramSim/tests
    $ sst macsim_cramsim.py


3. Run with Gem5
   - Install
    $ cd $SST_ELEMENT_ROOT
    $ ./autogen.sh
    $ ./configure --prefix=$SST_ELEMENT_HOME --with-sst-core=$SST_CORE_HOME
	$ make install
	$ cd $SST_ELEMENT_ROOT/src/sst/elements/CramSim/tests
    $ ./get_gem5.sh

   - run 
    $ cd $SST_ELEMENT_ROOT/src/sst/elements/CramSim/tests
    $ sst gem5_cramsim.py

   - Connect to the simulated console interface
    $ cd $SST_ELEMENT_ROOT/src/sst/elements/gem5/util/term
	$ sudo make install
	$ ./m5term localhost 3456

