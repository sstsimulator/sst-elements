diff --git src/sim/simulate.cc src/sim/simulate.cc
index c6eb2dd..0c62df5 100644
--- src/sim/simulate.cc
+++ src/sim/simulate.cc
@@ -104,7 +104,7 @@ simulate(Tick num_cycles)
                                        "simulate() limit reached", 0);
     }
 
-    inform("Entering event queue @ %d.  Starting simulation...\n", curTick());
+   // inform("Entering event queue @ %d.  Starting simulation...\n", curTick());
 
     if (num_cycles < MaxTick - curTick())
         num_cycles = curTick() + num_cycles;


diff --git ext/sst/ExtMaster.cc ext/sst/ExtMaster.cc
index 2468248..438dc58 100644
--- ext/sst/ExtMaster.cc
+++ ext/sst/ExtMaster.cc
@@ -62,11 +62,13 @@ ExtMaster::ExtMaster(gem5Component *g, Output &o, ::ExternalMaster& p,
     gem5(g), name(n)
 {
     Params _p; // will be ignored
+    _p.insert("mem_size", "256MiB");
+
     nic = dynamic_cast<MemNIC*>(gem5->loadModuleWithComponent("memHierarchy.memNIC", g, _p));
 
     MemNIC::ComponentInfo ci;
     ci.num_vcs = 1;
-    ci.link_port = "network";
+    ci.link_port = "network_gem5";
     ci.link_bandwidth = "16GB/s";
     ci.link_inbuf_size = "1KB";
     ci.link_outbuf_size = "1KB";
@@ -74,6 +76,7 @@ ExtMaster::ExtMaster(gem5Component *g, Output &o, ::ExternalMaster& p,
     ci.type = MemNIC::TypeDirectoryCtrl;
     nic->moduleInit(ci, new Event::Handler<ExtMaster>
                                           (this, &ExtMaster::handleEvent));
+    nic->setOutput(&o);
 }
 
 void
@@ -140,8 +143,8 @@ ExtMaster::handleEvent(SST::Event* event)
         case PutS:
         case PutM:
         case PutE:
-        case PutX:
-        case PutXE:
+  //      case PutX:
+  //      case PutXE:
         case Inv:
         case FetchInv:
         case FetchInvX:
@@ -233,3 +236,5 @@ ExtMaster::recvRangeChange() {
         }
     }
 }
+
+
diff --git ext/sst/ExtSlave.cc ext/sst/ExtSlave.cc
index 6251ba8..db9353e 100644
--- ext/sst/ExtSlave.cc
+++ ext/sst/ExtSlave.cc
@@ -62,6 +62,7 @@ ExtSlave::ExtSlave(gem5Component *g5c, Output &out,
     if (!link) {
         out.fatal(CALL_INFO, 1, "Failed to configure link %s\n", name.c_str());
     }
+
 }
 
 void ExtSlave::init(unsigned phase)
@@ -69,7 +70,12 @@ void ExtSlave::init(unsigned phase)
     simPhase = INIT;
     if (initPackets) {
         while (!initPackets->empty()) {
-            link->sendInitData(initPackets->front());
+            MemEvent* event=initPackets->front();
+            link->sendInitData(event);
+
+            event->setFlag(MemEvent::F_NONCACHEABLE);
+            comp->storeDataToBacking(initPackets->front());
+
             initPackets->pop_front();
         }
         delete initPackets;
@@ -91,13 +97,16 @@ ExtSlave::recvFunctional(PacketPtr pkt)
         ev->setPayload(pkt->getSize(), pkt->getPtr<uint8_t>());
         initPackets->push_back(ev);
     } else {
-        panic("Functional accesses not allowed after construction phase");
+        functionalAccess(pkt);
+        printf("Functional accesses not allowed after construction phase\n");
+     //   panic("Functional accesses not allowed after construction phase");
     }
 }
 
 bool
 ExtSlave::recvTimingReq(PacketPtr pkt)
 {
+
     Command cmd;
     switch ((::MemCmd::Command)pkt->cmd.toInt()) {
     case ::MemCmd::HardPFReq:
@@ -122,6 +131,12 @@ ExtSlave::recvTimingReq(PacketPtr pkt)
     if (pkt->req->isLockedRMW())   ev->setFlag(MemEvent::F_LOCKED);
     if (pkt->req->isUncacheable()) ev->setFlag(MemEvent::F_NONCACHEABLE);
     if (pkt->req->hasContextId())  ev->setGroupId(pkt->req->contextId());
+
+  //  printf("[recvtiming] cycle: %lld, cmd: %s, addr: %x\n", comp->getCurrentSimTime(), (cmd==GetS ? "GetS": "GetX"), ev->getAddr());
+    //store data in backing_store
+    if(comp->getMemSize()>0 && ev->getCmd() == GetX && ev->getAddr()>=comp->getAddrStart())
+         comp->storeDataToBacking(ev);
+
 // Prefetches not working with SST; it maybe be dropping them, treating them
 // as not deserving of responses, or something else -- not sure yet.
 //  ev->setPrefetchFlag(pkt->req->isPrefetch());
@@ -157,11 +172,26 @@ ExtSlave::handleEvent(Event* ev)
         PacketMap.erase(mi);
 
         pkt->makeResponse();  // Convert to a response packet
-        pkt->setData(event->getPayload().data());
+
+        std::string cmd;
+        if(event->getCmd() ==GetSResp)
+            cmd = "GetSResp";
+        else if(event->getCmd()==GetXResp)
+            cmd = "GetXResp";
+        else
+            cmd = "Other";
+
+   //     printf("[handleEvent] cycle: %lld, cmd: %s, addr: %x\n", comp->getCurrentSimTime(), cmd.c_str(), event->getAddr());
+
+        // Set Reposonse data
+        if(comp->getMemSize()>0 && pkt->getAddr()>=comp->getAddrStart())
+             pkt->setData(comp->readDataFromBacking(event).data());
+        else
+             pkt->setData(event->getPayload().data());
 
         // Resolve the success of Store Conditionals
         if (pkt->isLLSC() && pkt->isWrite()) {
-            pkt->req->setExtraData(event->isAtomic());
+              pkt->req->setExtraData(event->success());
         }
 
         // Clear out bus delay notifications
@@ -194,3 +224,92 @@ ExtSlave::recvRespRetry()
         respQ.pop_front();
     }
 }
+
+
+void
+ExtSlave::functionalAccess(PacketPtr pkt)
+{
+    assert((pkt->getAddr()>=comp->getAddrStart() && pkt->getAddr()<=comp->getAddrEnd()));
+
+    Command cmd;
+    switch ((::MemCmd::Command)pkt->cmd.toInt()) {
+        case ::MemCmd::HardPFReq:
+        case ::MemCmd::SoftPFReq:
+        case ::MemCmd::LoadLockedReq:
+        case ::MemCmd::ReadExReq:
+        case ::MemCmd::ReadReq:       cmd = GetS;   break;
+        case ::MemCmd::StoreCondReq:
+        case ::MemCmd::WriteReq:      cmd = GetX;   break;
+        default:
+            out.fatal(CALL_INFO, 1, "Don't know how to convert gem5 packet "
+                    "command %s to SST\n", pkt->cmd.toString().c_str());
+    }
+
+    auto event = new MemEvent(comp, pkt->getAddr(), pkt->getAddr(), cmd);
+    event->setPayload(pkt->getSize(), pkt->getPtr<uint8_t>());
+    event->setFlag(MemEvent::F_NONCACHEABLE);
+
+    if(comp->getMemSize()>0 && pkt->getAddr()>=comp->getAddrStart()) {
+        if (pkt->isRead()) {
+            pkt->setData(comp->readDataFromBacking(event).data());
+            pkt->makeResponse();
+        } else if (pkt->isWrite()) {
+            comp->storeDataToBacking(event);
+            pkt->makeResponse();
+        } else if (pkt->isPrint()) {
+            Packet::PrintReqState *prs =
+                    dynamic_cast<Packet::PrintReqState *>(pkt->senderState);
+            assert(prs);
+            // Need to call printLabels() explicitly since we're not going
+            // through printObj().
+            prs->printLabels();
+        } else {
+            panic("AbstractMemory: unimplemented functional command %s",
+                  pkt->cmdString());
+        }
+    } else{
+        //Todo
+        panic("comp->geMemSize()<0 || ptk->getAddr()<=comp->getAddrStart()");
+    }
+}
+/*
+void ExtSlave::storeDataToBacking(MemEvent* event) {
+
+    if ( ! backing_ ) {
+        return;
+    }
+
+    Addr addr = event->queryFlag(MemEvent::F_NONCACHEABLE) ?  event->getAddr() : event->getBaseAddr();
+    Addr local_addr = convertAddressToLocalAddress(addr);
+
+    for ( size_t i = 0 ; i < event->getSize() ; i++)
+            backing_->set( local_addr + i, event->getPayload()[i] );
+
+}
+
+
+
+vector<uint8_t> ExtSlave::readDataFromBacking( MemEvent * event) {
+   // if (ev->queryFlag(MemEvent::F_NORESPONSE)) return;
+    bool noncacheable = event->queryFlag(MemEvent::F_NONCACHEABLE);
+    Addr addr = event->queryFlag(MemEvent::F_NONCACHEABLE) ?  event->getAddr() : event->getBaseAddr();
+    Addr local_addr = convertAddressToLocalAddress(addr);
+
+    vector<uint8_t> payload;
+    if (event->getCmd() == GetSResp|| event->getCmd() == GetXResp) {
+        payload.resize(event->getSize(), 0);
+        if (backing_) {
+            for ( size_t i = 0 ; i < event->getSize() ; i++)
+                payload[i] = backing_->get( local_addr + i );
+        }
+    }
+    return payload;
+}
+
+
+uint64_t ExtSlave::convertAddressToLocalAddress(uint64_t addr){
+    Addr start_addr=comp->getAddrStart();
+    return start_addr>addr?addr:addr-start_addr;
+}
+
+*/
diff --git ext/sst/ExtSlave.hh ext/sst/ExtSlave.hh
index cef7c1e..717aaa6 100644
--- ext/sst/ExtSlave.hh
+++ ext/sst/ExtSlave.hh
@@ -51,11 +51,13 @@
 #include <mem/packet.hh>
 #include <mem/request.hh>
 #include <mem/external_slave.hh>
+#include <elements/memHierarchy/membackend/backing.h>
 
 namespace SST {
 class Link;
 class Event;
 class MemEvent;
+
 namespace gem5 {
 
 class gem5Component;
@@ -64,6 +66,9 @@ class ExtSlave : public ExternalSlave::Port {
   public:
     const std::string name;
 
+   // MemHierarchy::Backend::Backing* backing_;
+
+
     bool
     recvTimingSnoopResp(PacketPtr packet)
     {
@@ -101,6 +106,7 @@ public:
     ExtSlave(gem5Component*, Output&, ExternalSlave&, std::string&);
     void init(unsigned phase);
 
+
     void
     setup()
     {
@@ -108,6 +114,11 @@ public:
     }
 
     void handleEvent(Event*);
+
+    void functionalAccess(PacketPtr pkt);
+
+
+    //AddrRangeList getAddrRanges() const;
 };
 
 }
diff --git ext/sst/Makefile ext/sst/Makefile
index 3eb0a8e..0829b96 100644
--- ext/sst/Makefile
+++ ext/sst/Makefile
@@ -1,10 +1,11 @@
 # These two variables are designed to be modifiable.
-SST_VERSION=SST-trunk
+SST_VERSION=SST--dev
 GEM5_LIB=gem5_opt
 
 LDFLAGS=-shared -fno-common ${shell pkg-config ${SST_VERSION} --libs} -L../../build/ARM
-CXXFLAGS=-std=c++0x -g -O2 -fPIC ${shell pkg-config ${SST_VERSION} --cflags} ${shell python-config --includes} -I../../build/ARM
-CPPFLAGS+=-MMD -MP
+CXXFLAGS=-std=c++0x -g -O2 -fPIC ${shell pkg-config ${SST_VERSION} --cflags} ${shell python-config --includes} -I../../build/ARM -I${SST_CORE_HOME}/include/sst -I${SST_CORE_HOME}include -I${SST_ELEMENT_HOME}/include/sst -I${SST_ELEMENT_HOME}/include
+
+CPPFLAGS+=-MMD -MP -g -O2
 SRC=$(wildcard *.cc)
 
 .PHONY: clean all
diff --git ext/sst/gem5.cc ext/sst/gem5.cc
index 7749d37..25dec57 100644
--- ext/sst/gem5.cc
+++ ext/sst/gem5.cc
@@ -69,13 +69,14 @@
 
 using namespace SST;
 using namespace SST::gem5;
+using namespace SST::MemHierarchy;
 
 gem5Component::gem5Component(ComponentId_t id, Params &params) :
     SST::Component(id)
 {
     dbg.init("@t:gem5:@p():@l " + getName() + ": ", 0, 0,
             (Output::output_location_t)params.find<int>("comp_debug", 0));
-    info.init("gem5:" + getName() + ": ", 0, 0, Output::STDOUT);
+    info.init("gem5:" + getName() + ": ", 5, 1, Output::STDOUT);
 
     TimeConverter *clock = registerClock(
             params.find<std::string>("frequency", "1GHz"),
@@ -85,7 +86,21 @@ gem5Component::gem5Component(ComponentId_t id, Params &params) :
     sim_cycles = clock->getFactor();
 
     // Disable gem5's inform() messages.
-    want_info = false;
+   // want_info = false;
+    /* get mem_size which will be used to allocate backing store */
+    bool found=false;
+    UnitAlgebra ramSize = UnitAlgebra(params.find<std::string>("mem_size", "0B",found));
+    if (ramSize.getRoundedValue() % (1024*1024) != 0) {
+       ;// output->fatal(CALL_INFO, -1, "For DRAMSim, backend.mem_size must be a multiple of 1MiB. Note: for units in base-10 use 'MB', for base-2 use 'MiB'. You specified '%s'\n", ramSize.toString().c_str());
+    }
+    mem_size=ramSize.getRoundedValue();
+
+    if(mem_size>0)
+        backing_ = new Backing( "",mem_size) ;
+
+    addrRangeStart=params.find<uint64_t>("addr_range_start",0);
+    addrRangeEnd=params.find<uint64_t>("addr_range_end",0);
+
 
     std::string cmd = params.find<std::string>("cmd", "");
     if (cmd.empty()) {
@@ -111,6 +126,7 @@ gem5Component::gem5Component(ComponentId_t id, Params &params) :
         setDebugFlag(flag);
     }
 
+
     ExternalMaster::registerHandler("sst", this); // these are idempotent
     ExternalSlave ::registerHandler("sst", this);
 
@@ -238,6 +254,7 @@ gem5Component::initPython(int argc, char *argv[])
     // bunch of python statements.
     while (*command) {
         result = PyRun_String(*command, Py_file_input, mainDict, mainDict);
+
         if (!result) {
             PyErr_Print();
             break;
@@ -267,3 +284,41 @@ gem5Component::getExternalPort(const std::string &name,
     slaves.push_back(slave);
     return slave;
 }
+
+
+void gem5Component::storeDataToBacking(MemEvent* event) {
+
+    if ( ! backing_ ) {
+        return;
+    }
+
+    Addr addr = event->queryFlag(MemEvent::F_NONCACHEABLE) ?  event->getAddr() : event->getBaseAddr();
+    Addr local_addr = convertAddressToLocalAddress(addr);
+
+    for ( size_t i = 0 ; i < event->getSize() ; i++)
+        backing_->set( local_addr + i, event->getPayload()[i] );
+
+}
+
+
+
+vector<uint8_t> gem5Component::readDataFromBacking( MemEvent * event) {
+    // if (ev->queryFlag(MemEvent::F_NORESPONSE)) return;
+   // bool noncacheable = event->queryFlag(MemEvent::F_NONCACHEABLE);
+    //Addr addr = event->queryFlag(MemEvent::F_NONCACHEABLE) ?  event->getAddr() : event->getBaseAddr();
+   // Addr local_addr = convertAddressToLocalAddress(addr);
+    Addr local_addr = convertAddressToLocalAddress(event->getAddr());
+
+    vector<uint8_t> payload;
+    payload.resize(event->getSize(), 0);
+    if (backing_) {
+        for ( size_t i = 0 ; i < event->getSize() ; i++)
+            payload[i] = backing_->get( local_addr + i );
+    }
+    return payload;
+}
+
+
+uint64_t gem5Component::convertAddressToLocalAddress(uint64_t addr){
+    return (addrRangeStart>addr) ? addr : addr-addrRangeStart;
+}
diff --git ext/sst/gem5.hh ext/sst/gem5.hh
index 0f1bed8..ea1497a 100644
--- ext/sst/gem5.hh
+++ ext/sst/gem5.hh
@@ -62,6 +62,47 @@ namespace gem5 {
 class gem5Component : public SST::Component,
                       public ExternalSlave::Handler,
                       public ExternalMaster::Handler {
+
+    class Backing {
+    public:
+        Backing( std::string memoryFile, size_t size, size_t offset = 0 ) :m_fd(-1), m_size(size), m_offset(offset) {
+            int flags = MAP_PRIVATE;
+            if ( ! memoryFile.empty() ) {
+                m_fd = open(memoryFile.c_str(), O_RDWR);
+                if ( m_fd < 0) {
+                    throw 1;
+                }
+            } else {
+                flags  |= MAP_ANON;
+            }
+            m_buffer = (uint8_t*)mmap(NULL, size, PROT_READ|PROT_WRITE, flags, m_fd, 0);
+
+            if ( m_buffer == MAP_FAILED) {
+                throw 2;
+            }
+        }
+        ~Backing() {
+            munmap( m_buffer, m_size );
+            if ( -1 != m_fd ) {
+                close( m_fd );
+            }
+        }
+        void set( Addr addr, uint8_t value ) {
+            m_buffer[addr - m_offset ] = value;
+        }
+
+        uint8_t get( Addr addr ) {
+            return m_buffer[addr - m_offset];
+        }
+
+
+    private:
+        uint8_t* m_buffer;
+        int m_fd;
+        int m_size;
+        size_t m_offset;
+    };
+
 private:
 
     Output dbg;
@@ -69,9 +110,15 @@ private:
     uint64_t sim_cycles;
     uint64_t clocks_processed;
 
+    size_t mem_size;
+    uint64_t        addrRangeStart;
+    uint64_t        addrRangeEnd;
+
     std::vector<ExtMaster*> masters;
     std::vector<ExtSlave*> slaves;
 
+    Backing* backing_;
+
     void splitCommandArgs(std::string &cmd, std::vector<char*> &args);
     void initPython(int argc, char *argv[]);
 
@@ -82,6 +129,13 @@ public:
     virtual void setup();
     virtual void finish();
     bool clockTick(Cycle_t);
+    size_t getMemSize(){return mem_size;}
+    uint64_t getAddrStart(){return addrRangeStart;}
+    uint64_t getAddrEnd(){return addrRangeEnd;}
+
+    void storeDataToBacking(MemEvent* event);
+    vector<uint8_t> readDataFromBacking( MemEvent * ev);
+    uint64_t convertAddressToLocalAddress(uint64_t addr);
 
     virtual ExternalMaster::Port *getExternalPort(
         const std::string &name, ExternalMaster &owner,
@@ -90,6 +144,8 @@ public:
     virtual ExternalSlave::Port *getExternalPort(
         const std::string &name, ExternalSlave &owner,
         const std::string &port_data);
+
+
 };
 
 }
diff --git ext/sst/libgem5.cc ext/sst/libgem5.cc
index 93fa05b..86c40fe 100644
--- ext/sst/libgem5.cc
+++ ext/sst/libgem5.cc
@@ -58,6 +58,8 @@ static const SST::ElementInfoParam gem5_params[] = {
     {"comp_debug", "Debug information from the component: 0 (off), 1 (stdout),"
                    " 2 (stderr), 3(file)"},
     {"frequency", "Frequency with which to call into gem5"},
+    {"mem_size", "Main memory size. This value is used to create backing storage"},
+    {"addrRangeStart", "Start of memory address range in virtual address space. This value is used to handle backing stage"},
     {NULL, NULL}
 };
 
diff --git src/sim/simulate.hh src/sim/simulate.hh
index e39a259..c7446fd 100644
--- src/sim/simulate.hh
+++ src/sim/simulate.hh
@@ -30,6 +30,7 @@
  */
 
 #include "base/types.hh"
+#include "sim/sim_events.hh"
 
 class GlobalSimLoopExitEvent;
 
