PROCESSED 18 .so (SST ELEMENT) FILES FOUND IN DIRECTORY(s) /Users/seokinhong/local/sstelement-6.1.0/lib/sst-elements-library
Filtering output on Element = "CramSim"
================================================================================
ELEMENT 3 = CramSim (Library with transaction generation components)
   NUM COMPONENTS    = 12
      COMPONENT 0 = c_AddressHasher [UNCATEGORIZED COMPONENT] (Hashes addresses based on config parameters)
         NUM PARAMETERS = 8
            PARAMETER 0 = numChannelsPerDimm (Total number of channels per DIMM) [REQUIRED]
            PARAMETER 1 = numRanksPerChannel (Total number of ranks per channel) [REQUIRED]
            PARAMETER 2 = numBankGroupsPerRank (Total number of bank groups per rank) [REQUIRED]
            PARAMETER 3 = numBanksPerBankGroup (Total number of banks per group) [REQUIRED]
            PARAMETER 4 = numRowsPerBankNumber of rows in every bank ((null)) [REQUIRED]
            PARAMETER 5 = numColsPerBank (Number of cols in every bank) [REQUIRED]
            PARAMETER 6 = numBytesPerTransaction (Number of bytes retrieved for every transaction) [REQUIRED]
            PARAMETER 7 = strAddressMapStr (String defining the address mapping scheme) [REQUIRED]
         NUM PORTS = 0
         NUM STATISTICS = 0
      COMPONENT 1 = c_TxnGenSeq [UNCATEGORIZED COMPONENT] (Test Txn Sequential Generator)
         NUM PARAMETERS = 4
            PARAMETER 0 = numTxnGenReqQEntries (Total entries allowed in the Req queue) [REQUIRED]
            PARAMETER 1 = numTxnGenResQEntries (Total entries allowed in the Res queue) [REQUIRED]
            PARAMETER 2 = numTxnUnitReqQEntries (Total entries in the neighbor TxnUnit's Req queue) [REQUIRED]
            PARAMETER 3 = readWriteRatio (Ratio of read txn's to generate : write txn's to generate) [REQUIRED]
         NUM PORTS = 4
            PORT 0 [1 Valid Events] = outTxnGenReqPtr (link to c_TxnGen for outgoing req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 1 [1 Valid Events] = inTxnUnitReqQTokenChg (link to c_TxnGen for incoming req token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 2 [1 Valid Events] = inTxnUnitResPtr (link to c_TxnGen for incoming res txn)
               VALID EVENT 0 = c_TxnResEvent
            PORT 3 [1 Valid Events] = outTxnGenResQTokenChg (link to c_TxnGen for outgoing res token)
               VALID EVENT 0 = c_TokenChgEvent
         NUM STATISTICS = 0
      COMPONENT 2 = c_TxnGenRand [UNCATEGORIZED COMPONENT] (Test Txn Random Generator)
         NUM PARAMETERS = 4
            PARAMETER 0 = numTxnGenReqQEntries (Total entries allowed in the Req queue) [REQUIRED]
            PARAMETER 1 = numTxnGenResQEntries (Total entries allowed in the Res queue) [REQUIRED]
            PARAMETER 2 = numTxnUnitReqQEntries (Total entries in the neighbor TxnUnit's Req queue) [REQUIRED]
            PARAMETER 3 = readWriteRatio (Ratio of read txn's to generate : write txn's to generate) [REQUIRED]
         NUM PORTS = 4
            PORT 0 [1 Valid Events] = outTxnGenReqPtr (link to c_TxnGen for outgoing req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 1 [1 Valid Events] = inTxnUnitReqQTokenChg (link to c_TxnGen for incoming req token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 2 [1 Valid Events] = inTxnUnitResPtr (link to c_TxnGen for incoming res txn)
               VALID EVENT 0 = c_TxnResEvent
            PORT 3 [1 Valid Events] = outTxnGenResQTokenChg (link to c_TxnGen for outgoing res token)
               VALID EVENT 0 = c_TokenChgEvent
         NUM STATISTICS = 0
      COMPONENT 3 = c_TracefileReader [UNCATEGORIZED COMPONENT] (Test Trace file Generator)
         NUM PARAMETERS = 4
            PARAMETER 0 = numTxnGenReqQEntries (Total entries allowed in the Req queue) [REQUIRED]
            PARAMETER 1 = numTxnGenResQEntries (Total entries allowed in the Res queue) [REQUIRED]
            PARAMETER 2 = numTxnUnitReqQEntries (Total entries in the neighbor TxnUnit's Req queue) [REQUIRED]
            PARAMETER 3 = traceFile (Location of trace file to read) [REQUIRED]
         NUM PORTS = 4
            PORT 0 [1 Valid Events] = outTxnGenReqPtr (link to c_TxnGen for outgoing req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 1 [1 Valid Events] = inTxnUnitReqQTokenChg (link to c_TxnGen for incoming req token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 2 [1 Valid Events] = inTxnUnitResPtr (link to c_TxnGen for incoming res txn)
               VALID EVENT 0 = c_TxnResEvent
            PORT 3 [1 Valid Events] = outTxnGenResQTokenChg (link to c_TxnGen for outgoing res token)
               VALID EVENT 0 = c_TokenChgEvent
         NUM STATISTICS = 0
      COMPONENT 4 = c_DramSimTraceReader [UNCATEGORIZED COMPONENT] (Test DRAMSim2 Trace file Generator)
         NUM PARAMETERS = 4
            PARAMETER 0 = numTxnGenReqQEntries (Total entries allowed in the Req queue) [REQUIRED]
            PARAMETER 1 = numTxnGenResQEntries (Total entries allowed in the Res queue) [REQUIRED]
            PARAMETER 2 = numTxnUnitReqQEntries (Total entries in the neighbor TxnUnit's Req queue) [REQUIRED]
            PARAMETER 3 = traceFile (Location of trace file to read) [REQUIRED]
         NUM PORTS = 4
            PORT 0 [1 Valid Events] = outTxnGenReqPtr (link to c_TxnGen for outgoing req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 1 [1 Valid Events] = inTxnUnitReqQTokenChg (link to c_TxnGen for incoming req token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 2 [1 Valid Events] = inTxnUnitResPtr (link to c_TxnGen for incoming res txn)
               VALID EVENT 0 = c_TxnResEvent
            PORT 3 [1 Valid Events] = outTxnGenResQTokenChg (link to c_TxnGen for outgoing res token)
               VALID EVENT 0 = c_TokenChgEvent
         NUM STATISTICS = 0
      COMPONENT 5 = c_USimmTraceReader [UNCATEGORIZED COMPONENT] (Test USimm Trace file Generator)
         NUM PARAMETERS = 4
            PARAMETER 0 = numTxnGenReqQEntries (Total entries allowed in the Req queue) [REQUIRED]
            PARAMETER 1 = numTxnGenResQEntries (Total entries allowed in the Res queue) [REQUIRED]
            PARAMETER 2 = numTxnUnitReqQEntries (Total entries in the neighbor TxnUnit's Req queue) [REQUIRED]
            PARAMETER 3 = traceFile (Location of trace file to read) [REQUIRED]
         NUM PORTS = 4
            PORT 0 [1 Valid Events] = outTxnGenReqPtr (link to c_TxnGen for outgoing req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 1 [1 Valid Events] = inTxnUnitReqQTokenChg (link to c_TxnGen for incoming req token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 2 [1 Valid Events] = inTxnUnitResPtr (link to c_TxnGen for incoming res txn)
               VALID EVENT 0 = c_TxnResEvent
            PORT 3 [1 Valid Events] = outTxnGenResQTokenChg (link to c_TxnGen for outgoing res token)
               VALID EVENT 0 = c_TokenChgEvent
         NUM STATISTICS = 0
      COMPONENT 6 = c_TxnDriver [UNCATEGORIZED COMPONENT] (Test Txn Driver)
         NUM PARAMETERS = 2
            PARAMETER 0 = numTxnDrvBufferQEntries (Total entries allowed in the buffer) [REQUIRED]
            PARAMETER 1 = numTxnGenResQEntries (Total entries allowed in the Res queue of the Txn Driver) [REQUIRED]
         NUM PORTS = 4
            PORT 0 [1 Valid Events] = outTxnDrvReqQTokenChg (link to c_TxnDriver for outgoing req token)
               VALID EVENT 0 = c_TxnReqTokenChgEvent
            PORT 1 [1 Valid Events] = inTxnGenReqPtr (link to c_TxnGen for incoming req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 2 [1 Valid Events] = inTxnGenResQTokenChg (link to c_TxnGen for incoming res token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 3 [1 Valid Events] = outTxnDrvResPtr (link to c_TxnGen for outgoing res txn)
               VALID EVENT 0 = c_TxnResEvent
         NUM STATISTICS = 0
      COMPONENT 7 = c_TxnUnit [UNCATEGORIZED COMPONENT] (Test Txn Unit)
         NUM PARAMETERS = 17
            PARAMETER 0 = numTxnUnitReqQEntries (Total number of entries in TxnUnit's Req queue) [REQUIRED]
            PARAMETER 1 = numTxnUnitResQEntries (Total number of entries in TxnUnit's Res queue) [REQUIRED]
            PARAMETER 2 = numTxnGenResQEntries (Total number of entries in neighbor TxnGen's Res queue) [REQUIRED]
            PARAMETER 3 = numCmdReqQEntries (Total number of entries in neighbor CmdUnit's Req queue) [REQUIRED]
            PARAMETER 4 = numChannelsPerDimm (Total number of channels per DIMM) [REQUIRED]
            PARAMETER 5 = numRanksPerChannel (Total number of ranks per channel) [REQUIRED]
            PARAMETER 6 = numBankGroupsPerRank (Total number of bank groups per rank) [REQUIRED]
            PARAMETER 7 = numBanksPerBankGroup (Total number of banks per group) [REQUIRED]
            PARAMETER 8 = numRowsPerBankNumber of rows in every bank ((null)) [REQUIRED]
            PARAMETER 9 = numColsPerBank (Number of cols in every bank) [REQUIRED]
            PARAMETER 10 = numBytesPerTransaction (Number of bytes retrieved for every transaction) [REQUIRED]
            PARAMETER 11 = relCommandWidth (Relative width of each command) [REQUIRED]
            PARAMETER 12 = bankPolicy (Select which bank policy to model) [REQUIRED]
            PARAMETER 13 = nREFI (Bank param for how often refreshes happen) [REQUIRED]
            PARAMETER 14 = boolUseRefresh (Whether to use REF or not) [REQUIRED]
            PARAMETER 15 = boolUseReadA (Whether to use READ or READA Cmds) [REQUIRED]
            PARAMETER 16 = boolUseWriteA (Whether to use WRITE or WRITEA Cmds) [REQUIRED]
         NUM PORTS = 7
            PORT 0 [1 Valid Events] = inTxnGenReqPtr (link to c_TxnUnit for incoming req txn)
               VALID EVENT 0 = c_TxnReqEvent
            PORT 1 [1 Valid Events] = outCmdUnitReqPtrPkg (link to c_TxnUnit for outgoing req cmds)
               VALID EVENT 0 = c_CmdPtrPkgEvent
            PORT 2 [1 Valid Events] = outTxnGenReqQTokenChg (link to c_TxnUnit for outgoing req txn tokens)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 3 [1 Valid Events] = inCmdUnitReqQTokenChg (link to c_TxnUnit for incoming req cmd tokens)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 4 [1 Valid Events] = inCmdUnitResPtr (link to c_TxnUnit for incoming res txns from CmdUnit)
               VALID EVENT 0 = c_CmdResEvent
            PORT 5 [1 Valid Events] = outTxnGenResPtr (link to c_TxnUnit for outgoing res txns)
               VALID EVENT 0 = c_TxnResEvent
            PORT 6 [1 Valid Events] = inTxnGenResQTokenChg (link to c_TxnUnit for incoming res txn tokens)
               VALID EVENT 0 = c_TokenChgEvent
         NUM STATISTICS = 0
      COMPONENT 8 = c_CmdDriver [UNCATEGORIZED COMPONENT] (Test Cmd Driver)
         NUM PARAMETERS = 2
            PARAMETER 0 = numCmdReqQEntries (Total number of entries in Driver's buffer) [REQUIRED]
            PARAMETER 1 = numTxnResQEntries (Total number of entries in neighbor TxnUnit's Res queue) [REQUIRED]
         NUM PORTS = 3
            PORT 0 [1 Valid Events] = outCmdDrvReqQTokenChg (link to c_CmdDriver for outgoing req txn token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 1 [1 Valid Events] = inTxnUnitReqPtr (link to c_CmdDriver for incoming req cmds)
               VALID EVENT 0 = c_CmdPtrPkgEvent
            PORT 2 [1 Valid Events] = outCmdDrvResPtr (link to c_CmdDriver for outgoing res txn)
               VALID EVENT 0 = c_CmdResEvent
         NUM STATISTICS = 0
      COMPONENT 9 = c_CmdUnit [UNCATEGORIZED COMPONENT] (Test Cmd Unit)
         NUM PARAMETERS = 50
            PARAMETER 0 = numCmdReqQEntries (Total number of entries in CmdUnit's Req queue) [REQUIRED]
            PARAMETER 1 = numCmdResQEntries (Total number of entries in CmdUnit's Res queue) [REQUIRED]
            PARAMETER 2 = numChannelsPerDimm (Total number of channels per DIMM) [REQUIRED]
            PARAMETER 3 = numRanksPerChannel (Total number of ranks per channel) [REQUIRED]
            PARAMETER 4 = numBankGroupsPerRank (Total number of bank groups per rank) [REQUIRED]
            PARAMETER 5 = numBanksPerBankGroup (Total number of banks per group) [REQUIRED]
            PARAMETER 6 = numRowsPerBankNumber of rows in every bank ((null)) [REQUIRED]
            PARAMETER 7 = numColsPerBank (Number of cols in every bank) [REQUIRED]
            PARAMETER 8 = numBytesPerTransaction (Number of bytes retrieved for every transaction) [REQUIRED]
            PARAMETER 9 = boolPrintCmdTrace (Print a command trace) [REQUIRED]
            PARAMETER 10 = strCmdTraceFile (Filename to print the command trace, or - for stdout) [REQUIRED]
            PARAMETER 11 = strAddressMapStr (String describing the address map) [REQUIRED]
            PARAMETER 12 = relCommandWidth (Relative width of each command) [REQUIRED]
            PARAMETER 13 = boolAllocateCmdResACT (Allocate space in CmdUnit Res Q for ACT Cmds) [REQUIRED]
            PARAMETER 14 = boolAllocateCmdResREAD (Allocate space in CmdUnit Res Q for READ Cmds) [REQUIRED]
            PARAMETER 15 = boolAllocateCmdResREADA (Allocate space in CmdUnit Res Q for READA Cmds) [REQUIRED]
            PARAMETER 16 = boolAllocateCmdResWRITE (Allocate space in CmdUnit Res Q for WRITE Cmds) [REQUIRED]
            PARAMETER 17 = boolAllocateCmdResWRITEA (Allocate space in CmdUnit Res Q for WRITEA Cmds) [REQUIRED]
            PARAMETER 18 = boolAllocateCmdResPRE (Allocate space in CmdUnit Res Q for PRE Cmds) [REQUIRED]
            PARAMETER 19 = boolCmdQueueFindAnyIssuable (Search through Req Q for any cmd to send) [REQUIRED]
            PARAMETER 20 = bankPolicy (Select which bank policy to model) [REQUIRED]
            PARAMETER 21 = boolUseRefresh (Whether to use REF or not) [REQUIRED]
            PARAMETER 22 = nRC (Bank Param) [REQUIRED]
            PARAMETER 23 = nRRD (Bank Param) [REQUIRED]
            PARAMETER 24 = nRRD_L (Bank Param) [REQUIRED]
            PARAMETER 25 = nRRD_S (Bank Param) [REQUIRED]
            PARAMETER 26 = nRCD (Bank Param) [REQUIRED]
            PARAMETER 27 = nCCD (Bank Param) [REQUIRED]
            PARAMETER 28 = nCCD_L (Bank Param) [REQUIRED]
            PARAMETER 29 = nCCD_L_WR (Bank Param) [REQUIRED]
            PARAMETER 30 = nCCD_S (Bank Param) [REQUIRED]
            PARAMETER 31 = nAL (Bank Param) [REQUIRED]
            PARAMETER 32 = nCL (Bank Param) [REQUIRED]
            PARAMETER 33 = nCWL (Bank Param) [REQUIRED]
            PARAMETER 34 = nWR (Bank Param) [REQUIRED]
            PARAMETER 35 = nWTR (Bank Param) [REQUIRED]
            PARAMETER 36 = nWTR_L (Bank Param) [REQUIRED]
            PARAMETER 37 = nWTR_S (Bank Param) [REQUIRED]
            PARAMETER 38 = nRTW (Bank Param) [REQUIRED]
            PARAMETER 39 = nEWTR (Bank Param) [REQUIRED]
            PARAMETER 40 = nERTW (Bank Param) [REQUIRED]
            PARAMETER 41 = nEWTW (Bank Param) [REQUIRED]
            PARAMETER 42 = nERTR (Bank Param) [REQUIRED]
            PARAMETER 43 = nRAS (Bank Param) [REQUIRED]
            PARAMETER 44 = nRTP (Bank Param) [REQUIRED]
            PARAMETER 45 = nRP (Bank Param) [REQUIRED]
            PARAMETER 46 = nRFC (Bank Param) [REQUIRED]
            PARAMETER 47 = nREFI (Bank Param) [REQUIRED]
            PARAMETER 48 = nFAW (Bank Param) [REQUIRED]
            PARAMETER 49 = nBL (Bank Param) [REQUIRED]
         NUM PORTS = 5
            PORT 0 [1 Valid Events] = inTxnUnitReqPtr (link to c_CmdDriver for incoming req cmds)
               VALID EVENT 0 = c_CmdPtrPkgEvent
            PORT 1 [1 Valid Events] = outTxnUnitReqQTokenChg (link to c_CmdUnit for outgoing req cmd token)
               VALID EVENT 0 = c_TokenChgEvent
            PORT 2 [1 Valid Events] = outTxnUnitResPtr (link to c_CmdUnit for outgoing res cmd)
               VALID EVENT 0 = c_CmdResEvent
            PORT 3 [1 Valid Events] = outBankReqPtr (link to c_CmdUnit for outgoing req cmd)
               VALID EVENT 0 = c_CmdReqEvent
            PORT 4 [1 Valid Events] = inBankResPtr (link to c_CmdUnit for incoming res cmd)
               VALID EVENT 0 = c_CmdResEvent
         NUM STATISTICS = 0
      COMPONENT 10 = c_BankReceiver [UNCATEGORIZED COMPONENT] (Test Bank Receiver)
         NUM PARAMETERS = 0
         NUM PORTS = 2
            PORT 0 [1 Valid Events] = inCmdUnitReqPtr (link to c_BankReceiver for incoming req cmds)
               VALID EVENT 0 = c_CmdReqEvent
            PORT 1 [1 Valid Events] = outCmdUnitResPtr (link to c_BankReceiver for outgoing res cmds)
               VALID EVENT 0 = c_CmdResEvent
         NUM STATISTICS = 0
      COMPONENT 11 = c_Dimm [UNCATEGORIZED COMPONENT] (Test DIMM)
         NUM PARAMETERS = 9
            PARAMETER 0 = numRanksPerChannel (Total number of ranks per channel) [REQUIRED]
            PARAMETER 1 = numBankGroupsPerRank (Total number of bank groups per rank) [REQUIRED]
            PARAMETER 2 = numBanksPerBankGroup (Total number of banks per group) [REQUIRED]
            PARAMETER 3 = boolAllocateCmdResACT (Allocate space in CmdUnit Res Q for ACT Cmds) [REQUIRED]
            PARAMETER 4 = boolAllocateCmdResREAD (Allocate space in CmdUnit Res Q for READ Cmds) [REQUIRED]
            PARAMETER 5 = boolAllocateCmdResREADA (Allocate space in CmdUnit Res Q for READA Cmds) [REQUIRED]
            PARAMETER 6 = boolAllocateCmdResWRITE (Allocate space in CmdUnit Res Q for WRITE Cmds) [REQUIRED]
            PARAMETER 7 = boolAllocateCmdResWRITEA (Allocate space in CmdUnit Res Q for WRITEA Cmds) [REQUIRED]
            PARAMETER 8 = boolAllocateCmdResPRE (Allocate space in CmdUnit Res Q for PRE Cmds) [REQUIRED]
         NUM PORTS = 2
            PORT 0 [1 Valid Events] = inCmdUnitReqPtr (link to c_Dimm for incoming req cmds)
               VALID EVENT 0 = c_CmdReqEvent
            PORT 1 [1 Valid Events] = outCmdUnitResPtr (link to c_Dimm for outgoing res cmds)
               VALID EVENT 0 = c_CmdResEvent
         NUM STATISTICS = 0
   NUM INTROSPECTORS = 0
   NUM EVENTS        = 0
   NUM MODULES       = 0
   NUM SUBCOMPONENTS = 0
   NUM PARTITIONERS  = 0
   NUM GENERATORS    = 0
